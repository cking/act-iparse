/*
GOAL: This module should mirror the NodeJS module system according the documented behavior.
The module transport will send down code that registers module definitions by an assigned path. In addition,
the module transport will send down code that registers additional metadata to allow the module resolver to
resolve modules in the browser. Additional metadata includes the following:

- "mains": The mapping of module directory paths to a fully resolved module path
- "remaps": The remapping of one fully resolved module path to another fully resolved module path (used for browser overrides)
- "run": A list of entry point modules that should be executed when ready

Inspired by:
https://github.com/joyent/node/blob/master/lib/module.js
*/
(function() {
    var win;

    if (typeof window !== 'undefined') {
        win = window;

        // This lasso modules client has already been loaded on the page. Do nothing;
        if (win.$_mod) {
            return;
        }

        win.global = win;
    }

    /** the module runtime */
    var $_mod;

    // this object stores the module factories with the keys being module paths and
    // values being a factory function or object (e.g. "/baz$3.0.0/lib/index" --> Function)
    var definitions = {};

    // Search path that will be checked when looking for modules
    var searchPaths = [];

    // The _ready flag is used to determine if "run" modules can
    // be executed or if they should be deferred until all dependencies
    // have been loaded
    var _ready = false;

    // If $_mod.run() is called when the page is not ready then
    // we queue up the run modules to be executed later
    var runQueue = [];

    // this object stores the Module instance cache with the keys being paths of modules (e.g., "/foo$1.0.0/bar" --> Module)
    var instanceCache = {};

    // This object maps installed dependencies to specific versions
    //
    // For example:
    // {
    //   // The package "foo" with version 1.0.0 has an installed package named "bar" (foo/node_modules/bar") and
    //   // the version of "bar" is 3.0.0
    //   "/foo$1.0.0/bar": "3.0.0"
    // }
    var installed = {};

    // Maps builtin modules such as "path", "buffer" to their fully resolved paths
    var builtins = {};

    // this object maps a directory to the fully resolved module path
    //
    // For example:
    //
    var mains = {};

    // used to remap a one fully resolved module path to another fully resolved module path
    var remapped = {};

    var cacheByDirname = {};

    // When a module is mapped to a global varialble we add a reference
    // that maps the path of the module to the loaded global instance.
    // We use this mapping to ensure that global modules are only loaded
    // once if they map to the same path.
    //
    // See issue #5 - Ensure modules mapped to globals only load once
    // https://github.com/raptorjs/raptor-modules/issues/5
    var loadedGlobalsByRealPath = {};

    function moduleNotFoundError(target, from) {
        var err = new Error('Cannot find module "' + target + '"' + (from ? ' from "' + from + '"' : ''));

        err.code = 'MODULE_NOT_FOUND';
        return err;
    }

    function Module(filename) {
       /*
        A Node module has these properties:
        - filename: The path of the module
        - id: The path of the module (same as filename)
        - exports: The exports provided during load
        - loaded: Has module been fully loaded (set to false until factory function returns)

        NOT SUPPORTED:
        - parent: parent Module
        - paths: The search path used by this module (NOTE: not documented in Node.js module system so we don't need support)
        - children: The modules that were required by this module
        */
        this.id = this.filename = filename;
        this.loaded = false;
        this.exports = undefined;
    }

    Module.cache = instanceCache;

    // temporary variable for referencing the Module prototype
    var Module_prototype = Module.prototype;

    Module_prototype.load = function(factoryOrObject) {
        var filename = this.id;

        if (factoryOrObject && factoryOrObject.constructor === Function) {
            // factoryOrObject is definitely a function
            var lastSlashPos = filename.lastIndexOf('/');

            // find the value for the __dirname parameter to factory
            var dirname = filename.substring(0, lastSlashPos);

            // local cache for requires initiated from this module/dirname
            var localCache = cacheByDirname[dirname] || (cacheByDirname[dirname] = {});

            // this is the require used by the module
            var instanceRequire = function(target) {
                // Only store the `module` in the local cache since `module.exports` may not be accurate
                // if there was a circular dependency
                var module = localCache[target] || (localCache[target] = requireModule(target, dirname));
                return module.exports;
            };

            // The require method should have a resolve method that will return the resolved
            // path but not actually instantiate the module.
            // This resolve function will make sure a definition exists for the corresponding
            // path of the target but it will not instantiate a new instance of the target.
            instanceRequire.resolve = function(target) {
                if (!target) {
                    throw moduleNotFoundError('');
                }

                var resolved = resolve(target, dirname);

                if (!resolved) {
                    throw moduleNotFoundError(target, dirname);
                }

                // NOTE: resolved[0] is the path and resolved[1] is the module factory
                return resolved[0];
            };

            // NodeJS provides access to the cache as a property of the "require" function
            instanceRequire.cache = instanceCache;

            // Expose the module system runtime via the `runtime` property
            // TODO: We should deprecate this in favor of `Module.prototype.__runtime`
            // @deprecated
            instanceRequire.runtime = $_mod;

            // $_mod.def("/foo$1.0.0/lib/index", function(require, exports, module, __filename, __dirname) {
            this.exports = {};

            // call the factory function
            factoryOrObject.call(this, instanceRequire, this.exports, this, filename, dirname);
        } else {
            // factoryOrObject is not a function so have exports reference factoryOrObject
            this.exports = factoryOrObject;
        }

        this.loaded = true;
    };

    /**
     * Defines a packages whose metadata is used by raptor-loader to load the package.
     */
    function define(path, factoryOrObject, options) {
        /*
        $_mod.def('/baz$3.0.0/lib/index', function(require, exports, module, __filename, __dirname) {
            // module source code goes here
        });
        */

        var globals = options && options.globals;

        definitions[path] = factoryOrObject;

        if (globals) {
            var target = win || global;
            for (var i=0;i<globals.length; i++) {
                var globalVarName = globals[i];
                var globalModule = loadedGlobalsByRealPath[path] = requireModule(path);
                target[globalVarName] = globalModule.exports;
            }
        }
    }

    function registerMain(path, relativePath) {
        mains[path] = relativePath;
    }

    function remap(fromPath, toPath) {
        remapped[fromPath] = toPath;
    }

    function builtin(name, target) {
        builtins[name] = target;
    }

    function registerInstalledDependency(parentPath, packageName, packageVersion) {
        // Example:
        // dependencies['/my-package$1.0.0/$/my-installed-package'] = '2.0.0'
        installed[parentPath + '/' + packageName] =  packageVersion;
    }

    /**
     * This function will take an array of path parts and normalize them by handling handle ".." and "."
     * and then joining the resultant string.
     *
     * @param {Array} parts an array of parts that presumedly was split on the "/" character.
     */
    function normalizePathParts(parts) {

        // IMPORTANT: It is assumed that parts[0] === "" because this method is used to
        // join an absolute path to a relative path
        var i;
        var len = 0;

        var numParts = parts.length;

        for (i = 0; i < numParts; i++) {
            var part = parts[i];

            if (part === '.') {
                // ignore parts with just "."
                /*
                // if the "." is at end of parts (e.g. ["a", "b", "."]) then trim it off
                if (i === numParts - 1) {
                    //len--;
                }
                */
            } else if (part === '..') {
                // overwrite the previous item by decrementing length
                len--;
            } else {
                // add this part to result and increment length
                parts[len] = part;
                len++;
            }
        }

        if (len === 1) {
            // if we end up with just one part that is empty string
            // (which can happen if input is ["", "."]) then return
            // string with just the leading slash
            return '/';
        } else if (len > 2) {
            // parts i s
            // ["", "a", ""]
            // ["", "a", "b", ""]
            if (parts[len - 1].length === 0) {
                // last part is an empty string which would result in trailing slash
                len--;
            }
        }

        // truncate parts to remove unused
        parts.length = len;
        return parts.join('/');
    }

    function join(from, target) {
        var targetParts = target.split('/');
        var fromParts = from == '/' ? [''] : from.split('/');
        return normalizePathParts(fromParts.concat(targetParts));
    }

    function withoutExtension(path) {
        var lastDotPos = path.lastIndexOf('.');
        var lastSlashPos;

        /* jshint laxbreak:true */
        return ((lastDotPos === -1) || ((lastSlashPos = path.lastIndexOf('/')) !== -1) && (lastSlashPos > lastDotPos))
            ? null // use null to indicate that returned path is same as given path
            : path.substring(0, lastDotPos);
    }

    function splitPackageIdAndSubpath(path) {
        path = path.substring(1); /* Skip past the first slash */
        // Examples:
        //     '/my-package$1.0.0/foo/bar' --> ['my-package$1.0.0', '/foo/bar']
        //     '/my-package$1.0.0' --> ['my-package$1.0.0', '']
        //     '/my-package$1.0.0/' --> ['my-package$1.0.0', '/']
        //     '/@my-scoped-package/foo/$1.0.0/' --> ['@my-scoped-package/foo$1.0.0', '/']
        var slashPos = path.indexOf('/');

        if (path.charAt(1) === '@') {
            // path is something like "/@my-user-name/my-scoped-package/subpath"
            // For scoped packages, the package name is two parts. We need to skip
            // past the second slash to get the full package name
            slashPos = path.indexOf('/', slashPos+1);
        }

        var packageIdEnd = slashPos === -1 ? path.length : slashPos;

        return [
            path.substring(0, packageIdEnd), // Everything up to the slash
            path.substring(packageIdEnd) // Everything after the package ID
        ];
    }

    function resolveInstalledModule(target, from) {
        // Examples:
        // target='foo', from='/my-package$1.0.0/hello/world'

        if (target.charAt(target.length-1) === '/') {
            // This is a hack because I found require('util/') in the wild and
            // it did not work because of the trailing slash
            target = target.slice(0, -1);
        }

        // Check to see if the target module is a builtin module.
        // For example:
        // builtins['path'] = '/path-browserify$0.0.0/index'
        var builtinPath = builtins[target];
        if (builtinPath) {
            return builtinPath;
        }

        var fromParts = splitPackageIdAndSubpath(from);
        var fromPackageId = fromParts[0];


        var targetSlashPos = target.indexOf('/');
        var targetPackageName;
        var targetSubpath;

        if (targetSlashPos < 0) {
            targetPackageName = target;
            targetSubpath = '';
        } else {

            if (target.charAt(0) === '@') {
                // target is something like "@my-user-name/my-scoped-package/subpath"
                // For scoped packages, the package name is two parts. We need to skip
                // past the first slash to get the full package name
                targetSlashPos = target.indexOf('/', targetSlashPos + 1);
            }

            targetPackageName = target.substring(0, targetSlashPos);
            targetSubpath = target.substring(targetSlashPos);
        }

        var targetPackageVersion = installed[fromPackageId + '/' + targetPackageName];
        if (targetPackageVersion) {
            var resolvedPath = '/' + targetPackageName + '$' + targetPackageVersion;
            if (targetSubpath) {
                resolvedPath += targetSubpath;
            }
            return resolvedPath;
        }
    }

    function resolve(target, from) {
        var resolvedPath;

        if (target.charAt(0) === '.') {
            // turn relative path into absolute path
            resolvedPath = join(from, target);
        } else if (target.charAt(0) === '/') {
            // handle targets such as "/my/file" or "/$/foo/$/baz"
            resolvedPath = normalizePathParts(target.split('/'));
        } else {
            var len = searchPaths.length;
            for (var i = 0; i < len; i++) {
                // search path entries always end in "/";
                var candidate = searchPaths[i] + target;
                var resolved = resolve(candidate, from);
                if (resolved) {
                    return resolved;
                }
            }

            resolvedPath = resolveInstalledModule(target, from);
        }

        if (!resolvedPath) {
            return undefined;
        }

        // target is something like "/foo/baz"
        // There is no installed module in the path
        var relativePath;

        // check to see if "target" is a "directory" which has a registered main file
        if ((relativePath = mains[resolvedPath]) !== undefined) {
            if (!relativePath) {
                relativePath = 'index';
            }

            // there is a main file corresponding to the given target so add the relative path
            resolvedPath = join(resolvedPath, relativePath);
        }

        var remappedPath = remapped[resolvedPath];
        if (remappedPath) {
            resolvedPath = remappedPath;
        }

        var factoryOrObject = definitions[resolvedPath];
        if (factoryOrObject === undefined) {
            // check for definition for given path but without extension
            var resolvedPathWithoutExtension;
            if (((resolvedPathWithoutExtension = withoutExtension(resolvedPath)) === null) ||
                ((factoryOrObject = definitions[resolvedPathWithoutExtension]) === undefined)) {
                return undefined;
            }

            // we found the definition based on the path without extension so
            // update the path
            resolvedPath = resolvedPathWithoutExtension;
        }

        return [resolvedPath, factoryOrObject];
    }

    function requireModule(target, from) {
        if (!target) {
            throw moduleNotFoundError('');
        }

        var resolved = resolve(target, from);
        if (!resolved) {
            throw moduleNotFoundError(target, from);
        }

        var resolvedPath = resolved[0];

        var module = instanceCache[resolvedPath];

        if (module !== undefined) {
            // found cached entry based on the path
            return module;
        }

        // Fixes issue #5 - Ensure modules mapped to globals only load once
        // https://github.com/raptorjs/raptor-modules/issues/5
        //
        // If a module is mapped to a global variable then we want to always
        // return that global instance of the module when it is being required
        // to avoid duplicate modules being loaded. For modules that are mapped
        // to global variables we also add an entry that maps the path
        // of the module to the global instance of the loaded module.

        if (loadedGlobalsByRealPath.hasOwnProperty(resolvedPath)) {
            return loadedGlobalsByRealPath[resolvedPath];
        }

        var factoryOrObject = resolved[1];

        module = new Module(resolvedPath);

        // cache the instance before loading (allows support for circular dependency with partial loading)
        instanceCache[resolvedPath] = module;

        module.load(factoryOrObject);

        return module;
    }

    function require(target, from) {
        var module = requireModule(target, from);
        return module.exports;
    }

    /*
    $_mod.run('/$/installed-module', '/src/foo');
    */
    function run(path, options) {
        var wait = !options || (options.wait !== false);
        if (wait && !_ready) {
            return runQueue.push([path, options]);
        }

        require(path, '/');
    }

    /*
     * Mark the page as being ready and execute any of the
     * run modules that were deferred
     */
    function ready() {
        _ready = true;

        var len;
        while((len = runQueue.length)) {
            // store a reference to the queue before we reset it
            var queue = runQueue;

            // clear out the queue
            runQueue = [];

            // run all of the current jobs
            for (var i = 0; i < len; i++) {
                var args = queue[i];
                run(args[0], args[1]);
            }

            // stop running jobs in the queue if we change to not ready
            if (!_ready) {
                break;
            }
        }
    }

    function addSearchPath(prefix) {
        searchPaths.push(prefix);
    }

    var pendingCount = 0;
    var onPendingComplete = function() {
        pendingCount--;
        if (!pendingCount) {
            // Trigger any "require-run" modules in the queue to run
            ready();
        }
    };

    /*
     * $_mod is the short-hand version that that the transport layer expects
     * to be in the browser window object
     */
    Module_prototype.__runtime = $_mod = {
        /**
         * Used to register a module factory/object (*internal*)
         */
        def: define,

        /**
         * Used to register an installed dependency (e.g. "/$/foo" depends on "baz") (*internal*)
         */
        installed: registerInstalledDependency,
        run: run,
        main: registerMain,
        remap: remap,
        builtin: builtin,
        require: require,
        resolve: resolve,
        join: join,
        ready: ready,

        /**
         * Add a search path entry (internal)
         */
        searchPath: addSearchPath,

        /**
         * Sets the loader metadata for this build.
         *
         * @param asyncPackageName {String} name of asynchronous package
         * @param contentType {String} content type ("js" or "css")
         * @param bundleUrl {String} URL of bundle that belongs to package
         */
        loaderMetadata: function(data) {
            // We store loader metadata in the prototype of Module
            // so that `lasso-loader` can read it from
            // `module.__loaderMetadata`.
            Module_prototype.__loaderMetadata = data;
        },

        /**
         * Asynchronous bundle loaders should call `pending()` to instantiate
         * a new job. The object we return here has a `done` method that
         * should be called when the job completes. When the number of
         * pending jobs drops to 0, we invoke any of the require-run modules
         * that have been declared.
         */
        pending: function() {
            _ready = false;
            pendingCount++;
            return {
                done: onPendingComplete
            };
        }
    };

    if (win) {
        win.$_mod = $_mod;
    } else {
        module.exports = $_mod;
    }
})();

$_mod.installed("icoparse$1.0.0", "marko", "4.4.16");
$_mod.main("/marko$4.4.16/src/runtime/vdom", "");
$_mod.main("/marko$4.4.16/src", "");
$_mod.remap("/marko$4.4.16/src/index", "/marko$4.4.16/src/index-browser");
$_mod.def("/marko$4.4.16/src/runtime/createOut", function(require, exports, module, __filename, __dirname) { var actualCreateOut;

function setCreateOut(createOutFunc) {
    actualCreateOut = createOutFunc;
}

function createOut(globalData) {
    return actualCreateOut(globalData);
}

createOut.___setCreateOut = setCreateOut;

module.exports = createOut;
});
$_mod.main("/marko$4.4.16/src/loader", "");
$_mod.remap("/marko$4.4.16/src/loader/index", "/marko$4.4.16/src/loader/index-browser");
$_mod.remap("/marko$4.4.16/src/loader/index-browser", "/marko$4.4.16/src/loader/index-browser-dynamic");
$_mod.def("/marko$4.4.16/src/loader/index-browser-dynamic", function(require, exports, module, __filename, __dirname) { 'use strict';
module.exports = function load(templatePath) {
    // We make the assumption that the template path is a
    // fully resolved module path and that the module exists
    // as a CommonJS module
    return require(templatePath);
};
});
$_mod.def("/marko$4.4.16/src/index-browser", function(require, exports, module, __filename, __dirname) { 'use strict';
exports.createOut = require('/marko$4.4.16/src/runtime/createOut'/*'./runtime/createOut'*/);
exports.load = require('/marko$4.4.16/src/loader/index-browser-dynamic'/*'./loader'*/);

});
$_mod.installed("marko$4.4.16", "events-light", "1.0.5");
$_mod.main("/events-light$1.0.5", "src\\index");
$_mod.def("/events-light$1.0.5/src/index", function(require, exports, module, __filename, __dirname) { /* jshint newcap:false */
var slice = Array.prototype.slice;

function isFunction(arg) {
    return typeof arg === 'function';
}

function checkListener(listener) {
    if (!isFunction(listener)) {
        throw TypeError('Invalid listener');
    }
}

function invokeListener(ee, listener, args) {
    switch (args.length) {
        // fast cases
        case 1:
            listener.call(ee);
            break;
        case 2:
            listener.call(ee, args[1]);
            break;
        case 3:
            listener.call(ee, args[1], args[2]);
            break;
            // slower
        default:
            listener.apply(ee, slice.call(args, 1));
    }
}

function addListener(eventEmitter, type, listener, prepend) {
    checkListener(listener);

    var events = eventEmitter.$e || (eventEmitter.$e = {});

    var listeners = events[type];
    if (listeners) {
        if (isFunction(listeners)) {
            events[type] = prepend ? [listener, listeners] : [listeners, listener];
        } else {
            if (prepend) {
                listeners.unshift(listener);
            } else {
                listeners.push(listener);
            }
        }

    } else {
        events[type] = listener;
    }
    return eventEmitter;
}

function EventEmitter() {
    this.$e = this.$e || {};
}

EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype = {
    $e: null,

    emit: function(type) {
        var args = arguments;

        var events = this.$e;
        if (!events) {
            return;
        }

        var listeners = events && events[type];
        if (!listeners) {
            // If there is no 'error' event listener then throw.
            if (type === 'error') {
                var error = args[1];
                if (!(error instanceof Error)) {
                    var context = error;
                    error = new Error('Error: ' + context);
                    error.context = context;
                }

                throw error; // Unhandled 'error' event
            }

            return false;
        }

        if (isFunction(listeners)) {
            invokeListener(this, listeners, args);
        } else {
            listeners = slice.call(listeners);

            for (var i=0, len=listeners.length; i<len; i++) {
                var listener = listeners[i];
                invokeListener(this, listener, args);
            }
        }

        return true;
    },

    on: function(type, listener) {
        return addListener(this, type, listener, false);
    },

    prependListener: function(type, listener) {
        return addListener(this, type, listener, true);
    },

    once: function(type, listener) {
        checkListener(listener);

        function g() {
            this.removeListener(type, g);

            if (listener) {
                listener.apply(this, arguments);
                listener = null;
            }
        }

        this.on(type, g);

        return this;
    },

    // emits a 'removeListener' event iff the listener was removed
    removeListener: function(type, listener) {
        checkListener(listener);

        var events = this.$e;
        var listeners;

        if (events && (listeners = events[type])) {
            if (isFunction(listeners)) {
                if (listeners === listener) {
                    delete events[type];
                }
            } else {
                for (var i=listeners.length-1; i>=0; i--) {
                    if (listeners[i] === listener) {
                        listeners.splice(i, 1);
                    }
                }
            }
        }

        return this;
    },

    removeAllListeners: function(type) {
        var events = this.$e;
        if (events) {
            delete events[type];
        }
    },

    listenerCount: function(type) {
        var events = this.$e;
        var listeners = events && events[type];
        return listeners ? (isFunction(listeners) ? 1 : listeners.length) : 0;
    }
};

module.exports = EventEmitter;
});
$_mod.def("/marko$4.4.16/src/morphdom/specialElHandlers", function(require, exports, module, __filename, __dirname) { function syncBooleanAttrProp(fromEl, toEl, name) {
    if (fromEl[name] !== toEl[name]) {
        fromEl[name] = toEl[name];
        if (fromEl[name]) {
            fromEl.setAttribute(name, '');
        } else {
            fromEl.removeAttribute(name, '');
        }
    }
}

module.exports = {
    /**
     * Needed for IE. Apparently IE doesn't think that "selected" is an
     * attribute when reading over the attributes using selectEl.attributes
     */
    OPTION: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'selected');
    },
    /**
     * The "value" attribute is special for the <input> element since it sets
     * the initial value. Changing the "value" attribute without changing the
     * "value" property will have no effect since it is only used to the set the
     * initial value.  Similar for the "checked" attribute, and "disabled".
     */
    INPUT: function(fromEl, toEl) {
        syncBooleanAttrProp(fromEl, toEl, 'checked');
        syncBooleanAttrProp(fromEl, toEl, 'disabled');

        if (fromEl.value != toEl.value) {
            fromEl.value = toEl.value;
        }

        if (!toEl.___hasAttribute('value')) {
            fromEl.removeAttribute('value');
        }
    },

    TEXTAREA: function(fromEl, toEl) {
        var newValue = toEl.value;
        if (fromEl.value != newValue) {
            fromEl.value = newValue;
        }

        var firstChild = fromEl.firstChild;
        if (firstChild) {
            // Needed for IE. Apparently IE sets the placeholder as the
            // node value and vise versa. This ignores an empty update.
            var oldValue = firstChild.nodeValue;

            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {
                return;
            }

            firstChild.nodeValue = newValue;
        }
    },
    SELECT: function(fromEl, toEl) {
        if (!toEl.___hasAttribute('multiple')) {
            var selectedIndex = -1;
            var i = 0;
            var curChild = toEl.___firstChild;
            while(curChild) {
                if (curChild.___nodeName == 'OPTION') {
                    if (curChild.___hasAttribute('selected')) {
                        selectedIndex = i;
                        break;
                    }
                    i++;
                }
                curChild = curChild.___nextSibling;
            }

            fromEl.selectedIndex = i;
        }
    }
};

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/VNode", function(require, exports, module, __filename, __dirname) { /* jshint newcap:false */
var specialElHandlers = require('/marko$4.4.16/src/morphdom/specialElHandlers'/*'../../morphdom/specialElHandlers'*/);

function VNode() {}

VNode.prototype = {
    ___VNode: function(finalChildCount) {
        this.___finalChildCount = finalChildCount;
        this.___childCount = 0;
        this.___firstChildInternal = null;
        this.___lastChild = null;
        this.___parentNode = null;
        this.___nextSiblingInternal = null;
    },

    get ___firstChild() {
        var firstChild = this.___firstChildInternal;

        if (firstChild && firstChild.___DocumentFragment) {
            var nestedFirstChild = firstChild.___firstChild;
            // The first child is a DocumentFragment node.
            // If the DocumentFragment node has a first child then we will return that.
            // Otherwise, the DocumentFragment node is not *really* the first child and
            // we need to skip to its next sibling
            return nestedFirstChild || firstChild.___nextSibling;
        }

        return firstChild;
    },

    get ___nextSibling() {
        var nextSibling = this.___nextSiblingInternal;

        if (nextSibling) {
            if (nextSibling.___DocumentFragment) {
                var firstChild = nextSibling.___firstChild;
                return firstChild || nextSibling.___nextSibling;
            }
        } else {
            var parentNode = this.___parentNode;
            if (parentNode && parentNode.___DocumentFragment) {
                return parentNode.___nextSibling;
            }
        }

        return nextSibling;
    },

    ___appendChild: function(child) {
        this.___childCount++;

        if (this.___isTextArea) {
            if (child.___Text) {
                var childValue = child.___nodeValue;
                this.___value = (this.___value || '') + childValue;
            } else {
                throw TypeError();
            }
        } else {
            var lastChild = this.___lastChild;

            child.___parentNode = this;

            if (lastChild) {
                lastChild.___nextSiblingInternal = child;
            } else {
                this.___firstChildInternal = child;
            }

            this.___lastChild = child;
        }

        return child;
    },

    ___finishChild: function finishChild() {
        if (this.___childCount == this.___finalChildCount && this.___parentNode) {
            return this.___parentNode.___finishChild();
        } else {
            return this;
        }
    },

    actualize: function(doc) {
        var actualNode = this.___actualize(doc);

        var curChild = this.___firstChild;

        while(curChild) {
            actualNode.appendChild(curChild.actualize(doc));
            curChild = curChild.___nextSibling;
        }

        if (this.___nodeType === 1) {
            var elHandler = specialElHandlers[this.___nodeName];
            if (elHandler !== undefined) {
                elHandler(actualNode, this);
            }
        }

        return actualNode;
    }

    // ,toJSON: function() {
    //     var clone = Object.assign({
    //         nodeType: this.nodeType
    //     }, this);
    //
    //     for (var k in clone) {
    //         if (k.startsWith('_')) {
    //             delete clone[k];
    //         }
    //     }
    //     delete clone._nextSibling;
    //     delete clone._lastChild;
    //     delete clone.parentNode;
    //     return clone;
    // }
};

module.exports = VNode;

});
$_mod.installed("marko$4.4.16", "raptor-util", "3.2.0");
$_mod.def("/raptor-util$3.2.0/copyProps", function(require, exports, module, __filename, __dirname) { module.exports = function copyProps(from, to) {
    Object.getOwnPropertyNames(from).forEach(function(name) {
        var descriptor = Object.getOwnPropertyDescriptor(from, name);
        Object.defineProperty(to, name, descriptor);
    });
};
});
$_mod.def("/raptor-util$3.2.0/inherit", function(require, exports, module, __filename, __dirname) { var copyProps = require('/raptor-util$3.2.0/copyProps'/*'./copyProps'*/);

function inherit(ctor, superCtor, shouldCopyProps) {
    var oldProto = ctor.prototype;
    var newProto = ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
            value: ctor,
            writable: true,
            configurable: true
        }
    });
    if (oldProto && shouldCopyProps !== false) {
        copyProps(oldProto, newProto);
    }
    ctor.$super = superCtor;
    ctor.prototype = newProto;
    return ctor;
}


module.exports = inherit;
inherit._inherit = inherit;

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/VComment", function(require, exports, module, __filename, __dirname) { var VNode = require('/marko$4.4.16/src/runtime/vdom/VNode'/*'./VNode'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);

function VComment(value) {
    this.___VNode(-1 /* no children */);
    this.___nodeValue = value;
}

VComment.prototype = {
    ___nodeType: 8,

    ___actualize: function(doc) {
        return doc.createComment(this.___nodeValue);
    },

    ___cloneNode: function() {
        return new VComment(this.___nodeValue);
    }
};

inherit(VComment, VNode);

module.exports = VComment;

});
$_mod.def("/raptor-util$3.2.0/extend", function(require, exports, module, __filename, __dirname) { module.exports = function extend(target, source) { //A simple function to copy properties from one object to another
    if (!target) { //Check if a target was provided, otherwise create a new empty object to return
        target = {};
    }

    if (source) {
        for (var propName in source) {
            if (source.hasOwnProperty(propName)) { //Only look at source properties that are not inherited
                target[propName] = source[propName]; //Copy the property
            }
        }
    }

    return target;
};
});
$_mod.def("/marko$4.4.16/src/runtime/vdom/VDocumentFragment", function(require, exports, module, __filename, __dirname) { var VNode = require('/marko$4.4.16/src/runtime/vdom/VNode'/*'./VNode'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);
var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

function VDocumentFragmentClone(other) {
    extend(this, other);
    this.___parentNode = null;
    this.___nextSiblingInternal = null;
}

function VDocumentFragment(documentFragment) {
    this.___VNode(null /* childCount */);
}

VDocumentFragment.prototype = {
    ___nodeType: 11,

    ___DocumentFragment: true,

    ___cloneNode: function() {
        return new VDocumentFragmentClone(this);
    },

    ___actualize: function(doc) {
        return doc.createDocumentFragment();
    }
};

inherit(VDocumentFragment, VNode);

VDocumentFragmentClone.prototype = VDocumentFragment.prototype;

module.exports = VDocumentFragment;

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/VElement", function(require, exports, module, __filename, __dirname) { var VNode = require('/marko$4.4.16/src/runtime/vdom/VNode'/*'./VNode'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);

var NS_XLINK = 'http://www.w3.org/1999/xlink';
var ATTR_XLINK_HREF = 'xlink:href';
var toString = String;

var FLAG_IS_SVG = 1;
var FLAG_IS_TEXTAREA = 2;
var FLAG_SIMPLE_ATTRS = 4;

var defineProperty = Object.defineProperty;

var ATTR_HREF = 'href';
var EMPTY_OBJECT = Object.freeze({});

function convertAttrValue(type, value) {
    if (value === true) {
        return '';
    } else if (type == 'object') {
        return JSON.stringify(value);
    } else {
        return toString(value);
    }
}

function setAttribute(el, namespaceURI, name, value) {
    if (namespaceURI === null) {
        el.setAttribute(name, value);
    } else {
        el.setAttributeNS(namespaceURI, name, value);
    }
}

function removeAttribute(el, namespaceURI, name) {
    if (namespaceURI === null) {
        el.removeAttribute(name);
    } else {
        el.removeAttributeNS(namespaceURI, name);
    }
}

function VElementClone(other) {
    this.___firstChildInternal = other.___firstChildInternal;
    this.___parentNode = null;
    this.___nextSiblingInternal = null;

    this.___attributes = other.___attributes;
    this.___properties = other.___properties;
    this.___namespaceURI = other.___namespaceURI;
    this.___nodeName = other.___nodeName;
    this.___flags = other.___flags;
    this.___value = other.___value;
    this.___constId = other.___constId;
}

function VElement(tagName, attrs, childCount, flags, props) {
    this.___VNode(childCount);

    var constId, namespaceURI;

    if (props) {
        constId = props.c;
    }

    if ((this.___flags = flags || 0)) {
        if (flags & FLAG_IS_SVG) {
            namespaceURI = 'http://www.w3.org/2000/svg';
        }
    }

    this.___attributes = attrs || EMPTY_OBJECT;
    this.___properties = props || EMPTY_OBJECT;
    this.___namespaceURI = namespaceURI;
    this.___nodeName = tagName;
    this.___value = null;
    this.___constId = constId;
}

VElement.prototype = {
    ___VElement: true,

    ___nodeType: 1,

    ___cloneNode: function() {
        return new VElementClone(this);
    },

    /**
     * Shorthand method for creating and appending an HTML element
     *
     * @param  {String} tagName    The tag name (e.g. "div")
     * @param  {int|null} attrCount  The number of attributes (or `null` if not known)
     * @param  {int|null} childCount The number of child nodes (or `null` if not known)
     */
    e: function(tagName, attrs, childCount, flags, props) {
        var child = this.___appendChild(new VElement(tagName, attrs, childCount, flags, props));

        if (childCount === 0) {
            return this.___finishChild();
        } else {
            return child;
        }
    },

    /**
     * Shorthand method for creating and appending an HTML element with a dynamic namespace
     *
     * @param  {String} tagName    The tag name (e.g. "div")
     * @param  {int|null} attrCount  The number of attributes (or `null` if not known)
     * @param  {int|null} childCount The number of child nodes (or `null` if not known)
     */
    ed: function(tagName, attrs, childCount, flags, props) {
        var child = this.___appendChild(VElement.___createElementDynamicTag(tagName, attrs, childCount, flags, props));

        if (childCount === 0) {
            return this.___finishChild();
        } else {
            return child;
        }
    },

    /**
     * Shorthand method for creating and appending a static node. The provided node is automatically cloned
     * using a shallow clone since it will be mutated as a result of setting `nextSibling` and `parentNode`.
     *
     * @param  {String} value The value for the new Comment node
     */
    n: function(node) {
        this.___appendChild(node.___cloneNode());
        return this.___finishChild();
    },

    ___actualize: function(doc) {
        var namespaceURI = this.___namespaceURI;
        var tagName = this.___nodeName;

        var attributes = this.___attributes;
        var flags = this.___flags;

        var el = namespaceURI !== undefined ?
            doc.createElementNS(namespaceURI, tagName) :
            doc.createElement(tagName);

        for (var attrName in attributes) {
            var attrValue = attributes[attrName];

            if (attrValue !== false && attrValue != null) {
                var type = typeof attrValue;

                if (type !== 'string') {
                    // Special attributes aren't copied to the real DOM. They are only
                    // kept in the virtual attributes map
                    attrValue = convertAttrValue(type, attrValue);
                }

                if (attrName == ATTR_XLINK_HREF) {
                    setAttribute(el, NS_XLINK, ATTR_HREF, attrValue);
                } else {
                    el.setAttribute(attrName, attrValue);
                }
            }
        }

        if (flags & FLAG_IS_TEXTAREA) {
            el.value = this.___value;
        }

        el._vattrs = attributes;
        el._vprops = this.___properties;
        el._vflags = flags;

        return el;
    },

    ___hasAttribute: function(name) {
        // We don't care about the namespaces since the there
        // is no chance that attributes with the same name will have
        // different namespaces
        var value = this.___attributes[name];
        return value != null && value !== false;
    },
};

inherit(VElement, VNode);

var proto = VElementClone.prototype = VElement.prototype;

['checked', 'selected', 'disabled'].forEach(function(name) {
    defineProperty(proto, name, {
        get: function () {
            var value = this.___attributes[name];
            return value !== false && value != null;
        }
    });
});

defineProperty(proto, 'id', {
    get: function () {
        return this.___attributes.id;
    }
});

defineProperty(proto, 'value', {
    get: function () {
        var value = this.___value;
        if (value == null) {
            value = this.___attributes.value;
        }
        return value != null ? toString(value) : '';
    }
});

defineProperty(proto, '___isTextArea', {
    get: function () {
        return this.___flags & FLAG_IS_TEXTAREA;
    }
});

VElement.___createElementDynamicTag = function(tagName, attrs, childCount, flags, props) {
    var namespace = attrs && attrs.xmlns;
    tagName = namespace ? tagName : tagName.toUpperCase();
    var element = new VElement(tagName, attrs, childCount, flags, props);
    element.___namespaceURI = namespace;
    return element;
};

VElement.___removePreservedAttributes = function(attrs) {
    // By default this static method is a no-op, but if there are any
    // compiled components that have "no-update" attributes then
    // `preserve-attrs.js` will be imported and this method will be replaced
    // with a method that actually does something
    return attrs;
};

VElement.___morphAttrs = function(fromEl, toEl) {

    var removePreservedAttributes = VElement.___removePreservedAttributes;

    var attrs = toEl.___attributes;
    var props = fromEl._vprops = toEl.___properties;

    var attrName;
    var i;

    // We use expando properties to associate the previous HTML
    // attributes provided as part of the VDOM node with the
    // real VElement DOM node. When diffing attributes,
    // we only use our internal representation of the attributes.
    // When diffing for the first time it's possible that the
    // real VElement node will not have the expando property
    // so we build the attribute map from the expando property

    var oldAttrs = fromEl._vattrs;

    if (oldAttrs) {
        if (oldAttrs == attrs) {
            // For constant attributes the same object will be provided
            // every render and we can use that to our advantage to
            // not waste time diffing a constant, immutable attribute
            // map.
            return;
        } else {
            oldAttrs = removePreservedAttributes(oldAttrs, props, true);
        }
    } else {
        // We need to build the attribute map from the real attributes
        oldAttrs = {};

        var oldAttributesList = fromEl.attributes;
        for (i = oldAttributesList.length - 1; i >= 0; --i) {
            var attr = oldAttributesList[i];

            if (attr.specified !== false) {
                attrName = attr.name;
                if (attrName !== 'data-marko') {
                    var attrNamespaceURI = attr.namespaceURI;
                    if (attrNamespaceURI === NS_XLINK) {
                        oldAttrs[ATTR_XLINK_HREF] = attr.value;
                    } else {
                        oldAttrs[attrName] = attr.value;
                    }
                }
            }
        }

        // We don't want preserved attributes to show up in either the old
        // or new attribute map.
        removePreservedAttributes(oldAttrs, props, false);
    }

    fromEl._vattrs = attrs;

    var attrValue;

    var flags = toEl.___flags;
    var oldFlags;

    if (flags & FLAG_SIMPLE_ATTRS && ((oldFlags = fromEl._vflags) & FLAG_SIMPLE_ATTRS)) {
        if (oldAttrs['class'] !== (attrValue = attrs['class'])) {
            fromEl.className = attrValue;
        }
        if (oldAttrs.id !== (attrValue = attrs.id)) {
            fromEl.id = attrValue;
        }
        if (oldAttrs.style !== (attrValue = attrs.style)) {
            fromEl.style.cssText = attrValue;
        }
        return;
    }

    // In some cases we only want to set an attribute value for the first
    // render or we don't want certain attributes to be touched. To support
    // that use case we delete out all of the preserved attributes
    // so it's as if they never existed.
    attrs = removePreservedAttributes(attrs, props, true);

    var namespaceURI;

    // Loop over all of the attributes in the attribute map and compare
    // them to the value in the old map. However, if the value is
    // null/undefined/false then we want to remove the attribute
    for (attrName in attrs) {
        attrValue = attrs[attrName];
        namespaceURI = null;

        if (attrName === ATTR_XLINK_HREF) {
            namespaceURI = NS_XLINK;
            attrName = ATTR_HREF;
        }

        if (attrValue == null || attrValue === false) {
            removeAttribute(fromEl, namespaceURI, attrName);
        } else if (oldAttrs[attrName] !== attrValue) {
            var type = typeof attrValue;

            if (type !== 'string') {
                attrValue = convertAttrValue(type, attrValue);
            }

            setAttribute(fromEl, namespaceURI, attrName, attrValue);
        }
    }

    // If there are any old attributes that are not in the new set of attributes
    // then we need to remove those attributes from the target node
    //
    // NOTE: We can skip this if the the element is keyed because if the element
    //       is keyed then we know we already processed all of the attributes for
    //       both the target and original element since target VElement nodes will
    //       have all attributes declared. However, we can only skip if the node
    //       was not a virtualized node (i.e., a node that was not rendered by a
    //       Marko template, but rather a node that was created from an HTML
    //       string or a real DOM node).
    if (!attrs.id || props.___virtualized === true) {
        for (attrName in oldAttrs) {
            if (!(attrName in attrs)) {
                if (attrName === ATTR_XLINK_HREF) {
                    fromEl.removeAttributeNS(ATTR_XLINK_HREF, ATTR_HREF);
                } else {
                    fromEl.removeAttribute(attrName);
                }
            }
        }
    }
};

module.exports = VElement;

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/VText", function(require, exports, module, __filename, __dirname) { var VNode = require('/marko$4.4.16/src/runtime/vdom/VNode'/*'./VNode'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);

function VText(value) {
    this.___VNode(-1 /* no children */);
    this.___nodeValue = value;
}

VText.prototype = {
    ___Text: true,

    ___nodeType: 3,

    ___actualize: function(doc) {
        return doc.createTextNode(this.___nodeValue);
    },

    ___cloneNode: function() {
        return new VText(this.___nodeValue);
    }
};

inherit(VText, VNode);

module.exports = VText;

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/vdom", function(require, exports, module, __filename, __dirname) { var VNode = require('/marko$4.4.16/src/runtime/vdom/VNode'/*'./VNode'*/);
var VComment = require('/marko$4.4.16/src/runtime/vdom/VComment'/*'./VComment'*/);
var VDocumentFragment = require('/marko$4.4.16/src/runtime/vdom/VDocumentFragment'/*'./VDocumentFragment'*/);
var VElement = require('/marko$4.4.16/src/runtime/vdom/VElement'/*'./VElement'*/);
var VText = require('/marko$4.4.16/src/runtime/vdom/VText'/*'./VText'*/);

var FLAG_IS_TEXTAREA = 2;
var defaultDocument = typeof document != 'undefined' && document;
var specialHtmlRegexp = /[&<]/;
var xmlnsRegExp = /^xmlns(:|$)/;
var virtualizedProps = { ___virtualized: true };

function virtualizeChildNodes(node, vdomParent) {
    var curChild = node.firstChild;
    while(curChild) {
        vdomParent.___appendChild(virtualize(curChild));
        curChild = curChild.nextSibling;
    }
}

function virtualize(node) {
    switch(node.nodeType) {
        case 1:
            var attributes = node.attributes;
            var attrCount = attributes.length;

            var attrs;

            if (attrCount) {
                attrs = {};
                for (var i=0; i<attrCount; i++) {
                    var attr = attributes[i];
                    var attrName = attr.name;
                    if (!xmlnsRegExp.test(attrName)) {
                        attrs[attrName] = attr.value;
                    }
                }
            }

            var flags = 0;

            var tagName = node.nodeName;
            if (tagName === 'TEXTAREA') {
                flags |= FLAG_IS_TEXTAREA;
            }

            var vdomEl = new VElement(tagName, attrs, null, flags, virtualizedProps);
            if (node.namespaceURI !== 'http://www.w3.org/1999/xhtml') {
                vdomEl.___namespaceURI = node.namespaceURI;
            }

            if (vdomEl.___isTextArea) {
                vdomEl.___value = node.value;
            } else {
                virtualizeChildNodes(node, vdomEl);
            }

            return vdomEl;
        case 3:
            return new VText(node.nodeValue);
        case 8:
            return new VComment(node.nodeValue);
        case 11:
            var vdomDocFragment = new VDocumentFragment();
            virtualizeChildNodes(node, vdomDocFragment);
            return vdomDocFragment;
    }
}

function virtualizeHTML(html, doc) {
    if (!specialHtmlRegexp.test(html)) {
        return new VText(html);
    }

    var container = doc.createElement('body');
    container.innerHTML = html;
    var vdomFragment = new VDocumentFragment();

    var curChild = container.firstChild;
    while(curChild) {
        vdomFragment.___appendChild(virtualize(curChild));
        curChild = curChild.nextSibling;
    }

    return vdomFragment;
}

var Node_prototype = VNode.prototype;

/**
 * Shorthand method for creating and appending a Text node with a given value
 * @param  {String} value The text value for the new Text node
 */
Node_prototype.t = function(value) {
    var type = typeof value;
    var vdomNode;

    if (type !== 'string') {
        if (value == null) {
            value = '';
        } else if (type === 'object') {
            if (value.toHTML) {
                vdomNode = virtualizeHTML(value.toHTML(), document);
            }
        }
    }

    this.___appendChild(vdomNode || new VText(value.toString()));
    return this.___finishChild();
};

/**
 * Shorthand method for creating and appending a Comment node with a given value
 * @param  {String} value The value for the new Comment node
 */
Node_prototype.c = function(value) {
    this.___appendChild(new VComment(value));
    return this.___finishChild();
};

Node_prototype.___appendDocumentFragment = function() {
    return this.___appendChild(new VDocumentFragment());
};

exports.___VComment = VComment;
exports.___VDocumentFragment = VDocumentFragment;
exports.___VElement = VElement;
exports.___VText = VText;
exports.___virtualize = virtualize;
exports.___virtualizeHTML = virtualizeHTML;
exports.___defaultDocument = defaultDocument;

});
$_mod.remap("/marko$4.4.16/src/components/util", "/marko$4.4.16/src/components/util-browser");
$_mod.remap("/marko$4.4.16/src/components/init-components", "/marko$4.4.16/src/components/init-components-browser");
$_mod.installed("marko$4.4.16", "warp10", "1.3.4");
$_mod.def("/warp10$1.3.4/src/finalize", function(require, exports, module, __filename, __dirname) { var isArray = Array.isArray;

function resolve(object, path, len) {
    var current = object;
    for (var i=0; i<len; i++) {
        current = current[path[i]];
    }

    return current;
}

function resolveType(info) {
    if (info.type === 'Date') {
        return new Date(info.value);
    } else {
        throw new Error('Bad type');
    }
}

module.exports = function finalize(outer) {
    if (!outer) {
        return outer;
    }

    var assignments = outer.$$;
    if (assignments) {
        var object = outer.o;
        var len;

        if (assignments && (len=assignments.length)) {
            for (var i=0; i<len; i++) {
                var assignment = assignments[i];

                var rhs = assignment.r;
                var rhsValue;

                if (isArray(rhs)) {
                    rhsValue = resolve(object, rhs, rhs.length);
                } else {
                    rhsValue = resolveType(rhs);
                }

                var lhs = assignment.l;
                var lhsLast = lhs.length-1;

                if (lhsLast === -1) {
                    object = outer.o = rhsValue;
                    break;
                } else {
                    var lhsParent = resolve(object, lhs, lhsLast);
                    lhsParent[lhs[lhsLast]] = rhsValue;
                }
            }
        }

        assignments.length = 0; // Assignments have been applied, do not reapply

        return object == null ? null : object;
    } else {
        return outer;
    }

};
});
$_mod.def("/warp10$1.3.4/finalize", function(require, exports, module, __filename, __dirname) { module.exports = require('/warp10$1.3.4/src/finalize'/*'./src/finalize'*/);
});
$_mod.def("/marko$4.4.16/src/components/bubble", function(require, exports, module, __filename, __dirname) { module.exports = [
    /* Mouse Events */
    'click',
    'dblclick',
    'mousedown',
    'mouseup',
    // 'mouseover',
    // 'mousemove',
    // 'mouseout',
    'dragstart',
    'drag',
    // 'dragenter',
    // 'dragleave',
    // 'dragover',
    'drop',
    'dragend',

    /* Keyboard Events */
    'keydown',
    'keypress',
    'keyup',

    /* Form Events */
    'select',
    'change',
    'submit',
    'reset',
    'input',

    'attach', // Pseudo event supported by Marko
    'detach'  // Pseudo event supported by Marko

    // 'focus', <-- Does not bubble
    // 'blur', <-- Does not bubble
    // 'focusin', <-- Not supported in all browsers
    // 'focusout' <-- Not supported in all browsers
];
});
$_mod.def("/marko$4.4.16/src/components/event-delegation", function(require, exports, module, __filename, __dirname) { var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var runtimeId = componentsUtil.___runtimeId;
var componentLookup = componentsUtil.___componentLookup;
var getMarkoPropsFromEl = componentsUtil.___getMarkoPropsFromEl;

// We make our best effort to allow multiple marko runtimes to be loaded in the
// same window. Each marko runtime will get its own unique runtime ID.
var listenersAttachedKey = '$MED' + runtimeId;

function getEventFromEl(el, eventName) {
    var virtualProps = getMarkoPropsFromEl(el);
    var eventInfo = virtualProps[eventName];
    if (typeof eventInfo === 'string') {
        eventInfo = eventInfo.split(' ');
        if (eventInfo.length == 3) {
            eventInfo[2] = parseInt(eventInfo[2], 10);
        }
    }

    return eventInfo;
}

function delegateEvent(node, target, event) {
    var targetMethod = target[0];
    var targetComponentId = target[1];
    var extraArgs = target[2];

    var targetComponent = componentLookup[targetComponentId];

    if (!targetComponent) {
        return;
    }

    var targetFunc = targetComponent[targetMethod];
    if (!targetFunc) {
        throw Error('Method not found: ' + targetMethod);
    }

    if (extraArgs != null) {
        if (typeof extraArgs === 'number') {
            extraArgs = targetComponent.___bubblingDomEvents[extraArgs];
        }
    }

    // Invoke the component method
    if (extraArgs) {
        targetFunc.apply(targetComponent, extraArgs.concat(event, node));
    } else {
        targetFunc.call(targetComponent, event, node);
    }
}

function attachBubbleEventListeners(doc) {
    var body = doc.body;
    // Here's where we handle event delegation using our own mechanism
    // for delegating events. For each event that we have white-listed
    // as supporting bubble, we will attach a listener to the root
    // document.body element. When we get notified of a triggered event,
    // we again walk up the tree starting at the target associated
    // with the event to find any mappings for event. Each mapping
    // is from a DOM event type to a method of a component.
    require('/marko$4.4.16/src/components/bubble'/*'./bubble'*/).forEach(function addBubbleHandler(eventType) {
        body.addEventListener(eventType, function(event) {
            var propagationStopped = false;

            // Monkey-patch to fix #97
            var oldStopPropagation = event.stopPropagation;

            event.stopPropagation = function() {
                oldStopPropagation.call(event);
                propagationStopped = true;
            };

            var curNode = event.target;
            if (!curNode) {
                return;
            }

            // Search up the tree looking DOM events mapped to target
            // component methods
            var propName = 'on' + eventType;
            var target;

            // Attributes will have the following form:
            // on<event_type>("<target_method>|<component_id>")

            do {
                if ((target = getEventFromEl(curNode, propName))) {
                    delegateEvent(curNode, target, event);

                    if (propagationStopped) {
                        break;
                    }
                }
            } while((curNode = curNode.parentNode) && curNode.getAttribute);
        });
    });
}

function noop() {}

exports.___handleNodeAttach = noop;
exports.___handleNodeDetach = noop;
exports.___delegateEvent = delegateEvent;
exports.___getEventFromEl = getEventFromEl;

exports.___init = function(doc) {
    if (!doc[listenersAttachedKey]) {
        doc[listenersAttachedKey] = true;
        attachBubbleEventListeners(doc);
    }
};

});
$_mod.def("/marko$4.4.16/src/components/ComponentDef", function(require, exports, module, __filename, __dirname) { 'use strict';
var repeatedRegExp = /\[\]$/;
var componentUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var attachBubblingEvent = componentUtil.___attachBubblingEvent;
var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

/**
 * A ComponentDef is used to hold the metadata collected at runtime for
 * a single component and this information is used to instantiate the component
 * later (after the rendered HTML has been added to the DOM)
 */
function ComponentDef(component, componentId, globalComponentsContext, componentStack, componentStackLen) {
    this.___globalComponentsContext = globalComponentsContext; // The AsyncWriter that this component is associated with
    this.___componentStack = componentStack;
    this.___componentStackLen = componentStackLen;
    this.___component = component;
    this.id = componentId;

    this.___roots =  null;            // IDs of root elements if there are multiple root elements
    this.___children = null;          // An array of nested ComponentDef instances
    this.___domEvents = undefined;         // An array of DOM events that need to be added (in sets of three)

    this.___isExisting = false;

    this.___willRerenderInBrowser = false;

    this.___nextIdIndex = 0; // The unique integer to use for the next scoped ID
}

ComponentDef.prototype = {
    ___end: function() {
        this.___componentStack.length = this.___componentStackLen;
    },

    /**
     * Register a nested component for this component. We maintain a tree of components
     * so that we can instantiate nested components before their parents.
     */
    ___addChild: function (componentDef) {
        var children = this.___children;

        if (children) {
            children.push(componentDef);
        } else {
            this.___children = [componentDef];
        }
    },
    /**
     * This helper method generates a unique and fully qualified DOM element ID
     * that is unique within the scope of the current component. This method prefixes
     * the the nestedId with the ID of the current component. If nestedId ends
     * with `[]` then it is treated as a repeated ID and we will generate
     * an ID with the current index for the current nestedId.
     * (e.g. "myParentId-foo[0]", "myParentId-foo[1]", etc.)
     */
    elId: function (nestedId) {
        var id = this.id;
        if (nestedId == null) {
            return id;
        } else {
            if (typeof nestedId == 'string' && repeatedRegExp.test(nestedId)) {
                return this.___globalComponentsContext.___nextRepeatedId(id, nestedId);
            } else {
                return id + '-' + nestedId;
            }
        }
    },
    /**
     * Registers a DOM event for a nested HTML element associated with the
     * component. This is only done for non-bubbling events that require
     * direct event listeners to be added.
     * @param  {String} type The DOM event type ("mouseover", "mousemove", etc.)
     * @param  {String} targetMethod The name of the method to invoke on the scoped component
     * @param  {String} elId The DOM element ID of the DOM element that the event listener needs to be added too
     */
     e: function(type, targetMethod, elId, extraArgs) {
        if (targetMethod) {
            // The event handler method is allowed to be conditional. At render time if the target
            // method is null then we do not attach any direct event listeners.
            (this.___domEvents || (this.___domEvents = [])).push([
                type,
                targetMethod,
                elId,
                extraArgs]);
        }
    },
    /**
     * Returns the next auto generated unique ID for a nested DOM element or nested DOM component
     */
    ___nextComponentId: function() {
        var id = this.id;

        return id === null ?
            this.___globalComponentsContext.___nextComponentId(this.___out) :
            id + '-c' + (this.___nextIdIndex++);
    },

    d: function(handlerMethodName, extraArgs) {
        return attachBubblingEvent(this, handlerMethodName, extraArgs);
    }
};

ComponentDef.___deserialize = function(o, types, globals, registry) {
    var id        = o[0];
    var typeName  = types[o[1]];
    var input     = o[2];
    var extra     = o[3];

    var state = extra.s;
    var componentProps = extra.w;

    var component = typeName /* legacy */ && registry.___createComponent(typeName, id);

    if (extra.b) {
        component.___bubblingDomEvents = extra.b;
    }

    // Preview newly created component from being queued for update since we area
    // just building it from the server info
    component.___updateQueued = true;

    if (state) {
        var undefinedPropNames = extra.u;
        if (undefinedPropNames) {
            undefinedPropNames.forEach(function(undefinedPropName) {
                state[undefinedPropName] = undefined;
            });
        }
        // We go through the setter here so that we convert the state object
        // to an instance of `State`
        component.state = state;
    }

    component.___input = input;

    if (componentProps) {
        extend(component, componentProps);
    }

    var scope = extra.p;
    var customEvents = extra.e;
    if (customEvents) {
        component.___setCustomEvents(customEvents, scope);
    }

    component.___global = globals;

    return {
        ___component: component,
        ___roots: extra.r,
        ___domEvents: extra.d,
        ___willRerenderInBrowser: extra._ === 1
    };
};

module.exports = ComponentDef;

});
$_mod.remap("/marko$4.4.16/src/components/registry", "/marko$4.4.16/src/components/registry-browser");
$_mod.remap("/marko$4.4.16/src/components/loadComponent", "/marko$4.4.16/src/components/loadComponent-dynamic");
$_mod.def("/marko$4.4.16/src/components/loadComponent-dynamic", function(require, exports, module, __filename, __dirname) { 'use strict';

module.exports = function load(typeName) {
    // We make the assumption that the component type name is a path to a
    // fully resolved module path and that the module exists
    // as a CommonJS module
    return require(typeName);
};
});
$_mod.def("/marko$4.4.16/src/components/State", function(require, exports, module, __filename, __dirname) { var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

function ensure(state, propertyName) {
    var proto = state.constructor.prototype;
    if (!(propertyName in proto)) {
        Object.defineProperty(proto, propertyName, {
            get: function() {
                return this.___raw[propertyName];
            },
            set: function(value) {
                this.___set(propertyName, value, false /* ensure:false */);
            }
        });
    }
}

function State(component) {
    this.___component = component;
    this.___raw = {};

    this.___dirty = false;
    this.___old = null;
    this.___changes = null;
    this.___forced = null; // An object that we use to keep tracking of state properties that were forced to be dirty

    Object.seal(this);
}

State.prototype = {
    ___reset: function() {
        var self = this;

        self.___dirty = false;
        self.___old = null;
        self.___changes = null;
        self.___forced = null;
    },

    ___replace: function(newState) {
        var state = this;
        var key;

        var rawState = this.___raw;

        for (key in rawState) {
            if (!(key in newState)) {
                state.___set(key, undefined, false /* ensure:false */, false /* forceDirty:false */);
            }
        }

        for (key in newState) {
            state.___set(key, newState[key], true /* ensure:true */, false /* forceDirty:false */);
        }
    },
    ___set: function(name, value, shouldEnsure, forceDirty) {
        var rawState = this.___raw;

        if (shouldEnsure) {
            ensure(this, name);
        }

        if (forceDirty) {
            var forcedDirtyState = this.___forced || (this.___forced = {});
            forcedDirtyState[name] = true;
        } else if (rawState[name] === value) {
            return;
        }

        if (!this.___dirty) {
            // This is the first time we are modifying the component state
            // so introduce some properties to do some tracking of
            // changes to the state
            this.___dirty = true; // Mark the component state as dirty (i.e. modified)
            this.___old = rawState;
            this.___raw = rawState = extend({}, rawState);
            this.___changes = {};
            this.___component.___queueUpdate();
        }

        this.___changes[name] = value;

        if (value === undefined) {
            // Don't store state properties with an undefined or null value
            delete rawState[name];
        } else {
            // Otherwise, store the new value in the component state
            rawState[name] = value;
        }
    },
    toJSON: function() {
        return this.___raw;
    }
};

module.exports = State;

});
$_mod.remap("/marko$4.4.16/src/components/beginComponent", "/marko$4.4.16/src/components/beginComponent-browser");
$_mod.def("/marko$4.4.16/src/components/beginComponent-browser", function(require, exports, module, __filename, __dirname) { var ComponentDef = require('/marko$4.4.16/src/components/ComponentDef'/*'./ComponentDef'*/);

module.exports = function(component, isSplitComponent) {
    var componentStack = this.___componentStack;
    var origLength = componentStack.length;
    var parentComponentDef = componentStack[origLength - 1];

    var componentId = component.id;

    var componentDef = new ComponentDef(component, componentId, this.___globalContext, componentStack, origLength);
    parentComponentDef.___addChild(componentDef);
    this.___globalContext.___componentsById[componentId] = componentDef;

    componentStack.push(componentDef);

    return componentDef;
};

});
$_mod.def("/marko$4.4.16/src/components/ComponentsContext", function(require, exports, module, __filename, __dirname) { 'use strict';

var ComponentDef = require('/marko$4.4.16/src/components/ComponentDef'/*'./ComponentDef'*/);
var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);

var beginComponent = require('/marko$4.4.16/src/components/beginComponent-browser'/*'./beginComponent'*/);

var EMPTY_OBJECT = {};

function GlobalComponentsContext(out) {
    this.___roots = [];
    this.___preserved = EMPTY_OBJECT;
    this.___preservedBodies = EMPTY_OBJECT;
    this.___componentsById = {};
    this.___out = out;
    this.___rerenderComponent = undefined;
    this.___nextIdLookup = null;
    this.___nextComponentId = componentsUtil.___nextComponentIdProvider(out);
}

GlobalComponentsContext.prototype = {
    ___initComponents: function(doc) {
        var topLevelComponentDefs = null;

        this.___roots.forEach(function(root) {
            var children = root.___children;
            if (children) {
                // NOTE: ComponentsContext.___initClientRendered is provided by
                //       index-browser.js to avoid a circular dependency
                ComponentsContext.___initClientRendered(children, doc);
                if (topLevelComponentDefs === null) {
                    topLevelComponentDefs = children;
                } else {
                    topLevelComponentDefs = topLevelComponentDefs.concat(children);
                }
            }
        });

        this.___roots = null;

        // Reset things stored in global since global is retained for
        // future renders
        this.___out.global.___components = undefined;

        return topLevelComponentDefs;
    },
    ___preserveDOMNode: function(elId, bodyOnly) {
        var preserved = bodyOnly === true ? this.___preservedBodies : this.___preserved;
        if (preserved === EMPTY_OBJECT) {
            if (bodyOnly === true) {
                preserved = this.___preservedBodies = {};
            } else {
                preserved = this.___preserved = {};
            }
        }
        preserved[elId] = true;
    },
    ___nextRepeatedId: function(parentId, id) {
        var nextIdLookup = this.___nextIdLookup || (this.___nextIdLookup = {});

        var indexLookupKey = parentId + '-' + id;
        var currentIndex = nextIdLookup[indexLookupKey];
        if (currentIndex == null) {
            currentIndex = nextIdLookup[indexLookupKey] = 0;
        } else {
            currentIndex = ++nextIdLookup[indexLookupKey];
        }

        return indexLookupKey.slice(0, -2) + '[' + currentIndex + ']';
    }
};

function ComponentsContext(out, parentComponentsContext, shouldAddGlobalRoot) {
    var root;

    var globalComponentsContext;

    if (parentComponentsContext === undefined) {
        globalComponentsContext = out.global.___components;
        if (globalComponentsContext === undefined) {
            out.global.___components = globalComponentsContext = new GlobalComponentsContext(out);
        }

        root = new ComponentDef(null, null, globalComponentsContext);

        if (shouldAddGlobalRoot !== false) {
            globalComponentsContext.___roots.push(root);
        }
    } else {
        globalComponentsContext = parentComponentsContext.___globalContext;
        var parentComponentStack = parentComponentsContext.___componentStack;
        root = parentComponentStack[parentComponentStack.length-1];
    }

    this.___globalContext = globalComponentsContext;
    this.___out = out;
    this.___componentStack = [root];
}

ComponentsContext.prototype = {
    ___createNestedComponentsContext: function(nestedOut) {
        return new ComponentsContext(nestedOut, this);
    },
    ___beginComponent: beginComponent,

    ___nextComponentId: function() {
        var componentStack = this.___componentStack;
        var parentComponentDef = componentStack[componentStack.length - 1];
        return parentComponentDef.___nextComponentId();
    }
};

function getComponentsContext(out) {
    return out.data.___components || (out.data.___components = new ComponentsContext(out));
}

module.exports = exports = ComponentsContext;

exports.___getComponentsContext = getComponentsContext;

});
$_mod.installed("marko$4.4.16", "listener-tracker", "2.0.0");
$_mod.main("/listener-tracker$2.0.0", "lib\\listener-tracker");
$_mod.def("/listener-tracker$2.0.0/lib/listener-tracker", function(require, exports, module, __filename, __dirname) { var INDEX_EVENT = 0;
var INDEX_USER_LISTENER = 1;
var INDEX_WRAPPED_LISTENER = 2;
var DESTROY = "destroy";

function isNonEventEmitter(target) {
  return !target.once;
}

function EventEmitterWrapper(target) {
    this.$__target = target;
    this.$__listeners = [];
    this.$__subscribeTo = null;
}

EventEmitterWrapper.prototype = {
    $__remove: function(test, testWrapped) {
        var target = this.$__target;
        var listeners = this.$__listeners;

        this.$__listeners = listeners.filter(function(curListener) {
            var curEvent = curListener[INDEX_EVENT];
            var curListenerFunc = curListener[INDEX_USER_LISTENER];
            var curWrappedListenerFunc = curListener[INDEX_WRAPPED_LISTENER];

            if (testWrapped) {
                // If the user used `once` to attach an event listener then we had to
                // wrap their listener function with a new function that does some extra
                // cleanup to avoid a memory leak. If the `testWrapped` flag is set to true
                // then we are attempting to remove based on a function that we had to
                // wrap (not the user listener function)
                if (curWrappedListenerFunc && test(curEvent, curWrappedListenerFunc)) {
                    target.removeListener(curEvent, curWrappedListenerFunc);

                    return false;
                }
            } else if (test(curEvent, curListenerFunc)) {
                // If the listener function was wrapped due to it being a `once` listener
                // then we should remove from the target EventEmitter using wrapped
                // listener function. Otherwise, we remove the listener using the user-provided
                // listener function.
                target.removeListener(curEvent, curWrappedListenerFunc || curListenerFunc);

                return false;
            }

            return true;
        });

        // Fixes https://github.com/raptorjs/listener-tracker/issues/2
        // If all of the listeners stored with a wrapped EventEmitter
        // have been removed then we should unregister the wrapped
        // EventEmitter in the parent SubscriptionTracker
        var subscribeTo = this.$__subscribeTo;

        if (!this.$__listeners.length && subscribeTo) {
            var self = this;
            var subscribeToList = subscribeTo.$__subscribeToList;
            subscribeTo.$__subscribeToList = subscribeToList.filter(function(cur) {
                return cur !== self;
            });
        }
    },

    on: function(event, listener) {
        this.$__target.on(event, listener);
        this.$__listeners.push([event, listener]);
        return this;
    },

    once: function(event, listener) {
        var self = this;

        // Handling a `once` event listener is a little tricky since we need to also
        // do our own cleanup if the `once` event is emitted. Therefore, we need
        // to wrap the user's listener function with our own listener function.
        var wrappedListener = function() {
            self.$__remove(function(event, listenerFunc) {
                return wrappedListener === listenerFunc;
            }, true /* We are removing the wrapped listener */);

            listener.apply(this, arguments);
        };

        this.$__target.once(event, wrappedListener);
        this.$__listeners.push([event, listener, wrappedListener]);
        return this;
    },

    removeListener: function(event, listener) {
        if (typeof event === 'function') {
            listener = event;
            event = null;
        }

        if (listener && event) {
            this.$__remove(function(curEvent, curListener) {
                return event === curEvent && listener === curListener;
            });
        } else if (listener) {
            this.$__remove(function(curEvent, curListener) {
                return listener === curListener;
            });
        } else if (event) {
            this.removeAllListeners(event);
        }

        return this;
    },

    removeAllListeners: function(event) {

        var listeners = this.$__listeners;
        var target = this.$__target;

        if (event) {
            this.$__remove(function(curEvent, curListener) {
                return event === curEvent;
            });
        } else {
            for (var i = listeners.length - 1; i >= 0; i--) {
                var cur = listeners[i];
                target.removeListener(cur[INDEX_EVENT], cur[INDEX_USER_LISTENER]);
            }
            this.$__listeners.length = 0;
        }

        return this;
    }
};

function EventEmitterAdapter(target) {
    this.$__target = target;
}

EventEmitterAdapter.prototype = {
    on: function(event, listener) {
        this.$__target.addEventListener(event, listener);
        return this;
    },

    once: function(event, listener) {
        var self = this;

        // need to save this so we can remove it below
        var onceListener = function() {
          self.$__target.removeEventListener(event, onceListener);
          listener();
        };
        this.$__target.addEventListener(event, onceListener);
        return this;
    },

    removeListener: function(event, listener) {
        this.$__target.removeEventListener(event, listener);
        return this;
    }
};

function SubscriptionTracker() {
    this.$__subscribeToList = [];
}

SubscriptionTracker.prototype = {

    subscribeTo: function(target, options) {
        var addDestroyListener = !options || options.addDestroyListener !== false;
        var wrapper;
        var nonEE;
        var subscribeToList = this.$__subscribeToList;

        for (var i=0, len=subscribeToList.length; i<len; i++) {
            var cur = subscribeToList[i];
            if (cur.$__target === target) {
                wrapper = cur;
                break;
            }
        }

        if (!wrapper) {
            if (isNonEventEmitter(target)) {
              nonEE = new EventEmitterAdapter(target);
            }

            wrapper = new EventEmitterWrapper(nonEE || target);
            if (addDestroyListener && !nonEE) {
                wrapper.once(DESTROY, function() {
                    wrapper.removeAllListeners();

                    for (var i = subscribeToList.length - 1; i >= 0; i--) {
                        if (subscribeToList[i].$__target === target) {
                            subscribeToList.splice(i, 1);
                            break;
                        }
                    }
                });
            }

            // Store a reference to the parent SubscriptionTracker so that we can do cleanup
            // if the EventEmitterWrapper instance becomes empty (i.e., no active listeners)
            wrapper.$__subscribeTo = this;
            subscribeToList.push(wrapper);
        }

        return wrapper;
    },

    removeAllListeners: function(target, event) {
        var subscribeToList = this.$__subscribeToList;
        var i;

        if (target) {
            for (i = subscribeToList.length - 1; i >= 0; i--) {
                var cur = subscribeToList[i];
                if (cur.$__target === target) {
                    cur.removeAllListeners(event);

                    if (!cur.$__listeners.length) {
                        // Do some cleanup if we removed all
                        // listeners for the target event emitter
                        subscribeToList.splice(i, 1);
                    }

                    break;
                }
            }
        } else {
            for (i = subscribeToList.length - 1; i >= 0; i--) {
                subscribeToList[i].removeAllListeners();
            }
            subscribeToList.length = 0;
        }
    }
};

exports = module.exports = SubscriptionTracker;

exports.wrap = function(targetEventEmitter) {
    var nonEE;
    var wrapper;

    if (isNonEventEmitter(targetEventEmitter)) {
      nonEE = new EventEmitterAdapter(targetEventEmitter);
    }

    wrapper = new EventEmitterWrapper(nonEE || targetEventEmitter);
    if (!nonEE) {
      // we don't set this for non EE types
      targetEventEmitter.once(DESTROY, function() {
          wrapper.$__listeners.length = 0;
      });
    }

    return wrapper;
};

exports.createTracker = function() {
    return new SubscriptionTracker();
};

});
$_mod.remap("/marko$4.4.16/src/runtime/nextTick", "/marko$4.4.16/src/runtime/nextTick-browser");
$_mod.def("/marko$4.4.16/src/runtime/nextTick-browser", function(require, exports, module, __filename, __dirname) { /* globals window */

var win = window;
var setImmediate = win.setImmediate;

if (!setImmediate) {
    if (win.postMessage) {
        var queue = [];
        var messageName = 'si';
        win.addEventListener('message', function (event) {
            var source = event.source;
            if (source == win || !source && event.data === messageName) {
                event.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        setImmediate = function(fn) {
            queue.push(fn);
            win.postMessage(messageName, '*');
        };
    } else {
        setImmediate = setTimeout;
    }
}

module.exports = setImmediate;

});
$_mod.def("/marko$4.4.16/src/components/update-manager", function(require, exports, module, __filename, __dirname) { 'use strict';

var updatesScheduled = false;
var batchStack = []; // A stack of batched updates
var unbatchedQueue = []; // Used for scheduled batched updates

var nextTick = require('/marko$4.4.16/src/runtime/nextTick-browser'/*'../runtime/nextTick'*/);

/**
 * This function is called when we schedule the update of "unbatched"
 * updates to components.
 */
function updateUnbatchedComponents() {
    if (unbatchedQueue.length) {
        try {
            updateComponents(unbatchedQueue);
        } finally {
            // Reset the flag now that this scheduled batch update
            // is complete so that we can later schedule another
            // batched update if needed
            updatesScheduled = false;
        }
    }
}

function scheduleUpdates() {
    if (updatesScheduled) {
        // We have already scheduled a batched update for the
        // process.nextTick so nothing to do
        return;
    }

    updatesScheduled = true;

    nextTick(updateUnbatchedComponents);
}

function updateComponents(queue) {
    // Loop over the components in the queue and update them.
    // NOTE: It is okay if the queue grows during the iteration
    //       since we will still get to them at the end
    for (var i=0; i<queue.length; i++) {
        var component = queue[i];
        component.___update(); // Do the actual component update
    }

    // Clear out the queue by setting the length to zero
    queue.length = 0;
}

function batchUpdate(func) {
    // If the batched update stack is empty then this
    // is the outer batched update. After the outer
    // batched update completes we invoke the "afterUpdate"
    // event listeners.
    var batch = {
        ___queue: null
    };

    batchStack.push(batch);

    try {
        func();
    } finally {
        try {
            // Update all of the components that where queued up
            // in this batch (if any)
            if (batch.___queue) {
                updateComponents(batch.___queue);
            }
        } finally {
            // Now that we have completed the update of all the components
            // in this batch we need to remove it off the top of the stack
            batchStack.length--;
        }
    }
}

function queueComponentUpdate(component) {
    var batchStackLen = batchStack.length;

    if (batchStackLen) {
        // When a batch update is started we push a new batch on to a stack.
        // If the stack has a non-zero length then we know that a batch has
        // been started so we can just queue the component on the top batch. When
        // the batch is ended this component will be updated.
        var batch = batchStack[batchStackLen-1];

        // We default the batch queue to null to avoid creating an Array instance
        // unnecessarily. If it is null then we create a new Array, otherwise
        // we push it onto the existing Array queue
        if (batch.___queue) {
            batch.___queue.push(component);
        } else {
            batch.___queue = [component];
        }
    } else {
        // We are not within a batched update. We need to schedule a batch update
        // for the process.nextTick (if that hasn't been done already) and we will
        // add the component to the unbatched queued
        scheduleUpdates();
        unbatchedQueue.push(component);
    }
}

exports.___queueComponentUpdate = queueComponentUpdate;
exports.___batchUpdate = batchUpdate;

});
$_mod.main("/marko$4.4.16/src/morphdom", "");
$_mod.def("/marko$4.4.16/src/morphdom/index", function(require, exports, module, __filename, __dirname) { 'use strict';
var defaultDoc = typeof document == 'undefined' ? undefined : document;
var specialElHandlers = require('/marko$4.4.16/src/morphdom/specialElHandlers'/*'./specialElHandlers'*/);

var morphAttrs = require('/marko$4.4.16/src/runtime/vdom/VElement'/*'../runtime/vdom/VElement'*/).___morphAttrs;

var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;

function compareNodeNames(fromEl, toEl) {
    return fromEl.nodeName === toEl.___nodeName;
}


function getElementById(doc, id) {
    return doc.getElementById(id);
}

function morphdom(
        fromNode,
        toNode,
        context,
        onNodeAdded,
        onBeforeElUpdated,
        onBeforeNodeDiscarded,
        onNodeDiscarded,
        onBeforeElChildrenUpdated
    ) {

    var doc = fromNode.ownerDocument || defaultDoc;

    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.
    var removalList = [];
    var foundKeys = {};

    function walkDiscardedChildNodes(node) {
        onNodeDiscarded(node);
        var curChild = node.firstChild;

        while (curChild) {
            walkDiscardedChildNodes(curChild);
            curChild = curChild.nextSibling;
        }
    }


    function addVirtualNode(vEl, parentEl) {
        var realEl = vEl.___actualize(doc);

        if (parentEl) {
            parentEl.appendChild(realEl);
        }

        onNodeAdded(realEl, context);

        var vCurChild = vEl.___firstChild;
        while (vCurChild) {
            var realCurChild = null;

            var key = vCurChild.id;
            if (key) {
                var unmatchedFromEl = getElementById(doc, key);
                if (unmatchedFromEl && compareNodeNames(vCurChild, unmatchedFromEl)) {
                    morphEl(unmatchedFromEl, vCurChild, false);
                    realEl.appendChild(realCurChild = unmatchedFromEl);
                }
            }

            if (!realCurChild) {
                addVirtualNode(vCurChild, realEl);
            }

            vCurChild = vCurChild.___nextSibling;
        }

        if (vEl.___nodeType === 1) {
            var elHandler = specialElHandlers[vEl.nodeName];
            if (elHandler !== undefined) {
                elHandler(realEl, vEl);
            }
        }

        return realEl;
    }

    function morphEl(fromEl, toEl, childrenOnly) {
        var toElKey = toEl.id;
        var nodeName = toEl.___nodeName;

        if (childrenOnly === false) {
            if (toElKey) {
                // If an element with an ID is being morphed then it is will be in the final
                // DOM so clear it out of the saved elements collection
                foundKeys[toElKey] = true;
            }

            var constId = toEl.___constId;
            if (constId !== undefined) {
                var otherProps = fromEl._vprops;
                if (otherProps !== undefined && constId === otherProps.c) {
                    return;
                }
            }

            if (onBeforeElUpdated(fromEl, toElKey, context) === true) {
                return;
            }

            morphAttrs(fromEl, toEl);
        }


        if (onBeforeElChildrenUpdated(fromEl, toElKey, context) === true) {
            return;
        }

        if (nodeName !== 'TEXTAREA') {
            var curToNodeChild = toEl.___firstChild;
            var curFromNodeChild = fromEl.firstChild;
            var curToNodeKey;
            var curFromNodeKey;

            var fromNextSibling;
            var toNextSibling;
            var matchingFromEl;

            outer: while (curToNodeChild) {
                toNextSibling = curToNodeChild.___nextSibling;
                curToNodeKey = curToNodeChild.id;

                while (curFromNodeChild) {
                    fromNextSibling = curFromNodeChild.nextSibling;

                    curFromNodeKey = curFromNodeChild.id;

                    var curFromNodeType = curFromNodeChild.nodeType;

                    var isCompatible = undefined;

                    if (curFromNodeType === curToNodeChild.___nodeType) {
                        if (curFromNodeType === ELEMENT_NODE) {
                            // Both nodes being compared are Element nodes

                            if (curToNodeKey) {
                                // The target node has a key so we want to match it up with the correct element
                                // in the original DOM tree
                                if (curToNodeKey !== curFromNodeKey) {
                                    // The current element in the original DOM tree does not have a matching key so
                                    // let's check our lookup to see if there is a matching element in the original
                                    // DOM tree
                                    if ((matchingFromEl = getElementById(doc, curToNodeKey))) {
                                        if (curFromNodeChild.nextSibling === matchingFromEl) {
                                            // Special case for single element removals. To avoid removing the original
                                            // DOM node out of the tree (since that can break CSS transitions, etc.),
                                            // we will instead discard the current node and wait until the next
                                            // iteration to properly match up the keyed target element with its matching
                                            // element in the original tree
                                            isCompatible = false;
                                        } else {
                                            // We found a matching keyed element somewhere in the original DOM tree.
                                            // Let's moving the original DOM node into the current position and morph
                                            // it.

                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through
                                            // the `removeNode()` function for the node that is being discarded so that
                                            // all lifecycle hooks are correctly invoked


                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);

                                            var curToNodeChildNextSibling = curToNodeChild.___nextSibling;
                                            if (curToNodeChildNextSibling && curToNodeChildNextSibling.id === curFromNodeKey) {
                                                fromNextSibling = curFromNodeChild;
                                            } else {
                                                fromNextSibling = curFromNodeChild.nextSibling;
                                                removalList.push(curFromNodeChild);
                                            }

                                            curFromNodeChild = matchingFromEl;
                                        }
                                    } else {
                                        // The nodes are not compatible since the "to" node has a key and there
                                        // is no matching keyed node in the source tree
                                        isCompatible = false;
                                    }
                                }
                            } else if (curFromNodeKey) {
                                // The original has a key
                                isCompatible = false;
                            }

                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild) === true;

                            if (isCompatible === true) {
                                // We found compatible DOM elements so transform
                                // the current "from" node to match the current
                                // target DOM node.
                                morphEl(curFromNodeChild, curToNodeChild, false);
                            }

                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType === COMMENT_NODE) {
                            // Both nodes being compared are Text or Comment nodes
                            isCompatible = true;
                            // Simply update nodeValue on the original node to
                            // change the text value
                            curFromNodeChild.nodeValue = curToNodeChild.___nodeValue;
                        }
                    }

                    if (isCompatible === true) {
                        // Advance both the "to" child and the "from" child since we found a match
                        curToNodeChild = toNextSibling;
                        curFromNodeChild = fromNextSibling;
                        continue outer;
                    }

                    // No compatible match so remove the old node from the DOM and continue trying to find a
                    // match in the original DOM. However, we only do this if the from node is not keyed
                    // since it is possible that a keyed node might match up with a node somewhere else in the
                    // target tree and we don't want to discard it just yet since it still might find a
                    // home in the final DOM tree. After everything is done we will remove any keyed nodes
                    // that didn't find a home
                    removalList.push(curFromNodeChild);

                    curFromNodeChild = fromNextSibling;
                }

                // If we got this far then we did not find a candidate match for
                // our "to node" and we exhausted all of the children "from"
                // nodes. Therefore, we will just append the current "to" node
                // to the end
                if (curToNodeKey && (matchingFromEl = getElementById(doc, curToNodeKey)) && compareNodeNames(matchingFromEl, curToNodeChild)) {
                    fromEl.appendChild(matchingFromEl);
                    morphEl(matchingFromEl, curToNodeChild, false);
                } else {
                    addVirtualNode(curToNodeChild, fromEl);
                }

                curToNodeChild = toNextSibling;
                curFromNodeChild = fromNextSibling;
            }

            // We have processed all of the "to nodes". If curFromNodeChild is
            // non-null then we still have some from nodes left over that need
            // to be removed
            while (curFromNodeChild) {
                removalList.push(curFromNodeChild);
                curFromNodeChild = curFromNodeChild.nextSibling;
            }
        }

        var specialElHandler = specialElHandlers[nodeName];
        if (specialElHandler) {
            specialElHandler(fromEl, toEl);
        }
    } // END: morphEl(...)

    var morphedNode = fromNode;
    var fromNodeType = morphedNode.nodeType;
    var toNodeType = toNode.___nodeType;
    var morphChildrenOnly = false;
    var shouldMorphEl = true;
    var newNode;

    // Handle the case where we are given two DOM nodes that are not
    // compatible (e.g. <div> --> <span> or <div> --> TEXT)
    if (fromNodeType == ELEMENT_NODE) {
        if (toNodeType == ELEMENT_NODE) {
            if (!compareNodeNames(fromNode, toNode)) {
                newNode = toNode.___actualize(doc);
                morphChildrenOnly = true;
                removalList.push(fromNode);
            }
        } else {
            // Going from an element node to a text or comment node
            removalList.push(fromNode);
            newNode = toNode.___actualize(doc);
            shouldMorphEl = false;
        }
    } else if (fromNodeType == TEXT_NODE || fromNodeType == COMMENT_NODE) { // Text or comment node
        if (toNodeType == fromNodeType) {
            morphedNode.nodeValue = toNode.___nodeValue;
            return morphedNode;
        } else {
            // Text node to something else
            removalList.push(fromNode);
            newNode = addVirtualNode(toNode);
            shouldMorphEl = false;
        }
    }

    if (shouldMorphEl === true) {
        morphEl(newNode || morphedNode, toNode, morphChildrenOnly);
    }

    if (newNode) {
        if (fromNode.parentNode) {
            fromNode.parentNode.replaceChild(newNode, fromNode);
        }
    }

    // We now need to loop over any keyed nodes that might need to be
    // removed. We only do the removal if we know that the keyed node
    // never found a match. When a keyed node is matched up we remove
    // it out of fromNodesLookup and we use fromNodesLookup to determine
    // if a keyed node has been matched up or not
    for (var i=0, len=removalList.length; i<len; i++) {
        var node = removalList[i];
        var key = node.id;
        if (!key || foundKeys[key] === undefined) {
            if (onBeforeNodeDiscarded(node) == false) {
                continue;
            }

            var parentNode = node.parentNode;
            if (parentNode) {
                parentNode.removeChild(node);
            }

            walkDiscardedChildNodes(node);
        }
    }

    return newNode || morphedNode;
}

module.exports = morphdom;

});
$_mod.def("/marko$4.4.16/src/components/Component", function(require, exports, module, __filename, __dirname) { 'use strict';
/* jshint newcap:false */

var domInsert = require('/marko$4.4.16/src/runtime/dom-insert'/*'../runtime/dom-insert'*/);
var defaultCreateOut = require('/marko$4.4.16/src/runtime/createOut'/*'../runtime/createOut'*/);
var getComponentsContext = require('/marko$4.4.16/src/components/ComponentsContext'/*'./ComponentsContext'*/).___getComponentsContext;
var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var componentLookup = componentsUtil.___componentLookup;
var emitLifecycleEvent = componentsUtil.___emitLifecycleEvent;
var destroyComponentForEl = componentsUtil.___destroyComponentForEl;
var destroyElRecursive = componentsUtil.___destroyElRecursive;
var getElementById = componentsUtil.___getElementById;
var EventEmitter = require('/events-light$1.0.5/src/index'/*'events-light'*/);
var RenderResult = require('/marko$4.4.16/src/runtime/RenderResult'/*'../runtime/RenderResult'*/);
var SubscriptionTracker = require('/listener-tracker$2.0.0/lib/listener-tracker'/*'listener-tracker'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);
var updateManager = require('/marko$4.4.16/src/components/update-manager'/*'./update-manager'*/);
var morphdom = require('/marko$4.4.16/src/morphdom/index'/*'../morphdom'*/);
var eventDelegation = require('/marko$4.4.16/src/components/event-delegation'/*'./event-delegation'*/);

var slice = Array.prototype.slice;

var MORPHDOM_SKIP = true;

var COMPONENT_SUBSCRIBE_TO_OPTIONS;
var NON_COMPONENT_SUBSCRIBE_TO_OPTIONS = {
    addDestroyListener: false
};

function outNoop() { /* jshint -W040 */ return this; }

var emit = EventEmitter.prototype.emit;

function removeListener(removeEventListenerHandle) {
    removeEventListenerHandle();
}

function checkCompatibleComponent(globalComponentsContext, el) {
    var component = el._w;
    while(component) {
        var id = component.id;
        var newComponentDef = globalComponentsContext.___componentsById[id];
        if (newComponentDef && component.___type == newComponentDef.___component.___type) {
            break;
        }

        var rootFor = component.___rootFor;
        if (rootFor)  {
            component = rootFor;
        } else {
            component.___destroyShallow();
            break;
        }
    }
}

function handleCustomEventWithMethodListener(component, targetMethodName, args, extraArgs) {
    // Remove the "eventType" argument
    args.push(component);

    if (extraArgs) {
        args = extraArgs.concat(args);
    }


    var targetComponent = componentLookup[component.___scope];
    var targetMethod = targetComponent[targetMethodName];
    if (!targetMethod) {
        throw Error('Method not found: ' + targetMethodName);
    }

    targetMethod.apply(targetComponent, args);
}

function getElIdHelper(component, componentElId, index) {
    var id = component.id;

    var elId = componentElId != null ? id + '-' + componentElId : id;

    if (index != null) {
        elId += '[' + index + ']';
    }

    return elId;
}

/**
 * This method is used to process "update_<stateName>" handler functions.
 * If all of the modified state properties have a user provided update handler
 * then a rerender will be bypassed and, instead, the DOM will be updated
 * looping over and invoking the custom update handlers.
 * @return {boolean} Returns true if if the DOM was updated. False, otherwise.
 */
function processUpdateHandlers(component, stateChanges, oldState) {
    var handlerMethod;
    var handlers;

    for (var propName in stateChanges) {
        if (stateChanges.hasOwnProperty(propName)) {
            var handlerMethodName = 'update_' + propName;

            handlerMethod = component[handlerMethodName];
            if (handlerMethod) {
                (handlers || (handlers=[])).push([propName, handlerMethod]);
            } else {
                // This state change does not have a state handler so return false
                // to force a rerender
                return;
            }
        }
    }

    // If we got here then all of the changed state properties have
    // an update handler or there are no state properties that actually
    // changed.
    if (handlers) {
        // Otherwise, there are handlers for all of the changed properties
        // so apply the updates using those handlers

        handlers.forEach(function(handler, i) {
            var propertyName = handler[0];
            handlerMethod = handler[1];

            var newValue = stateChanges[propertyName];
            var oldValue = oldState[propertyName];
            handlerMethod.call(component, newValue, oldValue);
        });

        emitLifecycleEvent(component, 'update');

        component.___reset();
    }

    return true;
}

function checkInputChanged(existingComponent, oldInput, newInput) {
    if (oldInput != newInput) {
        if (oldInput == null || newInput == null) {
            return true;
        }

        var oldKeys = Object.keys(oldInput);
        var newKeys = Object.keys(newInput);
        var len = oldKeys.length;
        if (len !== newKeys.length) {
            return true;
        }

        for (var i=0; i<len; i++) {
            var key = oldKeys[i];
            if (oldInput[key] !== newInput[key]) {
                return true;
            }
        }
    }

    return false;
}

function onNodeDiscarded(node) {
    if (node.nodeType === 1) {
        destroyComponentForEl(node);
    }
}

function onBeforeNodeDiscarded(node) {
    return eventDelegation.___handleNodeDetach(node);
}

function onBeforeElUpdated(fromEl, key, globalComponentsContext) {
    if (key) {
        var preserved = globalComponentsContext.___preserved[key];

        if (preserved === true) {
            // Don't morph elements that are associated with components that are being
            // reused or elements that are being preserved. For components being reused,
            // the morphing will take place when the reused component updates.
            return MORPHDOM_SKIP;
        } else {
            // We may need to destroy a Component associated with the current element
            // if a new UI component was rendered to the same element and the types
            // do not match
            checkCompatibleComponent(globalComponentsContext, fromEl);
        }
    }
}

function onBeforeElChildrenUpdated(el, key, globalComponentsContext) {
    if (key) {
        var preserved = globalComponentsContext.___preservedBodies[key];
        if (preserved === true) {
            // Don't morph the children since they are preserved
            return MORPHDOM_SKIP;
        }
    }
}

function onNodeAdded(node, globalComponentsContext) {
    eventDelegation.___handleNodeAttach(node, globalComponentsContext.___out);
}

var componentProto;

/**
 * Base component type.
 *
 * NOTE: Any methods that are prefixed with an underscore should be considered private!
 */
function Component(id) {
    EventEmitter.call(this);
    this.id = id;
    this.el = null;
    this.___state = null;
    this.___roots = null;
    this.___subscriptions = null;
    this.___domEventListenerHandles = null;
    this.___bubblingDomEvents = null; // Used to keep track of bubbling DOM events for components rendered on the server
    this.___customEvents = null;
    this.___scope = null;
    this.___renderInput = null;
    this.___input = undefined;
    this.___mounted = false;
    this.___global = undefined;

    this.___destroyed = false;
    this.___updateQueued = false;
    this.___dirty = false;
    this.___settingInput = false;

    this.___document = undefined;
}

Component.prototype = componentProto = {
    ___isComponent: true,

    subscribeTo: function(target) {
        if (!target) {
            throw TypeError();
        }

        var subscriptions = this.___subscriptions || (this.___subscriptions = new SubscriptionTracker());

        var subscribeToOptions = target.___isComponent ?
            COMPONENT_SUBSCRIBE_TO_OPTIONS :
            NON_COMPONENT_SUBSCRIBE_TO_OPTIONS;

        return subscriptions.subscribeTo(target, subscribeToOptions);
    },

    emit: function(eventType) {
        var customEvents = this.___customEvents;
        var target;

        if (customEvents && (target = customEvents[eventType])) {
            var targetMethodName = target[0];
            var extraArgs = target[1];
            var args = slice.call(arguments, 1);

            handleCustomEventWithMethodListener(this, targetMethodName, args, extraArgs);
        }

        if (this.listenerCount(eventType)) {
            return emit.apply(this, arguments);
        }
    },
    getElId: function (componentElId, index) {
        return getElIdHelper(this, componentElId, index);
    },
    getEl: function (componentElId, index) {
        var doc = this.___document;

        if (componentElId != null) {
            return getElementById(doc, getElIdHelper(this, componentElId, index));
        } else {
            return this.el || getElementById(doc, getElIdHelper(this));
        }
    },
    getEls: function(id) {
        var els = [];
        var i = 0;
        var el;
        while((el = this.getEl(id, i))) {
            els.push(el);
            i++;
        }
        return els;
    },
    getComponent: function(id, index) {
        return componentLookup[getElIdHelper(this, id, index)];
    },
    getComponents: function(id) {
        var components = [];
        var i = 0;
        var component;
        while((component = componentLookup[getElIdHelper(this, id, i)])) {
            components.push(component);
            i++;
        }
        return components;
    },
    destroy: function() {
        if (this.___destroyed) {
            return;
        }

        var els = this.els;

        this.___destroyShallow();

        var rootComponents = this.___rootComponents;
        if (rootComponents) {
            rootComponents.forEach(function(rootComponent) {
                rootComponent.___destroy();
            });
        }

        els.forEach(function(el) {
            destroyElRecursive(el);

            var parentNode = el.parentNode;
            if (parentNode) {
                parentNode.removeChild(el);
            }
        });
    },

    ___destroyShallow: function() {
        if (this.___destroyed) {
            return;
        }

        emitLifecycleEvent(this, 'destroy');
        this.___destroyed = true;

        this.el = null;

        // Unsubscribe from all DOM events
        this.___removeDOMEventListeners();

        var subscriptions = this.___subscriptions;
        if (subscriptions) {
            subscriptions.removeAllListeners();
            this.___subscriptions = null;
        }

        delete componentLookup[this.id];
    },

    isDestroyed: function() {
        return this.___destroyed;
    },
    get state() {
        return this.___state;
    },
    set state(newState) {
        var state = this.___state;
        if (!state && !newState) {
            return;
        }

        if (!state) {
            state = this.___state = new this.___State(this);
        }

        state.___replace(newState || {});

        if (state.___dirty) {
            this.___queueUpdate();
        }

        if (!newState) {
            this.___state = null;
        }
    },
    setState: function(name, value) {
        var state = this.___state;

        if (typeof name == 'object') {
            // Merge in the new state with the old state
            var newState = name;
            for (var k in newState) {
                if (newState.hasOwnProperty(k)) {
                    state.___set(k, newState[k], true /* ensure:true */);
                }
            }
        } else {
            state.___set(name, value, true /* ensure:true */);
        }
    },

    setStateDirty: function(name, value) {
        var state = this.___state;

        if (arguments.length == 1) {
            value = state[name];
        }

        state.___set(name, value, true /* ensure:true */, true /* forceDirty:true */);
    },

    replaceState: function(newState) {
        this.___state.___replace(newState);
    },

    get input() {
        return this.___input;
    },
    set input(newInput) {
        if (this.___settingInput) {
            this.___input = newInput;
        } else {
            this.___setInput(newInput);
        }
    },

    ___setInput: function(newInput, onInput, out) {
        onInput = onInput || this.onInput;
        var updatedInput;

        var oldInput = this.___input;
        this.___input = undefined;

        if (onInput) {
            // We need to set a flag to preview `this.input = foo` inside
            // onInput causing infinite recursion
            this.___settingInput = true;
            updatedInput = onInput.call(this, newInput || {}, out);
            this.___settingInput = false;
        }

        newInput = this.___renderInput = updatedInput || newInput;

        if ((this.___dirty = checkInputChanged(this, oldInput, newInput))) {
            this.___queueUpdate();
        }

        if (this.___input === undefined) {
            this.___input = newInput;
        }

        return newInput;
    },

    forceUpdate: function() {
        this.___dirty = true;
        this.___queueUpdate();
    },

    ___queueUpdate: function() {
        if (!this.___updateQueued) {
            updateManager.___queueComponentUpdate(this);
        }
    },

    update: function() {
        if (this.___destroyed === true || this.___isDirty === false) {
            return;
        }

        var input = this.___input;
        var state = this.___state;

        if (this.___dirty === false && state !== null && state.___dirty === true) {
            if (processUpdateHandlers(this, state.___changes, state.___old, state)) {
                state.___dirty = false;
            }
        }

        if (this.___isDirty === true) {
            // The UI component is still dirty after process state handlers
            // then we should rerender

            if (this.shouldUpdate(input, state) !== false) {
                this.___rerender(false);
            }
        }

        this.___reset();
    },


    get ___isDirty() {
        return this.___dirty === true || (this.___state !== null && this.___state.___dirty === true);
    },

    ___reset: function() {
        this.___dirty = false;
        this.___updateQueued = false;
        this.___renderInput = null;
        var state = this.___state;
        if (state) {
            state.___reset();
        }
    },

    shouldUpdate: function(newState, newProps) {
        return true;
    },

    ___emitLifecycleEvent: function(eventType, eventArg1, eventArg2) {
        emitLifecycleEvent(this, eventType, eventArg1, eventArg2);
    },

    ___rerender: function(isRerenderInBrowser) {
        var self = this;
        var renderer = self.___renderer;

        if (!renderer) {
            throw TypeError();
        }
        var fromEls = self.___getRootEls({});
        var doc = self.___document;
        var input = this.___renderInput || this.___input;
        var globalData = this.___global;

        updateManager.___batchUpdate(function() {
            var createOut = renderer.createOut || defaultCreateOut;
            var out = createOut(globalData);
            out.sync();
            out.___document = self.___document;

            if (isRerenderInBrowser === true) {
                out.e =
                    out.be =
                    out.ee =
                    out.t =
                    out.h =
                    out.w =
                    out.write =
                    out.html =
                    outNoop;
            }

            var componentsContext = getComponentsContext(out);
            var globalComponentsContext = componentsContext.___globalContext;
            globalComponentsContext.___rerenderComponent = self;
            globalComponentsContext.___isRerenderInBrowser = isRerenderInBrowser;

            renderer(input, out);

            var result = new RenderResult(out);

            if (isRerenderInBrowser !== true) {
                var targetNode = out.___getOutput();

                var fromEl;

                var targetEl = targetNode.___firstChild;
                while(targetEl) {
                    var id = targetEl.id;

                    if (id) {
                        fromEl = fromEls[id];
                        if (fromEl) {
                            morphdom(
                                fromEl,
                                targetEl,
                                globalComponentsContext,
                                onNodeAdded,
                                onBeforeElUpdated,
                                onBeforeNodeDiscarded,
                                onNodeDiscarded,
                                onBeforeElChildrenUpdated);
                        }

                        targetEl = targetEl.___nextSibling;
                    }
                }
            }

            result.afterInsert(doc);

            out.emit('___componentsInitialized');
        });

        this.___reset();
    },

    ___getRootEls: function(rootEls) {
        var i, len;

        var componentEls = this.els;

        for (i=0, len=componentEls.length; i<len; i++) {
            var componentEl = componentEls[i];
            rootEls[componentEl.id] = componentEl;
        }

        var rootComponents = this.___rootComponents;
        if (rootComponents) {
            for (i=0, len=rootComponents.length; i<len; i++) {
                var rootComponent = rootComponents[i];
                rootComponent.___getRootEls(rootEls);
            }
        }

        return rootEls;
    },

    ___removeDOMEventListeners: function() {
        var eventListenerHandles = this.___domEventListenerHandles;
        if (eventListenerHandles) {
            eventListenerHandles.forEach(removeListener);
            this.___domEventListenerHandles = null;
        }
    },

    get ___rawState() {
        var state = this.___state;
        return state && state.___raw;
    },

    ___setCustomEvents: function(customEvents, scope) {
        var finalCustomEvents = this.___customEvents = {};
        this.___scope = scope;

        customEvents.forEach(function(customEvent) {
            var eventType = customEvent[0];
            var targetMethodName = customEvent[1];
            var extraArgs = customEvent[2];

            finalCustomEvents[eventType] = [targetMethodName, extraArgs];
        });
    }
};

componentProto.elId = componentProto.getElId;
componentProto.___update = componentProto.update;
componentProto.___destroy = componentProto.destroy;

// Add all of the following DOM methods to Component.prototype:
// - appendTo(referenceEl)
// - replace(referenceEl)
// - replaceChildrenOf(referenceEl)
// - insertBefore(referenceEl)
// - insertAfter(referenceEl)
// - prependTo(referenceEl)
domInsert(
    componentProto,
    function getEl(component) {
        var els = this.els;
        var elCount = els.length;
        if (elCount > 1) {
            var fragment = component.___document.createDocumentFragment();
            els.forEach(function(el) {
                fragment.appendChild(el);
            });
            return fragment;
        } else {
            return els[0];
        }
    },
    function afterInsert(component) {
        return component;
    });

inherit(Component, EventEmitter);

module.exports = Component;

});
$_mod.def("/marko$4.4.16/src/components/defineComponent", function(require, exports, module, __filename, __dirname) { 'use strict';
/* jshint newcap:false */

var BaseState = require('/marko$4.4.16/src/components/State'/*'./State'*/);
var BaseComponent = require('/marko$4.4.16/src/components/Component'/*'./Component'*/);
var inherit = require('/raptor-util$3.2.0/inherit'/*'raptor-util/inherit'*/);

module.exports = function defineComponent(def, renderer) {
    if (def.___isComponent) {
        return def;
    }

    var ComponentClass = function() {};
    var proto;

    var type = typeof def;

    if (type == 'function') {
        proto = def.prototype;
    } else if (type == 'object') {
        proto = def;
    } else {
        throw TypeError();
    }

    ComponentClass.prototype = proto;

    // We don't use the constructor provided by the user
    // since we don't invoke their constructor until
    // we have had a chance to do our own initialization.
    // Instead, we store their constructor in the "initComponent"
    // property and that method gets called later inside
    // init-components-browser.js
    function Component(id) {
        BaseComponent.call(this, id);
    }

    if (!proto.___isComponent) {
        // Inherit from Component if they didn't already
        inherit(ComponentClass, BaseComponent);
    }

    // The same prototype will be used by our constructor after
    // we he have set up the prototype chain using the inherit function
    proto = Component.prototype = ComponentClass.prototype;

    // proto.constructor = def.constructor = Component;

    // Set a flag on the constructor function to make it clear this is
    // a component so that we can short-circuit this work later
    Component.___isComponent = true;

    function State(component) { BaseState.call(this, component); }
    inherit(State, BaseState);
    proto.___State = State;
    proto.___renderer = renderer;

    return Component;
};

});
$_mod.def("/marko$4.4.16/src/components/registry-browser", function(require, exports, module, __filename, __dirname) { var loadComponent = require('/marko$4.4.16/src/components/loadComponent-dynamic'/*'./loadComponent'*/);
var defineComponent = require('/marko$4.4.16/src/components/defineComponent'/*'./defineComponent'*/);

var registered = {};
var loaded = {};
var componentTypes = {};

function register(typeName, def) {
    // We do this to kick off registering of nested components
    // but we don't use the return value just yet since there
    // is a good chance that it resulted in a circular dependency
    def();

    registered[typeName] = def;
    delete loaded[typeName];
    delete componentTypes[typeName];
    return typeName;
}

function load(typeName) {
    var target = loaded[typeName];
    if (!target) {
        target = registered[typeName];

        if (target) {
            target = target();
        } else {
            target = loadComponent(typeName); // Assume the typeName has been fully resolved already
        }

        if (!target) {
            throw Error('Not found: ' + typeName);
        }

        loaded[typeName] = target;
    }

    return target;
}

function getComponentClass(typeName) {
    var ComponentClass = componentTypes[typeName];

    if (ComponentClass) {
        return ComponentClass;
    }

    ComponentClass = load(typeName);

    ComponentClass = ComponentClass.Component || ComponentClass;

    if (!ComponentClass.___isComponent) {
        ComponentClass = defineComponent(ComponentClass, ComponentClass.renderer);
    }

    // Make the component "type" accessible on each component instance
    ComponentClass.prototype.___type = typeName;

    componentTypes[typeName] = ComponentClass;

    return ComponentClass;
}

function createComponent(typeName, id) {
    var ComponentClass = getComponentClass(typeName);
    return new ComponentClass(id);
}

exports.___register = register;
exports.___createComponent = createComponent;

});
$_mod.def("/marko$4.4.16/src/components/init-components-browser", function(require, exports, module, __filename, __dirname) { 'use strict';
var warp10Finalize = require('/warp10$1.3.4/finalize'/*'warp10/finalize'*/);
var eventDelegation = require('/marko$4.4.16/src/components/event-delegation'/*'./event-delegation'*/);
var win = window;
var defaultDocument = document;
var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var componentLookup = componentsUtil.___componentLookup;
var getElementById = componentsUtil.___getElementById;
var ComponentDef = require('/marko$4.4.16/src/components/ComponentDef'/*'./ComponentDef'*/);
var registry = require('/marko$4.4.16/src/components/registry-browser'/*'./registry'*/);
var serverRenderedGlobals = {};

function invokeComponentEventHandler(component, targetMethodName, args) {
    var method = component[targetMethodName];
    if (!method) {
        throw Error('Method not found: ' + targetMethodName);
    }

    method.apply(component, args);
}

function addEventListenerHelper(el, eventType, listener) {
    el.addEventListener(eventType, listener, false);
    return function remove() {
        el.removeEventListener(eventType, listener);
    };
}

function addDOMEventListeners(component, el, eventType, targetMethodName, extraArgs, handles) {
    var removeListener = addEventListenerHelper(el, eventType, function(event) {
        var args = [event, el];
        if (extraArgs) {
            args = extraArgs.concat(args);
        }

        invokeComponentEventHandler(component, targetMethodName, args);
    });
    handles.push(removeListener);
}

function initComponent(componentDef, doc) {
    var component = componentDef.___component;

    if (!component || !component.___isComponent) {
        return; // legacy
    }

    component.___reset();
    component.___document = doc;

    var isExisting = componentDef.___isExisting;
    var id = component.id;

    var rootIds = componentDef.___roots;

    if (rootIds) {
        var rootComponents;

        var els = [];

        rootIds.forEach(function(rootId) {
            var nestedId = id + '-' + rootId;
            var rootComponent = componentLookup[nestedId];
            if (rootComponent) {
                rootComponent.___rootFor = component;
                if (rootComponents) {
                    rootComponents.push(rootComponent);
                } else {
                    rootComponents = component.___rootComponents = [rootComponent];
                }
            } else {
                var rootEl = getElementById(doc, nestedId);
                if (rootEl) {
                    rootEl._w = component;
                    els.push(rootEl);
                }
            }
        });

        component.el = els[0];
        component.els = els;
        componentLookup[id] = component;
    } else if (!isExisting) {
        var el = getElementById(doc, id);
        el._w = component;
        component.el = el;
        component.els = [el];
        componentLookup[id] = component;
    }

    if (componentDef.___willRerenderInBrowser) {
        component.___rerender(true);
        return;
    }

    if (isExisting) {
        component.___removeDOMEventListeners();
    }

    var domEvents = componentDef.___domEvents;
    if (domEvents) {
        var eventListenerHandles = [];

        domEvents.forEach(function(domEventArgs) {
            // The event mapping is for a direct DOM event (not a custom event and not for bubblign dom events)

            var eventType = domEventArgs[0];
            var targetMethodName = domEventArgs[1];
            var eventEl = getElementById(doc, domEventArgs[2]);
            var extraArgs = domEventArgs[3];

            addDOMEventListeners(component, eventEl, eventType, targetMethodName, extraArgs, eventListenerHandles);
        });

        if (eventListenerHandles.length) {
            component.___domEventListenerHandles = eventListenerHandles;
        }
    }

    if (component.___mounted) {
        component.___emitLifecycleEvent('update');
    } else {
        component.___mounted = true;
        component.___emitLifecycleEvent('mount');
    }
}

/**
 * This method is used to initialized components associated with UI components
 * rendered in the browser. While rendering UI components a "components context"
 * is added to the rendering context to keep up with which components are rendered.
 * When ready, the components can then be initialized by walking the component tree
 * in the components context (nested components are initialized before ancestor components).
 * @param  {Array<marko-components/lib/ComponentDef>} componentDefs An array of ComponentDef instances
 */
function initClientRendered(componentDefs, doc) {
    // Ensure that event handlers to handle delegating events are
    // always attached before initializing any components
    eventDelegation.___init(doc);

    doc = doc || defaultDocument;
    for (var i=0,len=componentDefs.length; i<len; i++) {
        var componentDef = componentDefs[i];

        if (componentDef.___children) {
            initClientRendered(componentDef.___children, doc);
        }

        initComponent(
            componentDef,
            doc);
    }
}

/**
 * This method initializes all components that were rendered on the server by iterating over all
 * of the component IDs.
 */
function initServerRendered(renderedComponents, doc) {
    if (!renderedComponents) {
        renderedComponents = win.$components;

        if (renderedComponents && renderedComponents.forEach) {
            renderedComponents.forEach(function(renderedComponent) {
                initServerRendered(renderedComponent, doc);
            });
        }

        win.$components = {
            concat: initServerRendered
        };

        return;
    }
    // Ensure that event handlers to handle delegating events are
    // always attached before initializing any components
    eventDelegation.___init(doc || defaultDocument);

    renderedComponents = warp10Finalize(renderedComponents);

    var componentDefs = renderedComponents.w;
    var typesArray = renderedComponents.t;
    var globals = window.$MG;
    if (globals) {
        serverRenderedGlobals = warp10Finalize(globals);
        delete window.$MG;
    }

    componentDefs.forEach(function(componentDef) {
        componentDef = ComponentDef.___deserialize(componentDef, typesArray, serverRenderedGlobals, registry);
        initComponent(componentDef, doc || defaultDocument);
    });
}

exports.___initClientRendered = initClientRendered;
exports.___initServerRendered = initServerRendered;

});
$_mod.def("/marko$4.4.16/src/components/boot", function(require, exports, module, __filename, __dirname) { require('/marko$4.4.16/src/components/init-components-browser'/*'./init-components'*/).___initServerRendered();
});
$_mod.run("/marko$4.4.16/src/components/boot");
$_mod.def("/marko$4.4.16/src/components/util-browser", function(require, exports, module, __filename, __dirname) { var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

var markoGlobal = extend(window.$MG, {
  uid: 0
});

window.$MG = markoGlobal;

var runtimeId = markoGlobal.uid++;

var componentLookup = {};

var defaultDocument = document;
var EMPTY_OBJECT = {};

function getComponentForEl(el, doc) {
    if (el) {
        var node = typeof el == 'string' ? (doc || defaultDocument).getElementById(el) : el;
        if (node) {
            var component = node._w;

            while(component) {
                var rootFor = component.___rootFor;
                if (rootFor)  {
                    component = rootFor;
                } else {
                    break;
                }
            }

            return component;
        }
    }
}

var lifecycleEventMethods = {};

[
    'create',
    'render',
    'update',
    'mount',
    'destroy'
].forEach(function(eventName) {
    lifecycleEventMethods[eventName] = 'on' + eventName[0].toUpperCase() + eventName.substring(1);
});

/**
 * This method handles invoking a component's event handler method
 * (if present) while also emitting the event through
 * the standard EventEmitter.prototype.emit method.
 *
 * Special events and their corresponding handler methods
 * include the following:
 *
 * beforeDestroy --> onBeforeDestroy
 * destroy       --> onDestroy
 * beforeUpdate  --> onBeforeUpdate
 * update        --> onUpdate
 * render        --> onRender
 */
function emitLifecycleEvent(component, eventType, eventArg1, eventArg2) {
    var listenerMethod = component[lifecycleEventMethods[eventType]];

    if (listenerMethod !== undefined) {
        listenerMethod.call(component, eventArg1, eventArg2);
    }

    component.emit(eventType, eventArg1, eventArg2);
}

function destroyComponentForEl(el) {
    var componentToDestroy = el._w;
    if (componentToDestroy) {
        componentToDestroy.___destroyShallow();
        el._w = null;

        while ((componentToDestroy = componentToDestroy.___rootFor)) {
            componentToDestroy.___rootFor = null;
            componentToDestroy.___destroyShallow();
        }
    }
}
function destroyElRecursive(el) {
    var curChild = el.firstChild;
    while(curChild) {
        if (curChild.nodeType === 1) {
            destroyComponentForEl(curChild);
            destroyElRecursive(curChild);
        }
        curChild = curChild.nextSibling;
    }
}

function nextComponentId() {
    // Each component will get an ID that is unique across all loaded
    // marko runtimes. This allows multiple instances of marko to be
    // loaded in the same window and they should all place nice
    // together
    return 'b' + ((markoGlobal.uid)++);
}

function nextComponentIdProvider(out) {
    return nextComponentId;
}

function getElementById(doc, id) {
    return doc.getElementById(id);
}

function attachBubblingEvent(componentDef, handlerMethodName, extraArgs) {
    if (handlerMethodName) {
        var id = componentDef.id;
        if (extraArgs) {
            var isRerenderInBrowser = componentDef.___globalComponentsContext.___isRerenderInBrowser;

            if (isRerenderInBrowser === true) {
                // If we are bootstrapping a page rendered on the server
                // we need to put the actual event args on the UI component
                // since we will not actually be updating the DOM
                var component = componentDef.___component;

                var bubblingDomEvents = component.___bubblingDomEvents ||
                    ( component.___bubblingDomEvents = [] );

                bubblingDomEvents.push(extraArgs);

                return;
            } else {
                return [handlerMethodName, id, extraArgs];
            }
        } else {
            return [handlerMethodName, id];
        }
    }
}

function getMarkoPropsFromEl(el) {
    var virtualProps = el._vprops;
    if (virtualProps === undefined) {
        virtualProps = el.getAttribute('data-marko');
        if (virtualProps) {
            virtualProps = JSON.parse(virtualProps);
        }
        el._vprops = virtualProps = virtualProps || EMPTY_OBJECT;
    }

    return virtualProps;
}

exports.___runtimeId = runtimeId;
exports.___componentLookup = componentLookup;
exports.___getComponentForEl = getComponentForEl;
exports.___emitLifecycleEvent = emitLifecycleEvent;
exports.___destroyComponentForEl = destroyComponentForEl;
exports.___destroyElRecursive = destroyElRecursive;
exports.___nextComponentIdProvider = nextComponentIdProvider;
exports.___getElementById = getElementById;
exports.___attachBubblingEvent = attachBubblingEvent;
exports.___getMarkoPropsFromEl = getMarkoPropsFromEl;

});
$_mod.def("/marko$4.4.16/src/runtime/dom-insert", function(require, exports, module, __filename, __dirname) { var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);
var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'../components/util'*/);
var destroyComponentForEl = componentsUtil.___destroyComponentForEl;
var destroyElRecursive = componentsUtil.___destroyElRecursive;

function resolveEl(el) {
    if (typeof el == 'string') {
        var elId = el;
        el = document.getElementById(elId);
        if (!el) {
            throw Error('Not found: ' + elId);
        }
    }
    return el;
}

function beforeRemove(referenceEl) {
    destroyElRecursive(referenceEl);
    destroyComponentForEl(referenceEl);
}

module.exports = function(target, getEl, afterInsert) {
    extend(target, {
        appendTo: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);
            referenceEl.appendChild(el);
            return afterInsert(this, referenceEl);
        },
        prependTo: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);
            referenceEl.insertBefore(el, referenceEl.firstChild || null);
            return afterInsert(this, referenceEl);
        },
        replace: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);
            beforeRemove(referenceEl);
            referenceEl.parentNode.replaceChild(el, referenceEl);
            return afterInsert(this, referenceEl);
        },
        replaceChildrenOf: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);

            var curChild = referenceEl.firstChild;
            while(curChild) {
                var nextSibling = curChild.nextSibling; // Just in case the DOM changes while removing
                if (curChild.nodeType == 1) {
                    beforeRemove(curChild);
                }
                curChild = nextSibling;
            }

            referenceEl.innerHTML = '';
            referenceEl.appendChild(el);
            return afterInsert(this, referenceEl);
        },
        insertBefore: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);
            referenceEl.parentNode.insertBefore(el, referenceEl);
            return afterInsert(this, referenceEl);
        },
        insertAfter: function(referenceEl) {
            referenceEl = resolveEl(referenceEl);
            var el = getEl(this, referenceEl);
            el = el;
            var nextSibling = referenceEl.nextSibling;
            var parentNode = referenceEl.parentNode;
            if (nextSibling) {
                parentNode.insertBefore(el, nextSibling);
            } else {
                parentNode.appendChild(el);
            }
            return afterInsert(this, referenceEl);
        }
    });
};

});
$_mod.def("/marko$4.4.16/src/runtime/RenderResult", function(require, exports, module, __filename, __dirname) { var domInsert = require('/marko$4.4.16/src/runtime/dom-insert'/*'./dom-insert'*/);

function getComponentDefs(result) {
    var componentDefs = result.___components;

    if (!componentDefs) {
        throw Error('No component');
    }
    return componentDefs;
}

function RenderResult(out) {
   this.out = this.___out = out;
   this.___components = undefined;
}

module.exports = RenderResult;

var proto = RenderResult.prototype = {
    getComponent: function() {
        return this.getComponents()[0];
    },
    getComponents: function(selector) {
        if (this.___components === undefined) {
            throw Error('Not added to DOM');
        }

        var componentDefs = getComponentDefs(this);

        var components = [];

        componentDefs.forEach(function(componentDef) {
            var component = componentDef.___component;
            if (!selector || selector(component)) {
                components.push(component);
            }
        });

        return components;
    },

    afterInsert: function(doc) {
        var out = this.___out;
        var globalComponentsContext = out.global.___components;
        if (globalComponentsContext) {
            this.___components = globalComponentsContext.___initComponents(doc);
        } else {
            this.___components = null;
        }

        return this;
    },
    getNode: function(doc) {
        return this.___out.___getNode(doc);
    },
    getOutput: function() {
        return this.___out.___getOutput();
    },
    toString: function() {
        return this.___out.toString();
    },
    document: typeof document != 'undefined' && document
};

// Add all of the following DOM methods to Component.prototype:
// - appendTo(referenceEl)
// - replace(referenceEl)
// - replaceChildrenOf(referenceEl)
// - insertBefore(referenceEl)
// - insertAfter(referenceEl)
// - prependTo(referenceEl)
domInsert(
    proto,
    function getEl(renderResult, referenceEl) {
        return renderResult.getNode(referenceEl.ownerDocument);
    },
    function afterInsert(renderResult, referenceEl) {
        return renderResult.afterInsert(referenceEl.ownerDocument);
    });

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/AsyncVDOMBuilder", function(require, exports, module, __filename, __dirname) { var EventEmitter = require('/events-light$1.0.5/src/index'/*'events-light'*/);
var vdom = require('/marko$4.4.16/src/runtime/vdom/vdom'/*'./vdom'*/);
var VElement = vdom.___VElement;
var VDocumentFragment = vdom.___VDocumentFragment;
var VComment = vdom.___VComment;
var VText = vdom.___VText;
var virtualizeHTML = vdom.___virtualizeHTML;
var RenderResult = require('/marko$4.4.16/src/runtime/RenderResult'/*'../RenderResult'*/);
var defaultDocument = vdom.___defaultDocument;

var FLAG_FINISHED = 1;
var FLAG_LAST_FIRED = 2;

var EVENT_UPDATE = 'update';
var EVENT_FINISH = 'finish';

function State(tree) {
    this.___remaining = 1;
    this.___events = new EventEmitter();
    this.___tree = tree;
    this.___last = null;
    this.___lastCount = 0;
    this.___flags = 0;
}

function AsyncVDOMBuilder(globalData, parentNode, state) {
    if (!parentNode) {
        parentNode = new VDocumentFragment();
    }

    if (state) {
        state.___remaining++;
    } else {
        state = new State(parentNode);
    }

    this.data = {};
    this.___state = state;
    this.___parent = parentNode;
    this.global = globalData || {};
    this.___stack = [parentNode];
    this.___sync = false;
    this.___vnode = undefined;
    this.___componentArgs = null; // Component args
}

var proto = AsyncVDOMBuilder.prototype = {
    ___isOut: true,
    ___document: defaultDocument,

    ___elementNode: function(element, childCount, pushToStack) {
        var parent = this.___parent;
        if (parent !== undefined) {
            parent.___appendChild(element);
            if (pushToStack === true) {
                this.___stack.push(element);
                this.___parent = element;
            }
        }
        return childCount === 0 ? this : element;
    },

    element: function(tagName, attrs, childCount, flags, props) {
        var element = new VElement(tagName, attrs, childCount, flags, props);
        return this.___elementNode(element, childCount);
    },

    ___elementDynamicTag: function(tagName, attrs, childCount, flags, props) {
        var element = VElement.___createElementDynamicTag(tagName, attrs, childCount, flags, props);
        return this.___elementNode(element, childCount);
    },

    n: function(node) {
        // NOTE: We do a shallow clone since we assume the node is being reused
        //       and a node can only have one parent node.
        return this.node(node.___cloneNode());
    },

    node: function(node) {
        var parent = this.___parent;
        if (parent !== undefined) {
            parent.___appendChild(node);
        }
        return this;
    },

    text: function(text) {
        var type = typeof text;

        if (type != 'string') {
            if (text == null) {
                return;
            } else if (type === 'object') {
                if (text.toHTML) {
                    return this.h(text.toHTML());
                }
            }

            text = text.toString();
        }

        var parent = this.___parent;
        if (parent !== undefined) {
            var lastChild = parent.lastChild;
            if (lastChild && lastChild.___Text) {
                lastChild.___nodeValue += text;
            } else {
                parent.___appendChild(new VText(text));
            }
        }
        return this;
    },

    comment: function(comment) {
        return this.node(new VComment(comment));
    },

    html: function(html) {
        if (html != null) {
            var vdomNode = virtualizeHTML(html, this.___document || document);
            this.node(vdomNode);
        }

        return this;
    },

    beginElement: function(tagName, attrs, childCount, flags, props) {
        var element = new VElement(tagName, attrs, childCount, flags, props);
        this.___elementNode(element, childCount, true);
        return this;
    },

    ___beginElementDynamicTag: function(tagName, attrs, childCount, flags, props) {
        var element = VElement.___createElementDynamicTag(tagName, attrs, childCount, flags, props);
        this.___elementNode(element, childCount, true);
        return this;
    },

    endElement: function() {
        var stack = this.___stack;
        stack.pop();
        this.___parent = stack[stack.length-1];
    },

    end: function() {
        var state = this.___state;

        this.___parent = undefined;

        var remaining = --state.___remaining;

        if (!(state.___flags & FLAG_LAST_FIRED) && (remaining - state.___lastCount === 0)) {
            state.___flags |= FLAG_LAST_FIRED;
            state.___lastCount = 0;
            state.___events.emit('last');
        }

        if (remaining === 0) {
            state.___flags |= FLAG_FINISHED;
            state.___events.emit(EVENT_FINISH, this.___getResult());
        }

        return this;
    },

    error: function(e) {
        try {
            this.emit('error', e);
        } finally {
            // If there is no listener for the error event then it will
            // throw a new Error here. In order to ensure that the async fragment
            // is still properly ended we need to put the end() in a `finally`
            // block
            this.end();
        }

        return this;
    },

    beginAsync: function(options) {
        if (this.___sync) {
            throw Error('Not allowed');
        }

        var state = this.___state;

        if (options) {
            if (options.last) {
                state.___lastCount++;
            }
        }

        var documentFragment = this.___parent.___appendDocumentFragment();
        var asyncOut = new AsyncVDOMBuilder(this.global, documentFragment, state);

        state.___events.emit('beginAsync', {
           out: asyncOut,
           parentOut: this
       });

       return asyncOut;
    },

    createOut: function(callback) {
        return new AsyncVDOMBuilder(this.global);
    },

    flush: function() {
        var events = this.___state.___events;

        if (events.listenerCount(EVENT_UPDATE)) {
            events.emit(EVENT_UPDATE, new RenderResult(this));
        }
    },

    ___getOutput: function() {
        return this.___state.___tree;
    },

    ___getResult: function() {
        return this.___result || (this.___result = new RenderResult(this));
    },

    on: function(event, callback) {
        var state = this.___state;

        if (event === EVENT_FINISH && (state.___flags & FLAG_FINISHED)) {
            callback(this.___getResult());
        } else {
            state.___events.on(event, callback);
        }

        return this;
    },

    once: function(event, callback) {
        var state = this.___state;

        if (event === EVENT_FINISH && (state.___flags & FLAG_FINISHED)) {
            callback(this.___getResult());
            return this;
        }

        state.___events.once(event, callback);
        return this;
    },

    emit: function(type, arg) {
        var events = this.___state.___events;
        switch(arguments.length) {
            case 1:
                events.emit(type);
                break;
            case 2:
                events.emit(type, arg);
                break;
            default:
                events.emit.apply(events, arguments);
                break;
        }
        return this;
    },

    removeListener: function() {
        var events = this.___state.___events;
        events.removeListener.apply(events, arguments);
        return this;
    },

    sync: function() {
        this.___sync = true;
    },

    isSync: function() {
        return this.___sync;
    },

    onLast: function(callback) {
        var state = this.___state;

        var lastArray = state.___last;

        if (!lastArray) {
            lastArray = state.___last = [];
            var i = 0;
            var next = function() {
                if (i === lastArray.length) {
                    return;
                }
                var _next = lastArray[i++];
                _next(next);
            };

            this.once('last', function() {
                next();
            });
        }

        lastArray.push(callback);
        return this;
    },

    ___getNode: function(doc) {
        var node = this.___vnode;
        if (!node) {
            var vdomTree = this.___getOutput();

            node = this.___vnode = vdomTree.actualize(doc || this.___document || document);
        }
        return node;
    },

    toString: function() {
        var docFragment = this.___getNode();
        var html = '';

        if (docFragment.hasChildNodes()) {
            var children = docFragment.childNodes;
            for (var i = 0; i < children.length; i++) {
                var child = children[i];
                // get outerHTML if exists, otherwise default to nodeValue
                html += child.outerHTML || child.nodeValue;
            }
        }

        return html;
    },

    then: function(fn, fnErr) {
        var out = this;
        var promise = new Promise(function(resolve, reject) {
            out.on('error', reject)
                .on(EVENT_FINISH, function(result) {
                    resolve(result);
                });
        });

        return Promise.resolve(promise).then(fn, fnErr);
    },

    catch: function(fnErr) {
        return this.then(undefined, fnErr);
    },

    isVDOM: true,

    c: function(componentArgs) {
        this.___componentArgs = componentArgs;
    }
};

proto.e = proto.element;
proto.ed = proto.___elementDynamicTag;
proto.be = proto.beginElement;
proto.bed = proto.___beginElementDynamicTag;
proto.ee = proto.endElement;
proto.t = proto.text;
proto.h = proto.w = proto.write = proto.html;

module.exports = AsyncVDOMBuilder;

});
$_mod.def("/marko$4.4.16/src/runtime/renderable", function(require, exports, module, __filename, __dirname) { var defaultCreateOut = require('/marko$4.4.16/src/runtime/createOut'/*'./createOut'*/);
var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

function safeRender(renderFunc, finalData, finalOut, shouldEnd) {
    try {
        renderFunc(finalData, finalOut);

        if (shouldEnd) {
            finalOut.end();
        }
    } catch(err) {
        var actualEnd = finalOut.end;
        finalOut.end = function() {};

        setTimeout(function() {
            finalOut.end = actualEnd;
            finalOut.error(err);
        }, 0);
    }
    return finalOut;
}

module.exports = function(target, renderer) {
    var renderFunc = renderer && (renderer.renderer || renderer.render || renderer);
    var createOut = target.createOut || renderer.createOut || defaultCreateOut;

    return extend(target, {
        createOut: createOut,

        renderToString: function(data, callback) {
            var localData = data || {};
            var render = renderFunc || this._;
            var globalData = localData.$global;
            var out = createOut(globalData);

            out.global.template = this;

            if (globalData) {
                localData.$global = undefined;
            }

            if (callback) {
                out.on('finish', function() {
                       callback(null, out.toString(), out);
                   })
                   .once('error', callback);

                return safeRender(render, localData, out, true);
            } else {
                out.sync();
                render(localData, out);
                return out.toString();
            }
        },

        renderSync: function(data) {
            var localData = data || {};
            var render = renderFunc || this._;
            var globalData = localData.$global;
            var out = createOut(globalData);
            out.sync();

            out.global.template = this;

            if (globalData) {
                localData.$global = undefined;
            }

            render(localData, out);
            return out.___getResult();
        },

        /**
         * Renders a template to either a stream (if the last
         * argument is a Stream instance) or
         * provides the output to a callback function (if the last
         * argument is a Function).
         *
         * Supported signatures:
         *
         * render(data)
         * render(data, out)
         * render(data, stream)
         * render(data, callback)
         *
         * @param  {Object} data The view model data for the template
         * @param  {AsyncStream/AsyncVDOMBuilder} out A Stream, an AsyncStream/AsyncVDOMBuilder instance, or a callback function
         * @return {AsyncStream/AsyncVDOMBuilder} Returns the AsyncStream/AsyncVDOMBuilder instance that the template is rendered to
         */
        render: function(data, out) {
            var callback;
            var finalOut;
            var finalData;
            var globalData;
            var render = renderFunc || this._;
            var shouldBuffer = this.___shouldBuffer;
            var shouldEnd = true;

            if (data) {
                finalData = data;
                if ((globalData = data.$global)) {
                    finalData.$global = undefined;
                }
            } else {
                finalData = {};
            }

            if (out && out.___isOut) {
                finalOut = out;
                shouldEnd = false;
                extend(out.global, globalData);
            } else if (typeof out == 'function') {
                finalOut = createOut(globalData);
                callback = out;
            } else {
                finalOut = createOut(
                    globalData, // global
                    out, // writer(AsyncStream) or parentNode(AsyncVDOMBuilder)
                    null, // state
                    shouldBuffer // ignored by AsyncVDOMBuilder
                );
            }

            if (callback) {
                finalOut
                    .on('finish', function() {
                        callback(null, finalOut.___getResult());
                    })
                    .once('error', callback);
            }

            globalData = finalOut.global;

            globalData.template = globalData.template || this;

            return safeRender(render, finalData, finalOut, shouldEnd);
        }
    });
};

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/index", function(require, exports, module, __filename, __dirname) { 'use strict';
require('/marko$4.4.16/src/index-browser'/*'../../'*/);

// helpers provide a core set of various utility methods
// that are available in every template
var AsyncVDOMBuilder = require('/marko$4.4.16/src/runtime/vdom/AsyncVDOMBuilder'/*'./AsyncVDOMBuilder'*/);
var makeRenderable = require('/marko$4.4.16/src/runtime/renderable'/*'../renderable'*/);

/**
 * Method is for internal usage only. This method
 * is invoked by code in a compiled Marko template and
 * it is used to create a new Template instance.
 * @private
 */
exports.t = function createTemplate(path) {
     return new Template(path);
};

function Template(path, func) {
    this.path = path;
    this._ = func;
    this.meta = undefined;
}

function createOut(globalData, parent, state) {
    return new AsyncVDOMBuilder(globalData, parent, state);
}

var Template_prototype = Template.prototype = {
    createOut: createOut
};

makeRenderable(Template_prototype);

exports.Template = Template;
exports.___createOut = createOut;

require('/marko$4.4.16/src/runtime/createOut'/*'../createOut'*/).___setCreateOut(createOut);

});
$_mod.def("/marko$4.4.16/src/vdom", function(require, exports, module, __filename, __dirname) { module.exports = require('/marko$4.4.16/src/runtime/vdom/index'/*'./runtime/vdom'*/);

});
$_mod.def("/icoparse$1.0.0/src/components/config/routes/config-route-loading/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t();

function render(input, out) {
  var data = input;

  out.t("loading...");
}

marko_template._ = render;

});
$_mod.remap("/marko$4.4.16/src/components/helpers", "/marko$4.4.16/src/components/helpers-browser");
$_mod.main("/marko$4.4.16/src/components", "");
$_mod.remap("/marko$4.4.16/src/components/index", "/marko$4.4.16/src/components/index-browser");
$_mod.def("/marko$4.4.16/src/components/index-browser", function(require, exports, module, __filename, __dirname) { var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var initComponents = require('/marko$4.4.16/src/components/init-components-browser'/*'./init-components'*/);

require('/marko$4.4.16/src/components/ComponentsContext'/*'./ComponentsContext'*/).___initClientRendered = initComponents.___initClientRendered;

exports.getComponentForEl = componentsUtil.___getComponentForEl;
exports.init = initComponents.___initServerRendered;

});
$_mod.def("/marko$4.4.16/src/components/renderer", function(require, exports, module, __filename, __dirname) { var componentsUtil = require('/marko$4.4.16/src/components/util-browser'/*'./util'*/);
var componentLookup = componentsUtil.___componentLookup;
var emitLifecycleEvent = componentsUtil.___emitLifecycleEvent;

var ComponentsContext = require('/marko$4.4.16/src/components/ComponentsContext'/*'./ComponentsContext'*/);
var getComponentsContext = ComponentsContext.___getComponentsContext;
var repeatedRegExp = /\[\]$/;
var registry = require('/marko$4.4.16/src/components/registry-browser'/*'./registry'*/);
var copyProps = require('/raptor-util$3.2.0/copyProps'/*'raptor-util/copyProps'*/);
var isServer = componentsUtil.___isServer === true;

var COMPONENT_BEGIN_ASYNC_ADDED_KEY = '$wa';

function resolveComponentKey(globalComponentsContext, key, scope) {
    if (key[0] == '#') {
        return key.substring(1);
    } else {
        var resolvedId;

        if (repeatedRegExp.test(key)) {
            resolvedId = globalComponentsContext.___nextRepeatedId(scope, key);
        } else {
            resolvedId = scope + '-' + key;
        }

        return resolvedId;
    }
}

function preserveComponentEls(existingComponent, out, globalComponentsContext) {
    var rootEls = existingComponent.___getRootEls({});

    for (var elId in rootEls) {
        var el = rootEls[elId];

        // We put a placeholder element in the output stream to ensure that the existing
        // DOM node is matched up correctly when using morphdom.
        out.element(el.tagName, { id: elId });

        globalComponentsContext.___preserveDOMNode(elId); // Mark the element as being preserved (for morphdom)
    }

    existingComponent.___reset(); // The component is no longer dirty so reset internal flags
    return true;
}

function handleBeginAsync(event) {
    var parentOut = event.parentOut;
    var asyncOut = event.out;
    var componentsContext = parentOut.data.___components;

    if (componentsContext !== undefined) {
        // All of the components in this async block should be
        // initialized after the components in the parent. Therefore,
        // we will create a new ComponentsContext for the nested
        // async block and will create a new component stack where the current
        // component in the parent block is the only component in the nested
        // stack (to begin with). This will result in top-level components
        // of the async block being added as children of the component in the
        // parent block.
        var nestedComponentsContext = componentsContext.___createNestedComponentsContext(asyncOut);
        asyncOut.data.___components = nestedComponentsContext;
    }
    // Carry along the component arguments
    asyncOut.___componentArgs = parentOut.___componentArgs;
}

function createRendererFunc(templateRenderFunc, componentProps, renderingLogic) {
    renderingLogic = renderingLogic || {};
    var onInput = renderingLogic.onInput;
    var typeName = componentProps.type;
    var roots = componentProps.roots;
    var assignedId = componentProps.id;
    var isSplit = componentProps.split === true;
    var shouldApplySplitMixins = isSplit;

    return function renderer(input, out) {
        var outGlobal = out.global;

        if (out.isSync() === false) {
            if (!outGlobal[COMPONENT_BEGIN_ASYNC_ADDED_KEY]) {
                outGlobal[COMPONENT_BEGIN_ASYNC_ADDED_KEY] = true;
                out.on('beginAsync', handleBeginAsync);
            }
        }

        var componentsContext = getComponentsContext(out);
        var globalComponentsContext = componentsContext.___globalContext;

        var component = globalComponentsContext.___rerenderComponent;
        var isRerender = component !== undefined;
        var id = assignedId;
        var isExisting;
        var customEvents;
        var scope;

        if (component) {
            id = component.id;
            isExisting = true;
            globalComponentsContext.___rerenderComponent = null;
        } else {
            var componentArgs = out.___componentArgs;

            if (componentArgs) {
                out.___componentArgs = null;

                scope = componentArgs[0];

                if (scope) {
                    scope = scope.id;
                }

                var key = componentArgs[1];
                if (key != null) {
                    key = key.toString();
                }
                id = id || resolveComponentKey(globalComponentsContext, key, scope);
                customEvents = componentArgs[2];
            }
        }

        id = id || componentsContext.___nextComponentId();

        if (isServer) {
            component = registry.___createComponent(
                renderingLogic,
                id,
                input,
                out,
                typeName,
                customEvents,
                scope);
            input = component.___updatedInput;
            component.___updatedInput = undefined; // We don't want ___updatedInput to be serialized to the browser
        } else {
            if (!component) {
                if (isRerender) {
                    // Look in in the DOM to see if a component with the same ID and type already exists.
                    component = componentLookup[id];
                    if (component && component.___type !== typeName) {
                        component = undefined;
                    }
                }

                if (component) {
                    isExisting = true;
                } else {
                    isExisting = false;
                    // We need to create a new instance of the component
                    component = registry.___createComponent(typeName, id);

                    if (shouldApplySplitMixins === true) {
                        shouldApplySplitMixins = false;

                        var renderingLogicProps = typeof renderingLogic == 'function' ?
                            renderingLogic.prototype :
                            renderingLogic;

                        copyProps(renderingLogicProps, component.constructor.prototype);
                    }
                }

                // Set this flag to prevent the component from being queued for update
                // based on the new input. The component is about to be rerendered
                // so we don't want to queue it up as a result of calling `setInput()`
                component.___updateQueued = true;

                if (customEvents !== undefined) {
                    component.___setCustomEvents(customEvents, scope);
                }


                if (isExisting === false) {
                    emitLifecycleEvent(component, 'create', input, out);
                }

                input = component.___setInput(input, onInput, out);

                if (isExisting === true) {
                    if (component.___isDirty === false || component.shouldUpdate(input, component.___state) === false) {
                        preserveComponentEls(component, out, globalComponentsContext);
                        return;
                    }
                }
            }

            component.___global = outGlobal;

            emitLifecycleEvent(component, 'render', out);
        }

        var componentDef = componentsContext.___beginComponent(component, isSplit);
        componentDef.___roots = roots;
        componentDef.___isExisting = isExisting;

        // Render the template associated with the component using the final template
        // data that we constructed
        templateRenderFunc(input, out, componentDef, component, component.___rawState);

        componentDef.___end();
    };
}

module.exports = createRendererFunc;

// exports used by the legacy renderer
createRendererFunc.___resolveComponentKey = resolveComponentKey;
createRendererFunc.___preserveComponentEls = preserveComponentEls;
createRendererFunc.___handleBeginAsync = handleBeginAsync;

});
$_mod.def("/marko$4.4.16/src/components/helpers-browser", function(require, exports, module, __filename, __dirname) { require('/marko$4.4.16/src/components/index-browser'/*'./'*/);

exports.c = require('/marko$4.4.16/src/components/defineComponent'/*'./defineComponent'*/); // Referenced by compiled templates
exports.r = require('/marko$4.4.16/src/components/renderer'/*'./renderer'*/); // Referenced by compiled templates
exports.rc = require('/marko$4.4.16/src/components/registry-browser'/*'./registry'*/).___register;  // Referenced by compiled templates

});
$_mod.installed("icoparse$1.0.0", "humane-js", "3.2.2");
$_mod.main("/humane-js$3.2.2", "humane");
$_mod.def("/humane-js$3.2.2/humane", function(require, exports, module, __filename, __dirname) { /**
 * humane.js
 * Humanized Messages for Notifications
 * @author Marc Harter (@wavded)
 * @example
 *   humane.log('hello world');
 * @license MIT
 * See more usage examples at: http://wavded.github.com/humane-js/
 */

;!function (name, context, definition) {
   if (typeof module !== 'undefined') module.exports = definition(name, context)
   else if (typeof define === 'function' && typeof define.amd  === 'object') define(definition)
   else context[name] = definition(name, context)
}('humane', this, function (name, context) {
   var win = window
   var doc = document

   var ENV = {
      on: function (el, type, cb) {
         'addEventListener' in win ? el.addEventListener(type,cb,false) : el.attachEvent('on'+type,cb)
      },
      off: function (el, type, cb) {
         'removeEventListener' in win ? el.removeEventListener(type,cb,false) : el.detachEvent('on'+type,cb)
      },
      bind: function (fn, ctx) {
         return function () { fn.apply(ctx,arguments) }
      },
      isArray: Array.isArray || function (obj) { return Object.prototype.toString.call(obj) === '[object Array]' },
      config: function (preferred, fallback) {
         return preferred != null ? preferred : fallback
      },
      transSupport: false,
      useFilter: /msie [678]/i.test(navigator.userAgent), // sniff, sniff
      _checkTransition: function () {
         var el = doc.createElement('div')
         var vendors = { webkit: 'webkit', Moz: '', O: 'o', ms: 'MS' }

         for (var vendor in vendors)
            if (vendor + 'Transition' in el.style) {
               this.vendorPrefix = vendors[vendor]
               this.transSupport = true
            }
      }
   }
   ENV._checkTransition()

   var Humane = function (o) {
      o || (o = {})
      this.queue = []
      this.baseCls = o.baseCls || 'humane'
      this.addnCls = o.addnCls || ''
      this.timeout = 'timeout' in o ? o.timeout : 2500
      this.waitForMove = o.waitForMove || false
      this.clickToClose = o.clickToClose || false
      this.timeoutAfterMove = o.timeoutAfterMove || false
      this.container = o.container

      try { this._setupEl() } // attempt to setup elements
      catch (e) {
        ENV.on(win,'load',ENV.bind(this._setupEl, this)) // dom wasn't ready, wait till ready
      }
   }

   Humane.prototype = {
      constructor: Humane,
      _setupEl: function () {
         var el = doc.createElement('div')
         el.style.display = 'none'
         if (!this.container){
           if(doc.body) this.container = doc.body;
           else throw 'document.body is null'
         }
         this.container.appendChild(el)
         this.el = el
         this.removeEvent = ENV.bind(function(){
            var timeoutAfterMove = ENV.config(this.currentMsg.timeoutAfterMove,this.timeoutAfterMove)
            if (!timeoutAfterMove){
               this.remove()
            } else {
               setTimeout(ENV.bind(this.remove,this),timeoutAfterMove)
            }
         },this)

         this.transEvent = ENV.bind(this._afterAnimation,this)
         this._run()
      },
      _afterTimeout: function () {
         if (!ENV.config(this.currentMsg.waitForMove,this.waitForMove)) this.remove()

         else if (!this.removeEventsSet) {
            ENV.on(doc.body,'mousemove',this.removeEvent)
            ENV.on(doc.body,'click',this.removeEvent)
            ENV.on(doc.body,'keypress',this.removeEvent)
            ENV.on(doc.body,'touchstart',this.removeEvent)
            this.removeEventsSet = true
         }
      },
      _run: function () {
         if (this._animating || !this.queue.length || !this.el) return

         this._animating = true
         if (this.currentTimer) {
            clearTimeout(this.currentTimer)
            this.currentTimer = null
         }

         var msg = this.queue.shift()
         var clickToClose = ENV.config(msg.clickToClose,this.clickToClose)

         if (clickToClose) {
            ENV.on(this.el,'click',this.removeEvent)
            ENV.on(this.el,'touchstart',this.removeEvent)
         }

         var timeout = ENV.config(msg.timeout,this.timeout)

         if (timeout > 0)
            this.currentTimer = setTimeout(ENV.bind(this._afterTimeout,this), timeout)

         if (ENV.isArray(msg.html)) msg.html = '<ul><li>'+msg.html.join('<li>')+'</ul>'

         this.el.innerHTML = msg.html
         this.currentMsg = msg
         this.el.className = this.baseCls
         if (ENV.transSupport) {
            this.el.style.display = 'block'
            setTimeout(ENV.bind(this._showMsg,this),50)
         } else {
            this._showMsg()
         }

      },
      _setOpacity: function (opacity) {
         if (ENV.useFilter){
            try{
               this.el.filters.item('DXImageTransform.Microsoft.Alpha').Opacity = opacity*100
            } catch(err){}
         } else {
            this.el.style.opacity = String(opacity)
         }
      },
      _showMsg: function () {
         var addnCls = ENV.config(this.currentMsg.addnCls,this.addnCls)
         if (ENV.transSupport) {
            this.el.className = this.baseCls+' '+addnCls+' '+this.baseCls+'-animate'
         }
         else {
            var opacity = 0
            this.el.className = this.baseCls+' '+addnCls+' '+this.baseCls+'-js-animate'
            this._setOpacity(0) // reset value so hover states work
            this.el.style.display = 'block'

            var self = this
            var interval = setInterval(function(){
               if (opacity < 1) {
                  opacity += 0.1
                  if (opacity > 1) opacity = 1
                  self._setOpacity(opacity)
               }
               else clearInterval(interval)
            }, 30)
         }
      },
      _hideMsg: function () {
         var addnCls = ENV.config(this.currentMsg.addnCls,this.addnCls)
         if (ENV.transSupport) {
            this.el.className = this.baseCls+' '+addnCls
            ENV.on(this.el,ENV.vendorPrefix ? ENV.vendorPrefix+'TransitionEnd' : 'transitionend',this.transEvent)
         }
         else {
            var opacity = 1
            var self = this
            var interval = setInterval(function(){
               if(opacity > 0) {
                  opacity -= 0.1
                  if (opacity < 0) opacity = 0
                  self._setOpacity(opacity);
               }
               else {
                  self.el.className = self.baseCls+' '+addnCls
                  clearInterval(interval)
                  self._afterAnimation()
               }
            }, 30)
         }
      },
      _afterAnimation: function () {
         if (ENV.transSupport) ENV.off(this.el,ENV.vendorPrefix ? ENV.vendorPrefix+'TransitionEnd' : 'transitionend',this.transEvent)

         if (this.currentMsg.cb) this.currentMsg.cb()
         this.el.style.display = 'none'

         this._animating = false
         this._run()
      },
      remove: function (e) {
         var cb = typeof e == 'function' ? e : null

         ENV.off(doc.body,'mousemove',this.removeEvent)
         ENV.off(doc.body,'click',this.removeEvent)
         ENV.off(doc.body,'keypress',this.removeEvent)
         ENV.off(doc.body,'touchstart',this.removeEvent)
         ENV.off(this.el,'click',this.removeEvent)
         ENV.off(this.el,'touchstart',this.removeEvent)
         this.removeEventsSet = false

         if (cb && this.currentMsg) this.currentMsg.cb = cb
         if (this._animating) this._hideMsg()
         else if (cb) cb()
      },
      log: function (html, o, cb, defaults) {
         var msg = {}
         if (defaults)
           for (var opt in defaults)
               msg[opt] = defaults[opt]

         if (typeof o == 'function') cb = o
         else if (o)
            for (var opt in o) msg[opt] = o[opt]

         msg.html = html
         if (cb) msg.cb = cb
         this.queue.push(msg)
         this._run()
         return this
      },
      spawn: function (defaults) {
         var self = this
         return function (html, o, cb) {
            self.log.call(self,html,o,cb,defaults)
            return self
         }
      },
      create: function (o) { return new Humane(o) }
   }
   return new Humane()
});

});
$_mod.def("/marko$4.4.16/src/runtime/helpers", function(require, exports, module, __filename, __dirname) { 'use strict';
var isArray = Array.isArray;

function isFunction(arg) {
    return typeof arg == 'function';
}

function classList(arg, classNames) {
    var len;

    if (arg) {
        if (typeof arg == 'string') {
            if (arg) {
                classNames.push(arg);
            }
        } else if (typeof (len = arg.length) == 'number') {
            for (var i=0; i<len; i++) {
                classList(arg[i], classNames);
            }
        } else if (typeof arg == 'object') {
            for (var name in arg) {
                if (arg.hasOwnProperty(name)) {
                    var value = arg[name];
                    if (value) {
                        classNames.push(name);
                    }
                }
            }
        }
    }
}

function createDeferredRenderer(handler) {
    function deferredRenderer(input, out) {
        deferredRenderer.renderer(input, out);
    }

    // This is the initial function that will do the rendering. We replace
    // the renderer with the actual renderer func on the first render
    deferredRenderer.renderer = function(input, out) {
        var rendererFunc = handler.renderer || handler._ || handler.render;
        if (!isFunction(rendererFunc)) {
            throw Error('Invalid renderer');
        }
        // Use the actual renderer from now on
        deferredRenderer.renderer = rendererFunc;
        rendererFunc(input, out);
    };

    return deferredRenderer;
}

function resolveRenderer(handler) {
    var renderer = handler.renderer || handler._;

    if (renderer) {
        return renderer;
    }

    if (isFunction(handler)) {
        return handler;
    }

    // If the user code has a circular function then the renderer function
    // may not be available on the module. Since we can't get a reference
    // to the actual renderer(input, out) function right now we lazily
    // try to get access to it later.
    return createDeferredRenderer(handler);
}

var helpers = {
    /**
     * Internal helper method to prevent null/undefined from being written out
     * when writing text that resolves to null/undefined
     * @private
     */
    s: function strHelper(str) {
        return (str == null) ? '' : str.toString();
    },

    /**
     * Internal helper method to handle loops without a status variable
     * @private
     */
    f: function forEachHelper(array, callback) {
        if (isArray(array)) {
            for (var i=0; i<array.length; i++) {
                callback(array[i]);
            }
        } else if (isFunction(array)) {
            // Also allow the first argument to be a custom iterator function
            array(callback);
        }
    },

    /**
     * Helper to load a custom tag
     */
    t: function loadTagHelper(renderer, targetProperty, isRepeated) {
        if (renderer) {
            renderer = resolveRenderer(renderer);
        }

        return renderer;
    },

    /**
     * classList(a, b, c, ...)
     * Joines a list of class names with spaces. Empty class names are omitted.
     *
     * classList('a', undefined, 'b') --> 'a b'
     *
     */
    cl: function classListHelper() {
        var classNames = [];
        classList(arguments, classNames);
        return classNames.join(' ');
    }
};

module.exports = helpers;

});
$_mod.def("/marko$4.4.16/src/runtime/vdom/helpers", function(require, exports, module, __filename, __dirname) { 'use strict';

var vdom = require('/marko$4.4.16/src/runtime/vdom/vdom'/*'./vdom'*/);
var VElement = vdom.___VElement;
var VText = vdom.___VText;

var commonHelpers = require('/marko$4.4.16/src/runtime/helpers'/*'../helpers'*/);
var extend = require('/raptor-util$3.2.0/extend'/*'raptor-util/extend'*/);

var classList = commonHelpers.cl;

var helpers = extend({
    e: function(tagName, attrs, childCount, flags, props) {
        return new VElement(tagName, attrs, childCount, flags, props);
    },

    t: function(value) {
        return new VText(value);
    },

    const: function(id) {
        var i=0;
        return function() {
            return id + (i++);
        };
    },

    /**
     * Internal helper method to handle the "class" attribute. The value can either
     * be a string, an array or an object. For example:
     *
     * ca('foo bar') ==> ' class="foo bar"'
     * ca({foo: true, bar: false, baz: true}) ==> ' class="foo baz"'
     * ca(['foo', 'bar']) ==> ' class="foo bar"'
     */
    ca: function(classNames) {
        if (!classNames) {
            return null;
        }

        if (typeof classNames === 'string') {
            return classNames;
        } else {
            return classList(classNames);
        }
    }
}, commonHelpers);

module.exports = helpers;

});
$_mod.def("/icoparse$1.0.0/src/components/config/routes/config-route-general/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    marko_component = {
        onCreate: function() {
          this.state = {
              general: JSON.parse(localStorage.getItem("general")),
              header: JSON.parse(localStorage.getItem("header"))
            };
        },
        onSubmit: function(ev, el) {
          ev.preventDefault();

          this.setState({
              general: {
                  name: el.name.value,
                  wsrelay: el.wsrelay.value
                },
              header: {
                  time: el.time.checked,
                  highlight: el.highlight.checked,
                  target: el.target.checked,
                  stats: el.stats.value,
                  strongest: el.strongest.value,
                  deaths: el.deaths.checked
                }
            });

          localStorage.setItem("general", JSON.stringify(this.state.general));

          localStorage.setItem("header", JSON.stringify(this.state.header));

          humane.log("Settings saved!");
        }
      },
    components_helpers = require('/marko$4.4.16/src/components/helpers-browser'/*"marko/src/components/helpers"*/),
    marko_registerComponent = components_helpers.rc,
    marko_componentType = marko_registerComponent("/icoparse$1.0.0/src/components/config/routes/config-route-general/index.marko", function() {
      return module.exports;
    }),
    marko_renderer = components_helpers.r,
    marko_defineComponent = components_helpers.c,
    humane = require('/humane-js$3.2.2/humane'/*"humane-js"*/),
    marko_attrs0 = {
        "class": "form"
      },
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_createElement = marko_helpers.e,
    marko_const = marko_helpers.const,
    marko_const_nextId = marko_const("1ebd10"),
    marko_node0 = marko_createElement("DIV", {
        "class": "title"
      }, 2, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", {
          "class": "ion-gear-b"
        }, 0)
      .t(" General"),
    marko_node1 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Miscellaneous"),
    marko_attrs1 = {
        "class": "pure-control-group"
      },
    marko_attrs2 = {
        "class": "pure-control-group"
      },
    marko_node2 = marko_createElement("LABEL", {
        "for": "wsrelay"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Websocket Relay"),
    marko_attrs3 = {
        "class": "pure-form-message-inline"
      },
    marko_node3 = marko_createElement("A", {
        href: "https://www.npmjs.com/package/wsrelay",
        target: "_BLANK"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("wsrelay"),
    marko_node4 = marko_createElement("BR", null, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node5 = marko_createElement("DIV", {
        "class": "btnbar"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .e("BUTTON", {
          type: "submit"
        }, 1)
        .t("Save"),
    marko_node6 = marko_createElement("LABEL", {
        "for": "customName"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Your ACT Name"),
    marko_node7 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Header"),
    marko_attrs4 = {
        "class": "pure-control-group"
      },
    marko_attrs5 = {
        "class": "pure-control-group"
      },
    marko_attrs6 = {
        "class": "pure-control-group"
      },
    marko_attrs7 = {
        "class": "pure-control-group"
      },
    marko_attrs8 = {
        "class": "pure-control-group"
      },
    marko_attrs9 = {
        "class": "pure-control-group"
      },
    marko_node8 = marko_createElement("LABEL", {
        "for": "time"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Show running time"),
    marko_node9 = marko_createElement("LABEL", {
        "for": "highlight"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Highlight fight"),
    marko_node10 = marko_createElement("SPAN", {
        "class": "pure-form-message-inline"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Changes the color of the running time, if in an active encounter"),
    marko_node11 = marko_createElement("LABEL", {
        "for": "target"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Show target"),
    marko_node12 = marko_createElement("LABEL", {
        "for": "stats"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("DPS / HPS Statistics"),
    marko_attrs10 = {
        id: "stats",
        name: "stats"
      },
    marko_node13 = marko_createElement("LABEL", {
        "for": "strongest"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Strongest action"),
    marko_attrs11 = {
        id: "strongest",
        name: "strongest"
      },
    marko_node14 = marko_createElement("LABEL", {
        "for": "deaths"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Show player deaths");

function render(input, out, __component, component, state) {
  var data = input;

  out.be("FORM", {
      method: "post",
      "class": "content pure-form pure-form-aligned",
      id: __component.id
    }, null, 0, {
      onsubmit: __component.d("onSubmit")
    });

  out.be("DIV", marko_attrs0);

  out.n(marko_node0);

  out.be("FIELDSET");

  out.n(marko_node1);

  out.e("DIV", marko_attrs1, 2)
    .n(marko_node6)
    .e("INPUT", {
        id: "customName",
        type: "text",
        name: "name",
        value: state.general.name
      }, 0);

  out.be("DIV", marko_attrs2);

  out.n(marko_node2);

  out.e("INPUT", {
      id: "wsrelay",
      type: "text",
      name: "wsrelay",
      value: state.general.wsrelay
    }, 0);

  out.be("DIV", marko_attrs3);

  out.t("Setup a server using ");

  out.n(marko_node3);

  out.t(" to forward messages to other clients");

  out.n(marko_node4);

  if (state.general.wsrelay) {
    out.be("SPAN");

    var wsrelay = state.general.wsrelay

    out.t(" Share the link via ");

    out.e("INPUT", {
        type: "text",
        "class": "pure-input-2-3",
        value: (((((location.protocol + "//") + location.hostname) + (location.port ? ":" + location.port : "")) + location.pathname.replace(/config\.html$/, "")) + "#") + btoa(wsrelay),
        locked: true
      }, 0);

    out.ee();
  }

  out.ee();

  out.ee();

  out.ee();

  out.e("FIELDSET", null, 7)
    .n(marko_node7)
    .e("DIV", marko_attrs4, 2)
      .n(marko_node8)
      .e("INPUT", {
          id: "time",
          type: "checkbox",
          name: "time",
          checked: state.header.time
        }, 0)
    .e("DIV", marko_attrs5, 3)
      .n(marko_node9)
      .e("INPUT", {
          id: "highlight",
          type: "checkbox",
          name: "highlight",
          checked: state.header.highlight
        }, 0)
      .n(marko_node10)
    .e("DIV", marko_attrs6, 2)
      .n(marko_node11)
      .e("INPUT", {
          id: "target",
          type: "checkbox",
          name: "target",
          checked: state.header.target
        }, 0)
    .e("DIV", marko_attrs7, 2)
      .n(marko_node12)
      .e("SELECT", marko_attrs10, 4)
        .e("OPTION", {
            value: "dps",
            selected: state.header.stats == "dps"
          }, 1)
          .t("Show DPS")
        .e("OPTION", {
            value: "hps",
            selected: state.header.stats == "hps"
          }, 1)
          .t("Show HPS")
        .e("OPTION", {
            value: "dps-hps",
            selected: state.header.stats == "dps-hps"
          }, 1)
          .t("Show DPS and HPS")
        .e("OPTION", {
            value: "",
            selected: state.header.stats == ""
          }, 1)
          .t("Show Nothing")
    .e("DIV", marko_attrs8, 2)
      .n(marko_node13)
      .e("SELECT", marko_attrs11, 4)
        .e("OPTION", {
            value: "hit",
            selected: state.header.strongest == "hit"
          }, 1)
          .t("Strongest Hit")
        .e("OPTION", {
            value: "heal",
            selected: state.header.strongest == "heal"
          }, 1)
          .t("Strongest Heal")
        .e("OPTION", {
            value: "hit-heal",
            selected: state.header.strongest == "hit-heal"
          }, 1)
          .t("Strongest Hit and Heal")
        .e("OPTION", {
            value: "",
            selected: state.header.strongest == ""
          }, 1)
          .t("Show nothing")
    .e("DIV", marko_attrs9, 2)
      .n(marko_node14)
      .e("INPUT", {
          id: "deaths",
          type: "checkbox",
          name: "deaths",
          checked: state.header.deaths
        }, 0);

  out.ee();

  out.n(marko_node5);

  out.ee();
}

marko_template._ = marko_renderer(render, {
    type: marko_componentType
  }, marko_component);

marko_template.Component = marko_defineComponent(marko_component, marko_template._);

});
$_mod.main("/icoparse$1.0.0/src/ui/column", "");
$_mod.def("/icoparse$1.0.0/src/util", function(require, exports, module, __filename, __dirname) { "use strict"

exports.jobs = {
    acn: "Arcanist", sch: "Scholar", smn: "Summoner",
    arc: "Archer", brd: "Bard",
    ast: "Astrologian",
    cnj: "Conjourer", whm: "White Mage",
    drk: "Dark Knight",
    gld: "Gladiator", pld: "Paladin",
    lnc: "Lancer", drg: "Dragoon",
    mch: "Machinist",
    mrd: "Marodeur", war: "Warrior",
    pgl: "Pugilist", mnk: "Monk",
    rog: "Rogue", nin: "Ninja",
    thm: "Thaumaturge", blm: "Black Mage",
    rdm: "Red Mage",
    sam: "Samurai",
}

exports.jobType = {
    gld: "tank", pld: "tank",
    mrd: "tank", war: "tank",
    drk: "tank",

    sch: "heal", ast: "heal",
    cnj: "heal", whm: "heal",

    acn: "mage", smn: "mage",
    thm: "mage", blm: "mage",
    rdm: "mage",

    arc: "range", brd: "range",
    mch: "range",

    pgl: "melee", mnk: "melee",
    lnc: "melee", drg: "melee",
    rog: "melee", nin: "melee",
    sam: "melee",
}

exports.jobClass = {
    gld: "pld",
    mrd: "war",
    lnc: "drg",
    cnj: "whm",
    acn: "smn",
    thm: "blm",
    arc: "brd",
    rog: "nin",
    pgl: "mnk"
}

exports.getPetType = function (name) {
    const pet = name.match(/^(.*) \((\S+ \S+)\)$/)
    if (!pet) return name.toLowerCase() == "limit break" ? "lb" : ""

    if (pet[1] == "selene" || pet[1] == "eos") return "fairy"

    if (pet[1].match(/(carbuncle|karfunkel|-egi)$/)) return "egi"
    if (pet[1].match(/^(\S+) autoturret$/) || pet[1].match(/^selbstschuss-gyrocopter (.+)$/)) return "turret"
    return "choco"
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/util", function(require, exports, module, __filename, __dirname) { "use strict"

const {jobs} = require('/icoparse$1.0.0/src/util'/*"../../util"*/)
// TODO: shorten skill names

exports.jobAbbrToLong = function (abbr) {
    return jobs[abbr] || abbr
}

exports.iconFromCombatant = function (abbr) {
    const pet = abbr.match(/^(.*) \((\S+ \S+)\)$/)
    if (!pet) return abbr
    
    if (pet[1] == "selene" || pet[1] == "eos") return pet[1]

    if (pet[1].match(/(carbuncle|karfunkel)$/)) {
        return "pet"
    }

    const egi = pet[1].match(/^([^-]+)-egi$/)
    if (egi) return egi[1]

    const copter = pet[1].match(/^(\S+) autoturret$/) || pet[1].match(/^selbstschuss-gyrocopter (.+)$/)
    if (copter) {
        if (copter[1] == "rook" || copter[1] == "läufer") return "rook"
        return "bishop"
    }

    return "chocobo"
}

exports.nerdRound = function (num) {
    if (num >= 1000000) {
        return (Math.round(num / 100000) / 10) + "m"
    } else if (num >= 1000) {
        return (Math.round(num / 100) / 10) + "k"
    } else return num
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/general", function(require, exports, module, __filename, __dirname) { "use strict"

const {jobType} = require('/icoparse$1.0.0/src/util'/*"../../util"*/)
const { iconFromCombatant, jobAbbrToLong } = require('/icoparse$1.0.0/src/ui/column/util'/*"./util.js"*/)

exports.position = {
    name: "Position",
    description: "Display the position in the ranking",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Set the text-alignment in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" },
        },
    },
    style: "width: 1.5rem; max-width: 3rem",
    render(out, args) {
        out.text(`${args.index + 1}.`)
    }
}

exports.name = {
    name: "Name",
    description: "Display the character name",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        abbr: {
            name: "Abbreviation",
            description: "Abbreviate the first name, last name, or both",
            default: "",
            type: "select",
            values: { "": "First Last", "first": "F. Last", "last": "First L.", "both": "F. L." }
        }
    },
    render(out, args) {
        if (args.combatant.name.indexOf(" ") < 0) {
            return out.text(args.combatant.name)
        }

        let name = args.combatant.name
        let pet = name.match(/^(.*) \((\S+ \S+)\)$/)
        if (pet) {
            name = pet[0]
            pet = pet[1]
        }

        name = name.split(" ")
        switch (args.cell.opts.align) {
            case "first": name[0] = name[0][0] + "."; break
            case "last": name[1] = name[1][0] + "."; break
            case "both":
                name[0] = name[0][0] + "."
                name[1] = name[1][0] + "."
        }

        if (pet) {
            out.text(`${pet} (${name[0]} ${name[1]})`)
        } else {
            out.text(name[0] + " " + name[1])
        }
    }
}

exports.job = {
    name: "Job",
    description: "Display the characters Job",
    enabled: true,
    options: {
        align: {
            title: "Align",
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        icon: {
            name: "Display Icon",
            description: "Display the class or job as an icon",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Job/Class name",
            default: "",
            type: "select",
            values: { "": "Hidden", "short": "3 Char Abbreviation", "long": "Full Class Name" }
        }
    },
    style: cell => {
        let width = 0
        switch (cell.opts.format) {
            case "short": width = 3.5; break
            case "long": width = 5.5; break
        }

        if (cell.opts.icon) {
            width += 1.5
        }

        return "width: " + width + "rem"
    },
    render: (out, args) => {
        const abbr = (args.combatant.Job || args.combatant.name).toLowerCase()

        if (args.cell.opts.icon) {
            out.html(`<img src="./icons/${iconFromCombatant(abbr)}.png" style="height: 1.5rem; width: auto; position: absolute; margin-top: -0.15rem" />`)
            out.beginElement("span", { style: "padding-left: 1.6rem" })
        }

        switch (args.cell.opts.format) {
            case "short": out.text(args.combatant.Job.toUpperCase()); break
            case "long": out.text(jobAbbrToLong(abbr))
        }

        if (args.cell.opts.icon) {
            out.endElement()
        }
    }
}

exports.death = {
    name: "Deaths",
    description: "Display player deaths",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fc",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }
    },
    style: "width: 2rem;",
    render(out, args) { return out.text(args.combatant.deaths) }
}

exports.critall = {
    name: "Crititcal Skill",
    description: "Critical Heal for healers, critical hit for everyone else",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Display style of the crit rate",
            default: "rel",
            type: "option",
            values: { rel: "In Percent", abs: "Absolute number of hits" }
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (jobType[args.combatant.Job.toLowerCase()] === "heal") {
            if (args.cell.opts.format === "abs") {
                out.text(args.combatant.critheals)
            } else {
                out.text(args.combatant["critheal%"])
            }
        } else {
            if (args.cell.opts.format === "abs") {
                out.text(args.combatant.crithits)
            } else {
                out.text(args.combatant["crithit%"])
            }
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.maxall = {
    name: "Best Skill",
    description: "Best Heal for healers, best hit for everyone else",
    enabled: false,
    options: {
        align: {
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "both",
            type: "select",
            values: { both: "Skill and Damage", skill: "Skill", damage: "Damage" }
        }, 
        round: {
            name: "Round",
            description: "Prefer shortened values (5k) over long values (5000)",
            default: true,
            type: "checkbox",
        }
    },
    style(cell) {
        if (cell.opts.style == "damage") {
            return cell.opts.round ? "width: 4rem" : "width: 5rem"
        }

        return "width: 12rem"
    },
    render: (out, args) => {
        let max = args.combatant.maxhit
        if (jobType[args.combatant.Job.toLowerCase()] === "heal") {
            max = args.combatant.maxheal
        }
        let [skill, dottedDamage] = max.split("-")

        if (!skill) return
        if (skill.length > 15) {
            skill = skill.substr(0, 14) + "..."
        }

        let damage = (dottedDamage || "0").replace(/\./g, "")
        if (args.cell.opts.round) {
            damage = nerdRound(damage)
        }

        switch (args.cell.opts.style) {
            case "damage": return out.text(damage)
            case "skill": return out.text(skill)
            case "both": return out.text(`${skill} (${damage})`)
        }
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/dd", function(require, exports, module, __filename, __dirname) { "use strict"

const { nerdRound } = require('/icoparse$1.0.0/src/ui/column/util'/*"./util"*/)

exports.dps = {
    name: "DPS",
    description: "Display the damage per second",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.ENCDPS)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.damage = {
    name: "Damage",
    description: "Display the absolute damage done",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "short",
            type: "select",
            values: { short: "Short (5k)", long: "Long (5000)", percentage: "Percantage (5%)" }
        }
    },
    style(cell) {
        if (cell.opts.style === "long") return "width: 7rem"
        return "width: 4rem";
    },
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        let value = +args.combatant.damage
        if (args.cell.opts.style == "short") value = nerdRound(value)
        else if (args.cell.opts.style == "percentage") value = args.combatant["damage%"]

        out.text(value)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.maxhit = {
    name: "Best Hit",
    description: "Display the strongest attack",
    enabled: false,
    options: {
        align: {
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "both",
            type: "select",
            values: { both: "Skill and Damage", skill: "Skill", damage: "Damage" }
        }, 
        round: {
            name: "Round",
            description: "Prefer shortened values (5k) over long values (5000)",
            default: true,
            type: "checkbox",
        }
    },
    style(cell) {
        if (cell.opts.style == "damage") {
            return cell.opts.round ? "width: 4rem" : "width: 5rem"
        }

        return "width: 12rem"
    },
    render: (out, args) => {
        let [skill, dottedDamage] = args.combatant.maxhit.split("-")

        if (!skill) return
        if (skill.length > 15) {
            skill = skill.substr(0, 14) + "..."
        }

        let damage = (dottedDamage || "0").replace(/\./g, "")
        if (args.cell.opts.round) {
            damage = nerdRound(damage)
        }

        switch (args.cell.opts.style) {
            case "damage": return out.text(damage)
            case "skill": return out.text(skill)
            case "both": return out.text(`${skill} (${damage})`)
        }
    }
}

exports.crithit = {
    name: "Critical Hits",
    description: "Display the critical hit rate",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Display style of the crit rate",
            default: "rel",
            type: "option",
            values: { rel: "In Percent", abs: "Absolute number of hits" }
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (args.cell.opts.format === "abs") {
            out.text(args.combatant.crithits)
        } else {
            out.text(args.combatant["crithit%"])
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.directhit = {
    name: "Direct Hits",
    description: "Display the direct hit rate",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Display style of the crit rate",
            default: "rel",
            type: "option",
            values: { rel: "In Percent", abs: "Absolute number of hits" }
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (args.cell.opts.format === "abs") {
            out.text(args.combatant.DirectHitCount)
        } else {
            out.text(args.combatant.DirectHitPct)
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.critdirecthit = {
    name: "Crititcal Direct Hits",
    description: "Display the ciritcal direct hit rate",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Display style of the crit rate",
            default: "rel",
            type: "option",
            values: { rel: "In Percent", abs: "Absolute number of hits" }
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (args.cell.opts.format === "abs") {
            out.text(args.combatant.CritDirectHitCount)
        } else {
            out.text(parseInt(args.combatant.CritDirectHitCount / args.combatant.swings * 100))
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/heal", function(require, exports, module, __filename, __dirname) { "use strict"

const { nerdRound } = require('/icoparse$1.0.0/src/ui/column/util'/*"./util"*/)

exports.hps = {
    name: "HPS",
    description: "Display the heal per second",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.ENCHPS)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.thps = {
    name: "True HPS",
    description: "Display the heal per second, adjusted to exclude the Over Heal",
    enabled: false,
    options: {
        align: {
            key: "align",
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            key: "monospace",
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(parseInt(args.combatant.ENCHPS / 100 * (100 - parseInt(args.combatant.OverHealPct))))

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.heal = {
    name: "Heal",
    description: "Display the absolute healing done",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "short",
            type: "select",
            values: { short: "Short (5k)", long: "Long (5000)", percentage: "Percantage (5%)" }
        }
    },
    style(cell) {
        if (cell.opts.style === "long") return "width: 7rem"
        return "width: 4rem";
    },
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        let value = +args.combatant.healed
        if (args.cell.opts.style == "short") value = nerdRound(value)
        else if (args.cell.opts.style == "percentage") value = args.combatant["healed%"]

        out.text(value)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.oh = {
    name: "Overheal",
    description: "Display the relative overheal done",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.OverHealPct)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.maxheal = {
    name: "Best Heal",
    description: "Display the strongest heal",
    enabled: false,
    options: {
        align: {
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "both",
            type: "select",
            values: { both: "Skill and Heal", skill: "Skill", heal: "Heal" }
        }, 
        round: {
            name: "Round",
            description: "Prefer shortened values (5k) over long values (5000)",
            default: true,
            type: "checkbox",
        }
    },
    style(cell) {
        if (cell.opts.style == "heal") {
            return cell.opts.round ? "width: 4rem" : "width: 5rem"
        }

        return "width: 12rem"
    },
    render: (out, args) => {
        let [skill, dottedHeal] = args.combatant.maxheal.split("-")

        if (!skill) return
        if (skill.length > 15) {
            skill = skill.substr(0, 14) + "..."
        }

        let heal = (dottedHeal || "0").replace(/\./g, "")
        if (args.cell.opts.round) {
            heal = nerdRound(heal)
        }

        switch (args.cell.opts.style) {
            case "heal": return out.text(heal)
            case "skill": return out.text(skill)
            case "both": return out.text(`${skill} (${heal})`)
        }
    }
}

exports.critheal = {
    name: "Critical Heals",
    description: "Display the critical heal rate",
    enabled: true,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        format: {
            name: "Format",
            description: "Display style of the crit rate",
            default: "rel",
            type: "option",
            values: { rel: "In Percent", abs: "Absolute number of heals" }
        }
    },
    style: "width: 4rem",
    render: (out, args) => {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (args.cell.opts.format === "abs") {
            out.text(args.combatant.critheals)
        } else {
            out.text(args.combatant["critheal%"])
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/tank", function(require, exports, module, __filename, __dirname) { "use strict"

const { nerdRound } = require('/icoparse$1.0.0/src/ui/column/util'/*"./util"*/)

exports.tdps = {
    name: "TDPS",
    description: "Display the damage taken per second",
    enabled: false,
    options: [
        {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    ],
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(parseInt(+args.combatant.damagetaken / +args.combatant.DURATION) || 0)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.taken = {
    name: "Damage Taken",
    description: "Display the damage taken",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "percentage",
            type: "select",
            values: { short: "Short (5k)", long: "Long (5000)", percentage: "Percantage (5%)" }
        }
    },
    style(cell) {
        if (cell.opts.style !== "percentage") {
            return "width: 7rem";
        } else {
            return "width: 4rem";
        }
    },
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        let value = +args.combatant.damagetaken
        if (args.cell.opts.style == "short") value = nerdRound(value)
        else if (args.cell.opts.style == "percentage") value = parseInt(+args.combatant.damagetaken / +args.encounter.damagetaken * 100) + "%"

        out.text(value)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
} 

exports.rhps = {
    name: "Received HPS",
    description: "Display the received heal per second",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(parseInt(+args.combatant.healstaken / +args.combatant.DURATION) || 0)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.received = {
    name: "Heals Received",
    description: "Display the health restored",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        style: {
            name: "Style",
            description: "Change display style",
            default: "percentage",
            type: "select",
            values: { short: "Short (5k)", long: "Long (5000)", percentage: "Percantage (5%)" }
        }
    },
    style(cell) {
        if (cell.opts.style !== "percentage") {
            return "width: 7rem";
        } else {
            return "width: 4rem";
        }
    },
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        let value = +args.combatant.healstaken
        if (args.cell.opts.style == "short") value = nerdRound(value)
        else if (args.cell.opts.style == "percentage") value = parseInt(+args.combatant.healstaken / +args.encounter.healstaken * 100) + "%"

        out.text(value)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
} 

exports.parry = {
    name: "Parry",
    description: "Display the parry rate",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.ParryPct)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.block = {
    name: "Block",
    description: "Display the block rate",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.BlockPct)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/legacy", function(require, exports, module, __filename, __dirname) { "use strict"

exports.accuracy = {
    name: "Accuracy",
    description: "(Deprecated) Display the relative accuracy",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fl",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }, 
        reverse: {
            name: "Missrate",
            description: "Instead of displaying the accuracy, display the rate of misses",
            default: false,
            type: "checkbox"
        }
    },
    style: "width: 4rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        if (args.cell.opts.reverse) {
            out.text(parseInt(100 - parseFloat((+args.combatant.TOHIT ? args.combatant.tohit : "100").replace(",", "."))) + "%")
        } else  {
            out.text((+args.combatant.TOHIT || 100) + "%")
        }

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}

exports.miss = {
    name: "Number of misses",
    description: "(Deprecated) Display the number of misses",
    enabled: false,
    options: {
        align: {
            name: "Align",
            description: "Text align in the cell",
            default: "fr",
            type: "option",
            values: { fl: "Left", fc: "Center", fr: "Right" }
        }, 
        monospace: {
            name: "Monospaced",
            description: "Use a monospaced, fixed-width font",
            default: true,
            type: "checkbox"
        }
    },
    style: "width: 3rem",
    render(out, args) {
        if (args.cell.opts.monospace) {
            out.beginElement("span", { "class": "mono" })
        }

        out.text(args.combatant.misses)

        if (args.cell.opts.monospace) {
            out.endElement()
        }
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/column/index", function(require, exports, module, __filename, __dirname) { "use strict"

exports.style = function (cell) {
    const def = exports[cell.id]

    if (!def) {
        console.error(`failed to fetch style for type <${cell.id}>`)
        return false
    }

    if (typeof def.style === "function") {
        return { style: def.style(cell) }
    }

    return { style: def.style || "" }
}

exports.render = function (out, args) {
    const def = exports[args.cell.id]

    if (!def) {
        console.log(args.cell.id, args)
        console.error(`failed to render column for type <${args.cell.id}>`)
        return false
    }
    return def.render(out, args)
}

const general = require('/icoparse$1.0.0/src/ui/column/general'/*"./general"*/)
Object.keys(general).forEach(k => exports[k] = general[k])

const dd = require('/icoparse$1.0.0/src/ui/column/dd'/*"./dd"*/)
Object.keys(dd).forEach(k => exports[k] = dd[k])

const heal = require('/icoparse$1.0.0/src/ui/column/heal'/*"./heal"*/)
Object.keys(heal).forEach(k => exports[k] = heal[k])

const tank = require('/icoparse$1.0.0/src/ui/column/tank'/*"./tank"*/)
Object.keys(tank).forEach(k => exports[k] = tank[k])

const legacy = require('/icoparse$1.0.0/src/ui/column/legacy'/*"./legacy"*/)
Object.keys(legacy).forEach(k => exports[k] = legacy[k])
});
$_mod.installed("icoparse$1.0.0", "dragula", "3.7.2");
$_mod.main("/dragula$3.7.2", "dragula");
$_mod.installed("dragula$3.7.2", "contra", "1.9.4");
$_mod.installed("contra$1.9.4", "atoa", "1.0.0");
$_mod.main("/atoa$1.0.0", "atoa");
$_mod.def("/atoa$1.0.0/atoa", function(require, exports, module, __filename, __dirname) { module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }

});
$_mod.installed("contra$1.9.4", "ticky", "1.0.1");
$_mod.main("/ticky$1.0.1", "ticky");
$_mod.remap("/ticky$1.0.1/ticky", "/ticky$1.0.1/ticky-browser");
$_mod.def("/ticky$1.0.1/ticky-browser", function(require, exports, module, __filename, __dirname) { var si = typeof setImmediate === 'function', tick;
if (si) {
  tick = function (fn) { setImmediate(fn); };
} else {
  tick = function (fn) { setTimeout(fn, 0); };
}

module.exports = tick;
});
$_mod.def("/contra$1.9.4/debounce", function(require, exports, module, __filename, __dirname) { 'use strict';

var ticky = require('/ticky$1.0.1/ticky-browser'/*'ticky'*/);

module.exports = function debounce (fn, args, ctx) {
  if (!fn) { return; }
  ticky(function run () {
    fn.apply(ctx || null, args || []);
  });
};

});
$_mod.def("/contra$1.9.4/emitter", function(require, exports, module, __filename, __dirname) { 'use strict';

var atoa = require('/atoa$1.0.0/atoa'/*'atoa'*/);
var debounce = require('/contra$1.9.4/debounce'/*'./debounce'*/);

module.exports = function emitter (thing, options) {
  var opts = options || {};
  var evt = {};
  if (thing === undefined) { thing = {}; }
  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }
    return thing;
  };
  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!
    thing.on(type, fn);
    return thing;
  };
  thing.off = function (type, fn) {
    var c = arguments.length;
    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];
      if (!et) { return thing; }
      et.splice(et.indexOf(fn), 1);
    }
    return thing;
  };
  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };
  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;
      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }
      et.forEach(function emitter (listen) {
        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }
        if (listen._once) { thing.off(type, listen); }
      });
      return thing;
    };
  };
  return thing;
};

});
$_mod.installed("dragula$3.7.2", "crossvent", "1.5.4");
$_mod.main("/crossvent$1.5.4", "src\\crossvent");
$_mod.installed("crossvent$1.5.4", "custom-event", "1.0.0");
$_mod.main("/custom-event$1.0.0", "");
$_mod.def("/custom-event$1.0.0/index", function(require, exports, module, __filename, __dirname) { 
var NativeCustomEvent = global.CustomEvent;

function useNative () {
  try {
    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
    return  'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {
  }
  return false;
}

/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */

module.exports = useNative() ? NativeCustomEvent :

// IE >= 9
'function' === typeof document.createEvent ? function CustomEvent (type, params) {
  var e = document.createEvent('CustomEvent');
  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }
  return e;
} :

// IE <= 8
function CustomEvent (type, params) {
  var e = document.createEventObject();
  e.type = type;
  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }
  return e;
}

});
$_mod.def("/crossvent$1.5.4/src/eventmap", function(require, exports, module, __filename, __dirname) { 'use strict';

var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in global) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

module.exports = eventmap;

});
$_mod.def("/crossvent$1.5.4/src/crossvent", function(require, exports, module, __filename, __dirname) { 'use strict';

var customEvent = require('/custom-event$1.0.0/index'/*'custom-event'*/);
var eventmap = require('/crossvent$1.5.4/src/eventmap'/*'./eventmap'*/);
var doc = global.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!global.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

module.exports = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy (el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard (el, type, fn) {
  return el.attachEvent('on' + type, wrap(el, type, fn));
}

function removeEventEasy (el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard (el, type, fn) {
  var listener = unwrap(el, type, fn);
  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent (el, type, model) {
  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }
  function makeClassicEvent () {
    var e;
    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }
    return e;
  }
  function makeCustomEvent () {
    return new customEvent(type, { detail: model });
  }
}

function wrapperFactory (el, type, fn) {
  return function wrapper (originalEvent) {
    var e = originalEvent || global.event;
    e.target = e.target || e.srcElement;
    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap (el, type, fn) {
  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap (el, type, fn) {
  var i = find(el, type, fn);
  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory
    return wrapper;
  }
}

function find (el, type, fn) {
  var i, item;
  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];
    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}

});
$_mod.def("/dragula$3.7.2/classes", function(require, exports, module, __filename, __dirname) { 'use strict';

var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass (className) {
  var cached = cache[className];
  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }
  return cached;
}

function addClass (el, className) {
  var current = el.className;
  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass (el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

module.exports = {
  add: addClass,
  rm: rmClass
};

});
$_mod.def("/dragula$3.7.2/dragula", function(require, exports, module, __filename, __dirname) { 'use strict';

var emitter = require('/contra$1.9.4/emitter'/*'contra/emitter'*/);
var crossvent = require('/crossvent$1.5.4/src/crossvent'/*'crossvent'*/);
var classes = require('/dragula$3.7.2/classes'/*'./classes'*/);
var doc = document;
var documentElement = doc.documentElement;

function dragula (initialContainers, options) {
  var len = arguments.length;
  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }
  var _mirror; // mirror image
  var _source; // source container
  var _item; // item being dragged
  var _offsetX; // reference x
  var _offsetY; // reference y
  var _moveX; // reference move x
  var _moveY; // reference move y
  var _initialSibling; // reference sibling when grabbed
  var _currentSibling; // reference sibling now
  var _copy; // item used for copying
  var _renderTimer; // timer for setTimeout renderMirrorImage
  var _lastDropTarget = null; // last container item was over
  var _grabbed; // holds mousedown context until first mousemove

  var o = options || {};
  if (o.moves === void 0) { o.moves = always; }
  if (o.accepts === void 0) { o.accepts = always; }
  if (o.invalid === void 0) { o.invalid = invalidTarget; }
  if (o.containers === void 0) { o.containers = initialContainers || []; }
  if (o.isContainer === void 0) { o.isContainer = never; }
  if (o.copy === void 0) { o.copy = false; }
  if (o.copySortSource === void 0) { o.copySortSource = false; }
  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
  if (o.direction === void 0) { o.direction = 'vertical'; }
  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();

  return drake;

  function isContainer (el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements (remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8
    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy () {
    events(true);
    release({});
  }

  function preventGrabbed (e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab (e) {
    _moveX = e.clientX;
    _moveY = e.clientY;

    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }
    var item = e.target;
    var context = canStart(item);
    if (!context) {
      return;
    }
    _grabbed = context;
    eventualMovements();
    if (e.type === 'mousedown') {
      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved (e) {
    if (!_grabbed) {
      return;
    }
    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    }
    // truthy check fixes #239, equality fixes #207
    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }
    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed
    eventualMovements(true);
    movements();
    end();
    start(grabbed);

    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;

    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart (item) {
    if (drake.dragging && _mirror) {
      return;
    }
    if (isContainer(item)) {
      return; // don't drag container itself
    }
    var handle = item;
    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }
      item = getParent(item); // drag target should be a top element
      if (!item) {
        return;
      }
    }
    var source = getParent(item);
    if (!source) {
      return;
    }
    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));
    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove (item) {
    return !!canStart(item);
  }

  function manualStart (item) {
    var context = canStart(item);
    if (context) {
      start(context);
    }
  }

  function start (context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);

    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget () {
    return false;
  }

  function end () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab () {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release (e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop (item, target) {
    var parent = getParent(item);
    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }
    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }
    cleanup();
  }

  function remove () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var parent = getParent(item);
    if (parent) {
      parent.removeChild(item);
    }
    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel (revert) {
    if (!drake.dragging) {
      return;
    }
    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);
    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }
    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }
    cleanup();
  }

  function cleanup () {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();
    if (item) {
      classes.rm(item, 'gu-transit');
    }
    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }
    drake.dragging = false;
    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }
    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement (target, s) {
    var sibling;
    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }
    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget (elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;
    while (target && !accepted()) {
      target = getParent(target);
    }
    return target;

    function accepted () {
      var droppable = isContainer(target);
      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);
      if (initial) {
        return true; // should always be able to drop it right back where it was
      }
      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag (e) {
    if (!_mirror) {
      return;
    }
    e.preventDefault();

    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;

    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';

    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }
    var parent = getParent(item);
    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }
      return;
    }
    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);
    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }
      return;
    }
    if (
      (reference === null && changed) ||
      reference !== item &&
      reference !== nextEl(item)
    ) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }
    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
    function over () { if (changed) { moved('over'); } }
    function out () { if (_lastDropTarget) { moved('out'); } }
  }

  function spillOver (el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut (el) {
    if (drake.dragging) { classes.add(el, 'gu-hide'); }
  }

  function renderMirrorImage () {
    if (_mirror) {
      return;
    }
    var rect = _item.getBoundingClientRect();
    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage () {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild (dropTarget, target) {
    var immediate = target;
    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }
    if (immediate === documentElement) {
      return null;
    }
    return immediate;
  }

  function getReference (dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside () { // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;
      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();
        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
      }
      return null;
    }

    function inside () { // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();
      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }
      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve (after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy (item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy (el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };
  if (global.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (global.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton (e) {
  if (e.touches !== void 0) { return e.touches.length; }
  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
  if (e.buttons !== void 0) { return e.buttons; }
  var button = e.button;
  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
  }
}

function getOffset (el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll (scrollProp, offsetProp) {
  if (typeof global[offsetProp] !== 'undefined') {
    return global[offsetProp];
  }
  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }
  return doc.body[scrollProp];
}

function getElementBehindPoint (point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never () { return false; }
function always () { return true; }
function getRectWidth (rect) { return rect.width || (rect.right - rect.left); }
function getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }
function getParent (el) { return el.parentNode === doc ? null : el.parentNode; }
function isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }
function isEditable (el) {
  if (!el) { return false; } // no parents were editable
  if (el.contentEditable === 'false') { return false; } // stop the lookup
  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
  return isEditable(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl (el) {
  return el.nextElementSibling || manually();
  function manually () {
    var sibling = el;
    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);
    return sibling;
  }
}

function getEventHost (e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }
  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }
  return e;
}

function getCoord (coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX', // IE8
    pageY: 'clientY' // IE8
  };
  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }
  return host[coord];
}

module.exports = dragula;

});
$_mod.def("/marko$4.4.16/src/runtime/helper-forEachWithStatusVar", function(require, exports, module, __filename, __dirname) { function LoopStatus(len) {
    this.i = 0;
    this.len = len;
}

LoopStatus.prototype = {
    getLength: function() {
        return this.len;
    },
    isLast: function() {
        return this.i === this.len - 1;
    },
    isFirst: function() {
        return this.i === 0;
    },
    getIndex: function() {
        return this.i;
    }
};

/**
 * Internal helper method to handle loops with a status variable
 * @private
 */
module.exports = function forEachStatusVariableHelper(array, callback) {
    if (!array) {
        return;
    }
    if (!array.forEach) {
        array = [array];
    }

    var len = array.length;
    var loopStatus = new LoopStatus(len);

    for (; loopStatus.i < len; loopStatus.i++) {
        var o = array[loopStatus.i];
        callback(o, loopStatus);
    }
};
});
$_mod.def("/marko$4.4.16/src/runtime/helper-forEachProperty", function(require, exports, module, __filename, __dirname) { var isArray = Array.isArray;

/**
 * Internal helper method for looping over the properties of any object
 * @private
 */
module.exports = function forEachPropertyHelper(o, func) {
    if (!o) {
        return;
    }

    if (isArray(o)) {
        for (var i=0; i<o.length; i++) {
            func(i, o[i]);
        }
    } else if (typeof Map !== 'undefined' && o instanceof Map) {
        o.forEach(function(v, k) {
            func(k, v);
        });
    } else {
        for (var k in o) {
            if (o.hasOwnProperty(k)) {
                func(k, o[k]);
            }
        }
    }
};

});
$_mod.def("/icoparse$1.0.0/src/components/config/routes/config-route-table/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    marko_component = ({
    onCreate: function () {
        this.state = {
            cells: JSON.parse(localStorage.getItem('cells')),
            details: null
        };
    },
    onSubmit: function (ev, el) {
        ev.preventDefault();
        this.adjustCellOrder();
        localStorage.setItem('cells', JSON.stringify(this.state.cells));
        humane.log('Settings saved!');
    },
    onSubmitDetails: function (idx, ev, el) {
        ev.preventDefault();
        const column = require('/icoparse$1.0.0/src/ui/column/index'/*'../../../../ui/column'*/);
        const cell = this.state.cells[idx];
        const col = column[cell.id];
        const fields = Array.from(document.getElementsByTagName('form')[0].elements).filter(el => el.id);
        fields.forEach(f => {
            if (f.type == 'checkbox') {
                cell.opts[f.name] = f.checked;
            } else if (f.type == 'radio') {
                if (f.checked) {
                    cell.opts[f.name] = f.value;
                }
            } else {
                cell.opts[f.name] = f.value;
            }
        });
        this.adjustCellOrder();
        this.setState('details', null);
    },
    onMount: function () {
        this.drake = require('/dragula$3.7.2/dragula'/*'dragula'*/)([
            this.getEl('enabled'),
            this.getEl('disabled')
        ], {});
    },
    onDestroy: function () {
        if (this.drake) {
            this.drake.destroy();
        }
    },
    onDetails: function (cell) {
        this.adjustCellOrder();
        console.log('cell details for', cell);
        const idx = this.state.cells.findIndex(c => c.id == cell);
        console.log('cell found at idx', idx);
        this.setState('details', idx);
    },
    adjustCellOrder: function () {
        const cells = [];
        const disabled = this.getEl('disabled');
        const els = document.getElementsByClassName('cell');
        Array.from(els).forEach(el => {
            const idx = el.dataset.idx;
            this.state.cells[idx].enabled = el.parentNode != disabled;
            cells.push(this.state.cells[idx]);
        });
        this.setState('cells', cells);
    }
}),
    components_helpers = require('/marko$4.4.16/src/components/helpers-browser'/*"marko/src/components/helpers"*/),
    marko_registerComponent = components_helpers.rc,
    marko_componentType = marko_registerComponent("/icoparse$1.0.0/src/components/config/routes/config-route-table/index.marko", function() {
      return module.exports;
    }),
    marko_renderer = components_helpers.r,
    marko_defineComponent = components_helpers.c,
    humane = require('/humane-js$3.2.2/humane'/*"humane-js"*/),
    marko_forEachWithStatusVar = require('/marko$4.4.16/src/runtime/helper-forEachWithStatusVar'/*"marko/src/runtime/helper-forEachWithStatusVar"*/),
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_forEach = marko_helpers.f,
    marko_forEachProp = require('/marko$4.4.16/src/runtime/helper-forEachProperty'/*"marko/src/runtime/helper-forEachProperty"*/),
    marko_attrs0 = {
        "class": "form"
      },
    marko_createElement = marko_helpers.e,
    marko_const = marko_helpers.const,
    marko_const_nextId = marko_const("e999b4"),
    marko_node0 = marko_createElement("DIV", {
        "class": "title"
      }, 2, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", {
          "class": "ion-stats-bars"
        }, 0)
      .t(" Table"),
    marko_node1 = marko_createElement("P", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Drag the available cells to the preferred location. The order of the cells represents the order in the overlay."),
    marko_node2 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Enabled"),
    marko_node3 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Disabled"),
    marko_node4 = marko_createElement("DIV", {
        "class": "btnbar"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .e("BUTTON", {
          type: "submit"
        }, 1)
        .t("Save"),
    marko_attrs1 = {
        type: "button"
      },
    marko_node5 = marko_createElement("SPAN", {
        "class": "ion-gear-a"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_attrs2 = {
        type: "button"
      },
    marko_node6 = marko_createElement("SPAN", {
        "class": "ion-gear-a"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_attrs3 = {
        "class": "pure-control-group"
      },
    marko_attrs4 = {
        "class": "pure-control-group"
      },
    marko_node7 = marko_createElement("LABEL", {
        "for": "title"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Table Header"),
    marko_node8 = marko_createElement("SPAN", {
        "class": "pure-form-message-inline"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("The title used in the overlay. Leave empty to hide the title"),
    marko_attrs5 = {
        "class": "pure-control-group"
      },
    marko_attrs6 = {
        "class": "label"
      },
    marko_attrs7 = {
        "class": "pure-radio"
      },
    marko_attrs8 = {
        "class": "pure-form-message-inline"
      },
    marko_attrs9 = {
        "class": "label"
      },
    marko_attrs10 = {
        "class": "pure-checkbox"
      },
    marko_attrs11 = {
        "class": "pure-form-message-inline"
      },
    marko_attrs12 = {
        "class": "pure-form-message-inline"
      },
    marko_attrs13 = {
        type: "button"
      },
    marko_node9 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Cell Details"),
    marko_node10 = marko_createElement("SPAN", {
        "class": "ion-gear-a"
      }, 0, 0, {
        c: marko_const_nextId()
      });

function render(input, out, __component, component, state) {
  var data = input;

  const column = require('/icoparse$1.0.0/src/ui/column/index'/*"../../../../ui/column"*/)

  out.be("FORM", {
      method: "post",
      "class": "content pure-form pure-form-aligned",
      id: __component.id
    }, null, 0, {
      onsubmit: __component.d("onSubmit")
    });

  out.be("DIV", marko_attrs0);

  out.n(marko_node0);

  out.n(marko_node1);

  out.be("FIELDSET");

  out.n(marko_node2);

  out.be("OL", {
      "class": "dragger",
      id: __component.elId("disabled")
    }, null, 4);

  marko_forEachWithStatusVar(state.cells, function(cell, loop) {
    if (cell.enabled) {
      out.be("LI", {
          "data-key": cell.id,
          "data-idx": loop.getIndex(),
          "class": "cell"
        });

      var col = column[cell.id]

      out.e("STRONG", {
          title: col.description
        }, 1)
        .t(col.name);

      out.e("BUTTON", marko_attrs1, 1, 0, {
          onclick: __component.d("onDetails", [
              cell.id
            ])
        })
        .n(marko_node5);

      out.ee();
    }
  });

  out.ee();

  out.ee();

  out.be("FIELDSET");

  out.n(marko_node3);

  out.be("OL", {
      "class": "dragger",
      id: __component.elId("enabled")
    }, null, 4);

  marko_forEachWithStatusVar(state.cells, function(cell, loop) {
    if (!cell.enabled) {
      out.be("LI", {
          "data-key": cell.id,
          "data-idx": loop.getIndex(),
          "class": "cell"
        });

      var col = column[cell.id]

      out.e("STRONG", {
          title: col.description
        }, 1)
        .t(col.name);

      out.e("BUTTON", marko_attrs2, 1, 0, {
          onclick: __component.d("onDetails", [
              cell.id
            ])
        })
        .n(marko_node6);

      out.ee();
    }
  });

  out.ee();

  out.ee();

  out.be("FIELDSET");

  if (state.details != null) {
    var cell = state.cells[state.details]

    var col = column[cell.id]

    out.e("LEGEND", null, 2)
      .t("Details for ")
      .t(col.name);

    out.e("P", null, 1)
      .t(col.description);

    out.e("DIV", marko_attrs3, 3)
      .n(marko_node7)
      .e("INPUT", {
          id: "title",
          type: "text",
          name: "title",
          value: cell.title
        }, 0)
      .n(marko_node8);

    marko_forEach(Object.keys(col.options), function(c) {
      out.be("DIV", marko_attrs5);

      var def = col.options[c], val = cell.opts[c]

      if (def.type == "option") {
        out.e("SPAN", marko_attrs6, 1)
          .t(def.name);

        marko_forEachProp(def.values, function(k, v) {
          out.e("LABEL", marko_attrs7, 3)
            .e("INPUT", {
                type: "radio",
                id: (c + "-") + k,
                name: (c + "-") + k,
                value: k,
                checked: val == k
              }, 0)
            .t(" ")
            .t(v);
        });

        if (def.description) {
          out.e("SPAN", marko_attrs8, 1)
            .t(def.description);
        }
      } else if (def.type == "checkbox") {
        out.e("SPAN", marko_attrs9, 1)
          .t(def.name);

        out.e("LABEL", marko_attrs10, 1)
          .e("INPUT", {
              type: "checkbox",
              id: c,
              name: c,
              checked: val
            }, 0);

        if (def.description) {
          out.e("SPAN", marko_attrs11, 1)
            .t(def.description);
        }
      } else if (def.type == "select") {
        out.e("LABEL", {
            "for": (cell.id + "-") + c
          }, 1)
          .t(def.name);

        out.be("SELECT", {
            id: (cell.id + "-") + c,
            name: (cell.id + "-") + c
          });

        marko_forEachProp(def.values, function(k, v) {
          out.e("OPTION", {
              value: k,
              selected: val == k
            }, 1)
            .t(v);
        });

        out.ee();

        if (def.description) {
          out.e("SPAN", marko_attrs12, 1)
            .t(def.description);
        }
      } else {
        out.t(c);

        out.t(": Unkown type ");

        out.t(def.type);
      }

      out.ee();
    });

    out.e("DIV", marko_attrs4, 1)
      .e("BUTTON", marko_attrs13, 1, 0, {
          onclick: __component.d("onSubmitDetails", [
              state.details
            ])
        })
        .t("Update");
  } else {
    out.n(marko_node9);

    out.t(" Click on the ");

    out.n(marko_node10);

    out.t(" gear icon to view detailed settings.");
  }

  out.ee();

  out.ee();

  out.n(marko_node4);

  out.ee();
}

marko_template._ = marko_renderer(render, {
    type: marko_componentType
  }, marko_component);

marko_template.Component = marko_defineComponent(marko_component, marko_template._);

});
$_mod.main("/icoparse$1.0.0/src/ui/meter", "");
$_mod.def("/icoparse$1.0.0/src/ui/meter/style", function(require, exports, module, __filename, __dirname) { "use strict"

function roundRect(ctx, x, y, width, height, radius, fill, stroke) {
    if (typeof radius === "undefined") {
        radius = 5;
    }
  
    if (typeof radius === typeof 1) {
      radius = {
        tr: radius, br: radius, bl: radius, tl: radius
      }
    }

    if (typeof stroke == "undefined") {
        stroke = true;
    }
    ctx.beginPath();
    if (radius.tl) {
        ctx.moveTo(x + radius.tl, y);
    } else {
        ctx.moveTo(x, y);
    }

    if (radius.tr) {
        ctx.lineTo(x + width - radius.tr, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius.tr);
    } else {
        ctx.lineTo(x + width, y);
    }

    if (radius.br) {
        ctx.lineTo(x + width, y + height - radius.br);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius.br, y + height);
    } else {
        ctx.lineTo(x + width, y + height);
    }

    if (radius.bl) {
        ctx.lineTo(x + radius.bl, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius.bl);
    } else {
        ctx.lineTo(x, y + height);
    }
    
    if (radius.tl) {
        ctx.lineTo(x, y + radius.tl);
        ctx.quadraticCurveTo(x, y, x + radius.tl, y);
    } else {
        ctx.lineTo(x, y);
    }

    ctx.closePath();
    if (stroke) {
        ctx.stroke();
    }
    if (fill) {
        ctx.fill();
    }
}

exports.bline = {
    name: "Line on the bottom",
    draw(ctx, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        ctx.fillRect(0, h-2, w / 100 * perc, 1)
    }
}

exports.tline = {
    name: "Line on the top",
    draw(ctx, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        ctx.fillRect(0, 1, w / 100 * perc, 1)
    }
}

exports.bar = {
    name: "Simple Bar",
    draw(ctx, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        ctx.fillRect(0, 0, w / 100 * perc, h)
    }
}

exports.rbar = {
    name: "Bar rounded on the right",
    draw(ctx, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        roundRect(ctx, 0, 0, w / 100 * perc, h, { tr: 8, br: 8 }, true, false)
    }
}

exports.fbar = {
    name: "Bar rounded on all corners",
    draw(ctx, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        roundRect(ctx, 0, 0, w / 100 * perc, h, 8, true, false)
    }
}

exports.transparent = {
    name: "Transparent (hide)",
    draw() { }
}

});
$_mod.installed("icoparse$1.0.0", "color", "1.0.3");
$_mod.main("/color$1.0.3", "");
$_mod.installed("color$1.0.3", "color-string", "1.5.2");
$_mod.main("/color-string$1.5.2", "");
$_mod.installed("color-string$1.5.2", "color-name", "1.1.2");
$_mod.main("/color-name$1.1.2", "");
$_mod.def("/color-name$1.1.2/index", function(require, exports, module, __filename, __dirname) { module.exports = {
	"aliceblue": [240, 248, 255],
	"antiquewhite": [250, 235, 215],
	"aqua": [0, 255, 255],
	"aquamarine": [127, 255, 212],
	"azure": [240, 255, 255],
	"beige": [245, 245, 220],
	"bisque": [255, 228, 196],
	"black": [0, 0, 0],
	"blanchedalmond": [255, 235, 205],
	"blue": [0, 0, 255],
	"blueviolet": [138, 43, 226],
	"brown": [165, 42, 42],
	"burlywood": [222, 184, 135],
	"cadetblue": [95, 158, 160],
	"chartreuse": [127, 255, 0],
	"chocolate": [210, 105, 30],
	"coral": [255, 127, 80],
	"cornflowerblue": [100, 149, 237],
	"cornsilk": [255, 248, 220],
	"crimson": [220, 20, 60],
	"cyan": [0, 255, 255],
	"darkblue": [0, 0, 139],
	"darkcyan": [0, 139, 139],
	"darkgoldenrod": [184, 134, 11],
	"darkgray": [169, 169, 169],
	"darkgreen": [0, 100, 0],
	"darkgrey": [169, 169, 169],
	"darkkhaki": [189, 183, 107],
	"darkmagenta": [139, 0, 139],
	"darkolivegreen": [85, 107, 47],
	"darkorange": [255, 140, 0],
	"darkorchid": [153, 50, 204],
	"darkred": [139, 0, 0],
	"darksalmon": [233, 150, 122],
	"darkseagreen": [143, 188, 143],
	"darkslateblue": [72, 61, 139],
	"darkslategray": [47, 79, 79],
	"darkslategrey": [47, 79, 79],
	"darkturquoise": [0, 206, 209],
	"darkviolet": [148, 0, 211],
	"deeppink": [255, 20, 147],
	"deepskyblue": [0, 191, 255],
	"dimgray": [105, 105, 105],
	"dimgrey": [105, 105, 105],
	"dodgerblue": [30, 144, 255],
	"firebrick": [178, 34, 34],
	"floralwhite": [255, 250, 240],
	"forestgreen": [34, 139, 34],
	"fuchsia": [255, 0, 255],
	"gainsboro": [220, 220, 220],
	"ghostwhite": [248, 248, 255],
	"gold": [255, 215, 0],
	"goldenrod": [218, 165, 32],
	"gray": [128, 128, 128],
	"green": [0, 128, 0],
	"greenyellow": [173, 255, 47],
	"grey": [128, 128, 128],
	"honeydew": [240, 255, 240],
	"hotpink": [255, 105, 180],
	"indianred": [205, 92, 92],
	"indigo": [75, 0, 130],
	"ivory": [255, 255, 240],
	"khaki": [240, 230, 140],
	"lavender": [230, 230, 250],
	"lavenderblush": [255, 240, 245],
	"lawngreen": [124, 252, 0],
	"lemonchiffon": [255, 250, 205],
	"lightblue": [173, 216, 230],
	"lightcoral": [240, 128, 128],
	"lightcyan": [224, 255, 255],
	"lightgoldenrodyellow": [250, 250, 210],
	"lightgray": [211, 211, 211],
	"lightgreen": [144, 238, 144],
	"lightgrey": [211, 211, 211],
	"lightpink": [255, 182, 193],
	"lightsalmon": [255, 160, 122],
	"lightseagreen": [32, 178, 170],
	"lightskyblue": [135, 206, 250],
	"lightslategray": [119, 136, 153],
	"lightslategrey": [119, 136, 153],
	"lightsteelblue": [176, 196, 222],
	"lightyellow": [255, 255, 224],
	"lime": [0, 255, 0],
	"limegreen": [50, 205, 50],
	"linen": [250, 240, 230],
	"magenta": [255, 0, 255],
	"maroon": [128, 0, 0],
	"mediumaquamarine": [102, 205, 170],
	"mediumblue": [0, 0, 205],
	"mediumorchid": [186, 85, 211],
	"mediumpurple": [147, 112, 219],
	"mediumseagreen": [60, 179, 113],
	"mediumslateblue": [123, 104, 238],
	"mediumspringgreen": [0, 250, 154],
	"mediumturquoise": [72, 209, 204],
	"mediumvioletred": [199, 21, 133],
	"midnightblue": [25, 25, 112],
	"mintcream": [245, 255, 250],
	"mistyrose": [255, 228, 225],
	"moccasin": [255, 228, 181],
	"navajowhite": [255, 222, 173],
	"navy": [0, 0, 128],
	"oldlace": [253, 245, 230],
	"olive": [128, 128, 0],
	"olivedrab": [107, 142, 35],
	"orange": [255, 165, 0],
	"orangered": [255, 69, 0],
	"orchid": [218, 112, 214],
	"palegoldenrod": [238, 232, 170],
	"palegreen": [152, 251, 152],
	"paleturquoise": [175, 238, 238],
	"palevioletred": [219, 112, 147],
	"papayawhip": [255, 239, 213],
	"peachpuff": [255, 218, 185],
	"peru": [205, 133, 63],
	"pink": [255, 192, 203],
	"plum": [221, 160, 221],
	"powderblue": [176, 224, 230],
	"purple": [128, 0, 128],
	"rebeccapurple": [102, 51, 153],
	"red": [255, 0, 0],
	"rosybrown": [188, 143, 143],
	"royalblue": [65, 105, 225],
	"saddlebrown": [139, 69, 19],
	"salmon": [250, 128, 114],
	"sandybrown": [244, 164, 96],
	"seagreen": [46, 139, 87],
	"seashell": [255, 245, 238],
	"sienna": [160, 82, 45],
	"silver": [192, 192, 192],
	"skyblue": [135, 206, 235],
	"slateblue": [106, 90, 205],
	"slategray": [112, 128, 144],
	"slategrey": [112, 128, 144],
	"snow": [255, 250, 250],
	"springgreen": [0, 255, 127],
	"steelblue": [70, 130, 180],
	"tan": [210, 180, 140],
	"teal": [0, 128, 128],
	"thistle": [216, 191, 216],
	"tomato": [255, 99, 71],
	"turquoise": [64, 224, 208],
	"violet": [238, 130, 238],
	"wheat": [245, 222, 179],
	"white": [255, 255, 255],
	"whitesmoke": [245, 245, 245],
	"yellow": [255, 255, 0],
	"yellowgreen": [154, 205, 50]
};
});
$_mod.installed("color-string$1.5.2", "simple-swizzle", "0.2.2");
$_mod.main("/simple-swizzle$0.2.2", "");
$_mod.installed("simple-swizzle$0.2.2", "is-arrayish", "0.3.1");
$_mod.main("/is-arrayish$0.3.1", "");
$_mod.def("/is-arrayish$0.3.1/index", function(require, exports, module, __filename, __dirname) { 'use strict';

module.exports = function isArrayish(obj) {
	if (!obj || typeof obj === 'string') {
		return false;
	}

	return obj instanceof Array || Array.isArray(obj) ||
		(obj.length >= 0 && (obj.splice instanceof Function ||
			(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));
};

});
$_mod.def("/simple-swizzle$0.2.2/index", function(require, exports, module, __filename, __dirname) { 'use strict';

var isArrayish = require('/is-arrayish$0.3.1/index'/*'is-arrayish'*/);

var concat = Array.prototype.concat;
var slice = Array.prototype.slice;

var swizzle = module.exports = function swizzle(args) {
	var results = [];

	for (var i = 0, len = args.length; i < len; i++) {
		var arg = args[i];

		if (isArrayish(arg)) {
			// http://jsperf.com/javascript-array-concat-vs-push/98
			results = concat.call(results, slice.call(arg));
		} else {
			results.push(arg);
		}
	}

	return results;
};

swizzle.wrap = function (fn) {
	return function () {
		return fn(swizzle(arguments));
	};
};

});
$_mod.def("/color-string$1.5.2/index", function(require, exports, module, __filename, __dirname) { /* MIT license */
var colorNames = require('/color-name$1.1.2/index'/*'color-name'*/);
var swizzle = require('/simple-swizzle$0.2.2/index'/*'simple-swizzle'*/);

var reverseNames = {};

// create a list of reverse color names
for (var name in colorNames) {
	if (colorNames.hasOwnProperty(name)) {
		reverseNames[colorNames[name]] = name;
	}
}

var cs = module.exports = {
	to: {}
};

cs.get = function (string) {
	var prefix = string.substring(0, 3).toLowerCase();
	var val;
	var model;
	switch (prefix) {
		case 'hsl':
			val = cs.get.hsl(string);
			model = 'hsl';
			break;
		case 'hwb':
			val = cs.get.hwb(string);
			model = 'hwb';
			break;
		default:
			val = cs.get.rgb(string);
			model = 'rgb';
			break;
	}

	if (!val) {
		return null;
	}

	return {model: model, value: val};
};

cs.get.rgb = function (string) {
	if (!string) {
		return null;
	}

	var abbr = /^#([a-f0-9]{3,4})$/i;
	var hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
	var rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var keyword = /(\D+)/;

	var rgb = [0, 0, 0, 1];
	var match;
	var i;
	var hexAlpha;

	if (match = string.match(hex)) {
		hexAlpha = match[2];
		match = match[1];

		for (i = 0; i < 3; i++) {
			// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19
			var i2 = i * 2;
			rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
		}

		if (hexAlpha) {
			rgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
		}
	} else if (match = string.match(abbr)) {
		match = match[1];
		hexAlpha = match[3];

		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i] + match[i], 16);
		}

		if (hexAlpha) {
			rgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
		}
	} else if (match = string.match(rgba)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = parseInt(match[i + 1], 0);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(per)) {
		for (i = 0; i < 3; i++) {
			rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
		}

		if (match[4]) {
			rgb[3] = parseFloat(match[4]);
		}
	} else if (match = string.match(keyword)) {
		if (match[1] === 'transparent') {
			return [0, 0, 0, 0];
		}

		rgb = colorNames[match[1]];

		if (!rgb) {
			return null;
		}

		rgb[3] = 1;

		return rgb;
	} else {
		return null;
	}

	for (i = 0; i < 3; i++) {
		rgb[i] = clamp(rgb[i], 0, 255);
	}
	rgb[3] = clamp(rgb[3], 0, 1);

	return rgb;
};

cs.get.hsl = function (string) {
	if (!string) {
		return null;
	}

	var hsl = /^hsla?\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hsl);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var s = clamp(parseFloat(match[2]), 0, 100);
		var l = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);

		return [h, s, l, a];
	}

	return null;
};

cs.get.hwb = function (string) {
	if (!string) {
		return null;
	}

	var hwb = /^hwb\(\s*([+-]?\d*[\.]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/;
	var match = string.match(hwb);

	if (match) {
		var alpha = parseFloat(match[4]);
		var h = ((parseFloat(match[1]) % 360) + 360) % 360;
		var w = clamp(parseFloat(match[2]), 0, 100);
		var b = clamp(parseFloat(match[3]), 0, 100);
		var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
		return [h, w, b, a];
	}

	return null;
};

cs.to.hex = function () {
	var rgba = swizzle(arguments);

	return (
		'#' +
		hexDouble(rgba[0]) +
		hexDouble(rgba[1]) +
		hexDouble(rgba[2]) +
		(rgba[3] < 1
			? (hexDouble(Math.round(rgba[3] * 255)))
			: '')
	);
};

cs.to.rgb = function () {
	var rgba = swizzle(arguments);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'
		: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';
};

cs.to.rgb.percent = function () {
	var rgba = swizzle(arguments);

	var r = Math.round(rgba[0] / 255 * 100);
	var g = Math.round(rgba[1] / 255 * 100);
	var b = Math.round(rgba[2] / 255 * 100);

	return rgba.length < 4 || rgba[3] === 1
		? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'
		: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';
};

cs.to.hsl = function () {
	var hsla = swizzle(arguments);
	return hsla.length < 4 || hsla[3] === 1
		? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'
		: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';
};

// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
// (hwb have alpha optional & 1 is default value)
cs.to.hwb = function () {
	var hwba = swizzle(arguments);

	var a = '';
	if (hwba.length >= 4 && hwba[3] !== 1) {
		a = ', ' + hwba[3];
	}

	return 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';
};

cs.to.keyword = function (rgb) {
	return reverseNames[rgb.slice(0, 3)];
};

// helpers
function clamp(num, min, max) {
	return Math.min(Math.max(min, num), max);
}

function hexDouble(num) {
	var str = num.toString(16).toUpperCase();
	return (str.length < 2) ? '0' + str : str;
}

});
$_mod.installed("color$1.0.3", "color-convert", "1.9.0");
$_mod.main("/color-convert$1.9.0", "");
$_mod.installed("color-convert$1.9.0", "color-name", "1.1.2");
$_mod.def("/color-convert$1.9.0/conversions", function(require, exports, module, __filename, __dirname) { /* MIT license */
var cssKeywords = require('/color-name$1.1.2/index'/*'color-name'*/);

// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)

var reverseKeywords = {};
for (var key in cssKeywords) {
	if (cssKeywords.hasOwnProperty(key)) {
		reverseKeywords[cssKeywords[key]] = key;
	}
}

var convert = module.exports = {
	rgb: {channels: 3, labels: 'rgb'},
	hsl: {channels: 3, labels: 'hsl'},
	hsv: {channels: 3, labels: 'hsv'},
	hwb: {channels: 3, labels: 'hwb'},
	cmyk: {channels: 4, labels: 'cmyk'},
	xyz: {channels: 3, labels: 'xyz'},
	lab: {channels: 3, labels: 'lab'},
	lch: {channels: 3, labels: 'lch'},
	hex: {channels: 1, labels: ['hex']},
	keyword: {channels: 1, labels: ['keyword']},
	ansi16: {channels: 1, labels: ['ansi16']},
	ansi256: {channels: 1, labels: ['ansi256']},
	hcg: {channels: 3, labels: ['h', 'c', 'g']},
	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
	gray: {channels: 1, labels: ['gray']}
};

// hide .channels and .labels properties
for (var model in convert) {
	if (convert.hasOwnProperty(model)) {
		if (!('channels' in convert[model])) {
			throw new Error('missing channels property: ' + model);
		}

		if (!('labels' in convert[model])) {
			throw new Error('missing channel labels property: ' + model);
		}

		if (convert[model].labels.length !== convert[model].channels) {
			throw new Error('channel and label counts mismatch: ' + model);
		}

		var channels = convert[model].channels;
		var labels = convert[model].labels;
		delete convert[model].channels;
		delete convert[model].labels;
		Object.defineProperty(convert[model], 'channels', {value: channels});
		Object.defineProperty(convert[model], 'labels', {value: labels});
	}
}

convert.rgb.hsl = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var l;

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	l = (min + max) / 2;

	if (max === min) {
		s = 0;
	} else if (l <= 0.5) {
		s = delta / (max + min);
	} else {
		s = delta / (2 - max - min);
	}

	return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var min = Math.min(r, g, b);
	var max = Math.max(r, g, b);
	var delta = max - min;
	var h;
	var s;
	var v;

	if (max === 0) {
		s = 0;
	} else {
		s = (delta / max * 1000) / 10;
	}

	if (max === min) {
		h = 0;
	} else if (r === max) {
		h = (g - b) / delta;
	} else if (g === max) {
		h = 2 + (b - r) / delta;
	} else if (b === max) {
		h = 4 + (r - g) / delta;
	}

	h = Math.min(h * 60, 360);

	if (h < 0) {
		h += 360;
	}

	v = ((max / 255) * 1000) / 10;

	return [h, s, v];
};

convert.rgb.hwb = function (rgb) {
	var r = rgb[0];
	var g = rgb[1];
	var b = rgb[2];
	var h = convert.rgb.hsl(rgb)[0];
	var w = 1 / 255 * Math.min(r, Math.min(g, b));

	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

	return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var c;
	var m;
	var y;
	var k;

	k = Math.min(1 - r, 1 - g, 1 - b);
	c = (1 - r - k) / (1 - k) || 0;
	m = (1 - g - k) / (1 - k) || 0;
	y = (1 - b - k) / (1 - k) || 0;

	return [c * 100, m * 100, y * 100, k * 100];
};

/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */
function comparativeDistance(x, y) {
	return (
		Math.pow(x[0] - y[0], 2) +
		Math.pow(x[1] - y[1], 2) +
		Math.pow(x[2] - y[2], 2)
	);
}

convert.rgb.keyword = function (rgb) {
	var reversed = reverseKeywords[rgb];
	if (reversed) {
		return reversed;
	}

	var currentClosestDistance = Infinity;
	var currentClosestKeyword;

	for (var keyword in cssKeywords) {
		if (cssKeywords.hasOwnProperty(keyword)) {
			var value = cssKeywords[keyword];

			// Compute comparative distance
			var distance = comparativeDistance(rgb, value);

			// Check if its less, if so set as closest
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
	}

	return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
	return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;

	// assume sRGB
	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

	return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
	var xyz = convert.rgb.xyz(rgb);
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
	var h = hsl[0] / 360;
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var t1;
	var t2;
	var t3;
	var rgb;
	var val;

	if (s === 0) {
		val = l * 255;
		return [val, val, val];
	}

	if (l < 0.5) {
		t2 = l * (1 + s);
	} else {
		t2 = l + s - l * s;
	}

	t1 = 2 * l - t2;

	rgb = [0, 0, 0];
	for (var i = 0; i < 3; i++) {
		t3 = h + 1 / 3 * -(i - 1);
		if (t3 < 0) {
			t3++;
		}
		if (t3 > 1) {
			t3--;
		}

		if (6 * t3 < 1) {
			val = t1 + (t2 - t1) * 6 * t3;
		} else if (2 * t3 < 1) {
			val = t2;
		} else if (3 * t3 < 2) {
			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		} else {
			val = t1;
		}

		rgb[i] = val * 255;
	}

	return rgb;
};

convert.hsl.hsv = function (hsl) {
	var h = hsl[0];
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var smin = s;
	var lmin = Math.max(l, 0.01);
	var sv;
	var v;

	l *= 2;
	s *= (l <= 1) ? l : 2 - l;
	smin *= lmin <= 1 ? lmin : 2 - lmin;
	v = (l + s) / 2;
	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

	return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
	var h = hsv[0] / 60;
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var hi = Math.floor(h) % 6;

	var f = h - Math.floor(h);
	var p = 255 * v * (1 - s);
	var q = 255 * v * (1 - (s * f));
	var t = 255 * v * (1 - (s * (1 - f)));
	v *= 255;

	switch (hi) {
		case 0:
			return [v, t, p];
		case 1:
			return [q, v, p];
		case 2:
			return [p, v, t];
		case 3:
			return [p, q, v];
		case 4:
			return [t, p, v];
		case 5:
			return [v, p, q];
	}
};

convert.hsv.hsl = function (hsv) {
	var h = hsv[0];
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;
	var vmin = Math.max(v, 0.01);
	var lmin;
	var sl;
	var l;

	l = (2 - s) * v;
	lmin = (2 - s) * vmin;
	sl = s * vmin;
	sl /= (lmin <= 1) ? lmin : 2 - lmin;
	sl = sl || 0;
	l /= 2;

	return [h, sl * 100, l * 100];
};

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function (hwb) {
	var h = hwb[0] / 360;
	var wh = hwb[1] / 100;
	var bl = hwb[2] / 100;
	var ratio = wh + bl;
	var i;
	var v;
	var f;
	var n;

	// wh + bl cant be > 1
	if (ratio > 1) {
		wh /= ratio;
		bl /= ratio;
	}

	i = Math.floor(6 * h);
	v = 1 - bl;
	f = 6 * h - i;

	if ((i & 0x01) !== 0) {
		f = 1 - f;
	}

	n = wh + f * (v - wh); // linear interpolation

	var r;
	var g;
	var b;
	switch (i) {
		default:
		case 6:
		case 0: r = v; g = n; b = wh; break;
		case 1: r = n; g = v; b = wh; break;
		case 2: r = wh; g = v; b = n; break;
		case 3: r = wh; g = n; b = v; break;
		case 4: r = n; g = wh; b = v; break;
		case 5: r = v; g = wh; b = n; break;
	}

	return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
	var c = cmyk[0] / 100;
	var m = cmyk[1] / 100;
	var y = cmyk[2] / 100;
	var k = cmyk[3] / 100;
	var r;
	var g;
	var b;

	r = 1 - Math.min(1, c * (1 - k) + k);
	g = 1 - Math.min(1, m * (1 - k) + k);
	b = 1 - Math.min(1, y * (1 - k) + k);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
	var x = xyz[0] / 100;
	var y = xyz[1] / 100;
	var z = xyz[2] / 100;
	var r;
	var g;
	var b;

	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

	// assume sRGB
	r = r > 0.0031308
		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
		: r * 12.92;

	g = g > 0.0031308
		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
		: g * 12.92;

	b = b > 0.0031308
		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
		: b * 12.92;

	r = Math.min(Math.max(0, r), 1);
	g = Math.min(Math.max(0, g), 1);
	b = Math.min(Math.max(0, b), 1);

	return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
	var x = xyz[0];
	var y = xyz[1];
	var z = xyz[2];
	var l;
	var a;
	var b;

	x /= 95.047;
	y /= 100;
	z /= 108.883;

	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

	l = (116 * y) - 16;
	a = 500 * (x - y);
	b = 200 * (y - z);

	return [l, a, b];
};

convert.lab.xyz = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var x;
	var y;
	var z;

	y = (l + 16) / 116;
	x = a / 500 + y;
	z = y - b / 200;

	var y2 = Math.pow(y, 3);
	var x2 = Math.pow(x, 3);
	var z2 = Math.pow(z, 3);
	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

	x *= 95.047;
	y *= 100;
	z *= 108.883;

	return [x, y, z];
};

convert.lab.lch = function (lab) {
	var l = lab[0];
	var a = lab[1];
	var b = lab[2];
	var hr;
	var h;
	var c;

	hr = Math.atan2(b, a);
	h = hr * 360 / 2 / Math.PI;

	if (h < 0) {
		h += 360;
	}

	c = Math.sqrt(a * a + b * b);

	return [l, c, h];
};

convert.lch.lab = function (lch) {
	var l = lch[0];
	var c = lch[1];
	var h = lch[2];
	var a;
	var b;
	var hr;

	hr = h / 360 * 2 * Math.PI;
	a = c * Math.cos(hr);
	b = c * Math.sin(hr);

	return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];
	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

	value = Math.round(value / 50);

	if (value === 0) {
		return 30;
	}

	var ansi = 30
		+ ((Math.round(b / 255) << 2)
		| (Math.round(g / 255) << 1)
		| Math.round(r / 255));

	if (value === 2) {
		ansi += 60;
	}

	return ansi;
};

convert.hsv.ansi16 = function (args) {
	// optimization here; we already know the value and don't need to get
	// it converted for us.
	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
	var r = args[0];
	var g = args[1];
	var b = args[2];

	// we use the extended greyscale palette here, with the exception of
	// black and white. normal palette only has 4 greyscale shades.
	if (r === g && g === b) {
		if (r < 8) {
			return 16;
		}

		if (r > 248) {
			return 231;
		}

		return Math.round(((r - 8) / 247) * 24) + 232;
	}

	var ansi = 16
		+ (36 * Math.round(r / 255 * 5))
		+ (6 * Math.round(g / 255 * 5))
		+ Math.round(b / 255 * 5);

	return ansi;
};

convert.ansi16.rgb = function (args) {
	var color = args % 10;

	// handle greyscale
	if (color === 0 || color === 7) {
		if (args > 50) {
			color += 3.5;
		}

		color = color / 10.5 * 255;

		return [color, color, color];
	}

	var mult = (~~(args > 50) + 1) * 0.5;
	var r = ((color & 1) * mult) * 255;
	var g = (((color >> 1) & 1) * mult) * 255;
	var b = (((color >> 2) & 1) * mult) * 255;

	return [r, g, b];
};

convert.ansi256.rgb = function (args) {
	// handle greyscale
	if (args >= 232) {
		var c = (args - 232) * 10 + 8;
		return [c, c, c];
	}

	args -= 16;

	var rem;
	var r = Math.floor(args / 36) / 5 * 255;
	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
	var b = (rem % 6) / 5 * 255;

	return [r, g, b];
};

convert.rgb.hex = function (args) {
	var integer = ((Math.round(args[0]) & 0xFF) << 16)
		+ ((Math.round(args[1]) & 0xFF) << 8)
		+ (Math.round(args[2]) & 0xFF);

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
	if (!match) {
		return [0, 0, 0];
	}

	var colorString = match[0];

	if (match[0].length === 3) {
		colorString = colorString.split('').map(function (char) {
			return char + char;
		}).join('');
	}

	var integer = parseInt(colorString, 16);
	var r = (integer >> 16) & 0xFF;
	var g = (integer >> 8) & 0xFF;
	var b = integer & 0xFF;

	return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
	var r = rgb[0] / 255;
	var g = rgb[1] / 255;
	var b = rgb[2] / 255;
	var max = Math.max(Math.max(r, g), b);
	var min = Math.min(Math.min(r, g), b);
	var chroma = (max - min);
	var grayscale;
	var hue;

	if (chroma < 1) {
		grayscale = min / (1 - chroma);
	} else {
		grayscale = 0;
	}

	if (chroma <= 0) {
		hue = 0;
	} else
	if (max === r) {
		hue = ((g - b) / chroma) % 6;
	} else
	if (max === g) {
		hue = 2 + (b - r) / chroma;
	} else {
		hue = 4 + (r - g) / chroma + 4;
	}

	hue /= 6;
	hue %= 1;

	return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
	var s = hsl[1] / 100;
	var l = hsl[2] / 100;
	var c = 1;
	var f = 0;

	if (l < 0.5) {
		c = 2.0 * s * l;
	} else {
		c = 2.0 * s * (1.0 - l);
	}

	if (c < 1.0) {
		f = (l - 0.5 * c) / (1.0 - c);
	}

	return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
	var s = hsv[1] / 100;
	var v = hsv[2] / 100;

	var c = s * v;
	var f = 0;

	if (c < 1.0) {
		f = (v - c) / (1 - c);
	}

	return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
	var h = hcg[0] / 360;
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	if (c === 0.0) {
		return [g * 255, g * 255, g * 255];
	}

	var pure = [0, 0, 0];
	var hi = (h % 1) * 6;
	var v = hi % 1;
	var w = 1 - v;
	var mg = 0;

	switch (Math.floor(hi)) {
		case 0:
			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
		case 1:
			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
		case 2:
			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
		case 3:
			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
		case 4:
			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
		default:
			pure[0] = 1; pure[1] = 0; pure[2] = w;
	}

	mg = (1.0 - c) * g;

	return [
		(c * pure[0] + mg) * 255,
		(c * pure[1] + mg) * 255,
		(c * pure[2] + mg) * 255
	];
};

convert.hcg.hsv = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var v = c + g * (1.0 - c);
	var f = 0;

	if (v > 0.0) {
		f = c / v;
	}

	return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;

	var l = g * (1.0 - c) + 0.5 * c;
	var s = 0;

	if (l > 0.0 && l < 0.5) {
		s = c / (2 * l);
	} else
	if (l >= 0.5 && l < 1.0) {
		s = c / (2 * (1 - l));
	}

	return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
	var c = hcg[1] / 100;
	var g = hcg[2] / 100;
	var v = c + g * (1.0 - c);
	return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
	var w = hwb[1] / 100;
	var b = hwb[2] / 100;
	var v = 1 - b;
	var c = v - w;
	var g = 0;

	if (c < 1) {
		g = (v - c) / (1 - c);
	}

	return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
};

convert.rgb.apple = function (rgb) {
	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
};

convert.gray.rgb = function (args) {
	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
	return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
	return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
	return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
	return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
	var integer = (val << 16) + (val << 8) + val;

	var string = integer.toString(16).toUpperCase();
	return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
	return [val / 255 * 100];
};

});
$_mod.def("/color-convert$1.9.0/route", function(require, exports, module, __filename, __dirname) { var conversions = require('/color-convert$1.9.0/conversions'/*'./conversions'*/);

/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/

// https://jsperf.com/object-keys-vs-for-in-with-closure/3
var models = Object.keys(conversions);

function buildGraph() {
	var graph = {};

	for (var len = models.length, i = 0; i < len; i++) {
		graph[models[i]] = {
			// http://jsperf.com/1-vs-infinity
			// micro-opt, but this is simple.
			distance: -1,
			parent: null
		};
	}

	return graph;
}

// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
	var graph = buildGraph();
	var queue = [fromModel]; // unshift -> queue -> pop

	graph[fromModel].distance = 0;

	while (queue.length) {
		var current = queue.pop();
		var adjacents = Object.keys(conversions[current]);

		for (var len = adjacents.length, i = 0; i < len; i++) {
			var adjacent = adjacents[i];
			var node = graph[adjacent];

			if (node.distance === -1) {
				node.distance = graph[current].distance + 1;
				node.parent = current;
				queue.unshift(adjacent);
			}
		}
	}

	return graph;
}

function link(from, to) {
	return function (args) {
		return to(from(args));
	};
}

function wrapConversion(toModel, graph) {
	var path = [graph[toModel].parent, toModel];
	var fn = conversions[graph[toModel].parent][toModel];

	var cur = graph[toModel].parent;
	while (graph[cur].parent) {
		path.unshift(graph[cur].parent);
		fn = link(conversions[graph[cur].parent][cur], fn);
		cur = graph[cur].parent;
	}

	fn.conversion = path;
	return fn;
}

module.exports = function (fromModel) {
	var graph = deriveBFS(fromModel);
	var conversion = {};

	var models = Object.keys(graph);
	for (var len = models.length, i = 0; i < len; i++) {
		var toModel = models[i];
		var node = graph[toModel];

		if (node.parent === null) {
			// no possible conversion, or this node is the source model.
			continue;
		}

		conversion[toModel] = wrapConversion(toModel, graph);
	}

	return conversion;
};


});
$_mod.def("/color-convert$1.9.0/index", function(require, exports, module, __filename, __dirname) { var conversions = require('/color-convert$1.9.0/conversions'/*'./conversions'*/);
var route = require('/color-convert$1.9.0/route'/*'./route'*/);

var convert = {};

var models = Object.keys(conversions);

function wrapRaw(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		return fn(args);
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

function wrapRounded(fn) {
	var wrappedFn = function (args) {
		if (args === undefined || args === null) {
			return args;
		}

		if (arguments.length > 1) {
			args = Array.prototype.slice.call(arguments);
		}

		var result = fn(args);

		// we're assuming the result is an array here.
		// see notice in conversions.js; don't use box types
		// in conversion functions.
		if (typeof result === 'object') {
			for (var len = result.length, i = 0; i < len; i++) {
				result[i] = Math.round(result[i]);
			}
		}

		return result;
	};

	// preserve .conversion property if there is one
	if ('conversion' in fn) {
		wrappedFn.conversion = fn.conversion;
	}

	return wrappedFn;
}

models.forEach(function (fromModel) {
	convert[fromModel] = {};

	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

	var routes = route(fromModel);
	var routeModels = Object.keys(routes);

	routeModels.forEach(function (toModel) {
		var fn = routes[toModel];

		convert[fromModel][toModel] = wrapRounded(fn);
		convert[fromModel][toModel].raw = wrapRaw(fn);
	});
});

module.exports = convert;

});
$_mod.def("/color$1.0.3/index", function(require, exports, module, __filename, __dirname) { 'use strict';

var colorString = require('/color-string$1.5.2/index'/*'color-string'*/);
var convert = require('/color-convert$1.9.0/index'/*'color-convert'*/);

var _slice = [].slice;

var skippedModels = [
	// to be honest, I don't really feel like keyword belongs in color convert, but eh.
	'keyword',

	// gray conflicts with some method names, and has its own method defined.
	'gray',

	// shouldn't really be in color-convert either...
	'hex'
];

var hashedModelKeys = {};
Object.keys(convert).forEach(function (model) {
	hashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;
});

var limiters = {};

function Color(obj, model) {
	if (!(this instanceof Color)) {
		return new Color(obj, model);
	}

	if (model && model in skippedModels) {
		model = null;
	}

	if (model && !(model in convert)) {
		throw new Error('Unknown model: ' + model);
	}

	var i;
	var channels;

	if (!obj) {
		this.model = 'rgb';
		this.color = [0, 0, 0];
		this.valpha = 1;
	} else if (obj instanceof Color) {
		this.model = obj.model;
		this.color = obj.color.slice();
		this.valpha = obj.valpha;
	} else if (typeof obj === 'string') {
		var result = colorString.get(obj);
		if (result === null) {
			throw new Error('Unable to parse color from string: ' + obj);
		}

		this.model = result.model;
		channels = convert[this.model].channels;
		this.color = result.value.slice(0, channels);
		this.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;
	} else if (obj.length) {
		this.model = model || 'rgb';
		channels = convert[this.model].channels;
		var newArr = _slice.call(obj, 0, channels);
		this.color = zeroArray(newArr, channels);
		this.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;
	} else if (typeof obj === 'number') {
		// this is always RGB - can be converted later on.
		obj &= 0xFFFFFF;
		this.model = 'rgb';
		this.color = [
			(obj >> 16) & 0xFF,
			(obj >> 8) & 0xFF,
			obj & 0xFF
		];
		this.valpha = 1;
	} else {
		this.valpha = 1;

		var keys = Object.keys(obj);
		if ('alpha' in obj) {
			keys.splice(keys.indexOf('alpha'), 1);
			this.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;
		}

		var hashedKeys = keys.sort().join('');
		if (!(hashedKeys in hashedModelKeys)) {
			throw new Error('Unable to parse color from object: ' + JSON.stringify(obj));
		}

		this.model = hashedModelKeys[hashedKeys];

		var labels = convert[this.model].labels;
		var color = [];
		for (i = 0; i < labels.length; i++) {
			color.push(obj[labels[i]]);
		}

		this.color = zeroArray(color);
	}

	// perform limitations (clamping, etc.)
	if (limiters[this.model]) {
		channels = convert[this.model].channels;
		for (i = 0; i < channels; i++) {
			var limit = limiters[this.model][i];
			if (limit) {
				this.color[i] = limit(this.color[i]);
			}
		}
	}

	this.valpha = Math.max(0, Math.min(1, this.valpha));

	if (Object.freeze) {
		Object.freeze(this);
	}
}

Color.prototype = {
	toString: function () {
		return this.string();
	},

	toJSON: function () {
		return this[this.model]();
	},

	string: function (places) {
		var self = this.model in colorString.to ? this : this.rgb();
		self = self.round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to[self.model](args);
	},

	percentString: function (places) {
		var self = this.rgb().round(typeof places === 'number' ? places : 1);
		var args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);
		return colorString.to.rgb.percent(args);
	},

	array: function () {
		return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
	},

	object: function () {
		var result = {};
		var channels = convert[this.model].channels;
		var labels = convert[this.model].labels;

		for (var i = 0; i < channels; i++) {
			result[labels[i]] = this.color[i];
		}

		if (this.valpha !== 1) {
			result.alpha = this.valpha;
		}

		return result;
	},

	unitArray: function () {
		var rgb = this.rgb().color;
		rgb[0] /= 255;
		rgb[1] /= 255;
		rgb[2] /= 255;

		if (this.valpha !== 1) {
			rgb.push(this.valpha);
		}

		return rgb;
	},

	unitObject: function () {
		var rgb = this.rgb().object();
		rgb.r /= 255;
		rgb.g /= 255;
		rgb.b /= 255;

		if (this.valpha !== 1) {
			rgb.alpha = this.valpha;
		}

		return rgb;
	},

	round: function (places) {
		places = Math.max(places || 0, 0);
		return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
	},

	alpha: function (val) {
		if (arguments.length) {
			return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
		}

		return this.valpha;
	},

	// rgb
	red: getset('rgb', 0, maxfn(255)),
	green: getset('rgb', 1, maxfn(255)),
	blue: getset('rgb', 2, maxfn(255)),

	hue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style

	saturationl: getset('hsl', 1, maxfn(100)),
	lightness: getset('hsl', 2, maxfn(100)),

	saturationv: getset('hsv', 1, maxfn(100)),
	value: getset('hsv', 2, maxfn(100)),

	chroma: getset('hcg', 1, maxfn(100)),
	gray: getset('hcg', 2, maxfn(100)),

	white: getset('hwb', 1, maxfn(100)),
	wblack: getset('hwb', 2, maxfn(100)),

	cyan: getset('cmyk', 0, maxfn(100)),
	magenta: getset('cmyk', 1, maxfn(100)),
	yellow: getset('cmyk', 2, maxfn(100)),
	black: getset('cmyk', 3, maxfn(100)),

	x: getset('xyz', 0, maxfn(100)),
	y: getset('xyz', 1, maxfn(100)),
	z: getset('xyz', 2, maxfn(100)),

	l: getset('lab', 0, maxfn(100)),
	a: getset('lab', 1),
	b: getset('lab', 2),

	keyword: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return convert[this.model].keyword(this.color);
	},

	hex: function (val) {
		if (arguments.length) {
			return new Color(val);
		}

		return colorString.to.hex(this.rgb().round().color);
	},

	rgbNumber: function () {
		var rgb = this.rgb().color;
		return ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);
	},

	luminosity: function () {
		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
		var rgb = this.rgb().color;

		var lum = [];
		for (var i = 0; i < rgb.length; i++) {
			var chan = rgb[i] / 255;
			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
		}

		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
	},

	contrast: function (color2) {
		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
		var lum1 = this.luminosity();
		var lum2 = color2.luminosity();

		if (lum1 > lum2) {
			return (lum1 + 0.05) / (lum2 + 0.05);
		}

		return (lum2 + 0.05) / (lum1 + 0.05);
	},

	level: function (color2) {
		var contrastRatio = this.contrast(color2);
		if (contrastRatio >= 7.1) {
			return 'AAA';
		}

		return (contrastRatio >= 4.5) ? 'AA' : '';
	},

	dark: function () {
		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
		var rgb = this.rgb().color;
		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
		return yiq < 128;
	},

	light: function () {
		return !this.dark();
	},

	negate: function () {
		var rgb = this.rgb();
		for (var i = 0; i < 3; i++) {
			rgb.color[i] = 255 - rgb.color[i];
		}
		return rgb;
	},

	lighten: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] += hsl.color[2] * ratio;
		return hsl;
	},

	darken: function (ratio) {
		var hsl = this.hsl();
		hsl.color[2] -= hsl.color[2] * ratio;
		return hsl;
	},

	saturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] += hsl.color[1] * ratio;
		return hsl;
	},

	desaturate: function (ratio) {
		var hsl = this.hsl();
		hsl.color[1] -= hsl.color[1] * ratio;
		return hsl;
	},

	whiten: function (ratio) {
		var hwb = this.hwb();
		hwb.color[1] += hwb.color[1] * ratio;
		return hwb;
	},

	blacken: function (ratio) {
		var hwb = this.hwb();
		hwb.color[2] += hwb.color[2] * ratio;
		return hwb;
	},

	grayscale: function () {
		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
		var rgb = this.rgb().color;
		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
		return Color.rgb(val, val, val);
	},

	fade: function (ratio) {
		return this.alpha(this.valpha - (this.valpha * ratio));
	},

	opaquer: function (ratio) {
		return this.alpha(this.valpha + (this.valpha * ratio));
	},

	rotate: function (degrees) {
		var hsl = this.hsl();
		var hue = hsl.color[0];
		hue = (hue + degrees) % 360;
		hue = hue < 0 ? 360 + hue : hue;
		hsl.color[0] = hue;
		return hsl;
	},

	mix: function (mixinColor, weight) {
		// ported from sass implementation in C
		// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
		var color1 = this.rgb();
		var color2 = mixinColor.rgb();
		var p = weight === undefined ? 0.5 : weight;

		var w = 2 * p - 1;
		var a = color1.alpha() - color2.alpha();

		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
		var w2 = 1 - w1;

		return Color.rgb(
				w1 * color1.red() + w2 * color2.red(),
				w1 * color1.green() + w2 * color2.green(),
				w1 * color1.blue() + w2 * color2.blue(),
				color1.alpha() * p + color2.alpha() * (1 - p));
	}
};

// model conversion methods and static constructors
Object.keys(convert).forEach(function (model) {
	if (skippedModels.indexOf(model) !== -1) {
		return;
	}

	var channels = convert[model].channels;

	// conversion methods
	Color.prototype[model] = function () {
		if (this.model === model) {
			return new Color(this);
		}

		if (arguments.length) {
			return new Color(arguments, model);
		}

		var newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;
		return new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);
	};

	// 'static' construction methods
	Color[model] = function (color) {
		if (typeof color === 'number') {
			color = zeroArray(_slice.call(arguments), channels);
		}
		return new Color(color, model);
	};
});

function roundTo(num, places) {
	return Number(num.toFixed(places));
}

function roundToPlace(places) {
	return function (num) {
		return roundTo(num, places);
	};
}

function getset(model, channel, modifier) {
	model = Array.isArray(model) ? model : [model];

	model.forEach(function (m) {
		(limiters[m] || (limiters[m] = []))[channel] = modifier;
	});

	model = model[0];

	return function (val) {
		var result;

		if (arguments.length) {
			if (modifier) {
				val = modifier(val);
			}

			result = this[model]();
			result.color[channel] = val;
			return result;
		}

		result = this[model]().color[channel];
		if (modifier) {
			result = modifier(result);
		}

		return result;
	};
}

function maxfn(max) {
	return function (v) {
		return Math.max(0, Math.min(max, v));
	};
}

function assertArray(val) {
	return Array.isArray(val) ? val : [val];
}

function zeroArray(arr, length) {
	for (var i = 0; i < length; i++) {
		if (typeof arr[i] !== 'number') {
			arr[i] = 0;
		}
	}

	return arr;
}

module.exports = Color;

});
$_mod.def("/icoparse$1.0.0/src/ui/meter/texture", function(require, exports, module, __filename, __dirname) { "use strict"

const Color = require('/color$1.0.3/index'/*"color"*/)

exports.plain = {
    name: "Plain Color",
    getTexture(ctx, color) {
        ctx.fillStyle = color
    }
}

exports.stripes = {
    name: "Striped",
    getTexture(ctx, color, cbt) {
        const tc = document.createElement("canvas")
        tc.width = 20
        tc.height = 30

        const tctx = tc.getContext("2d")
        tctx.fillStyle = Color(color).lighten(0.4).string()
        tctx.strokeStyle = Color(color).desaturate(0.6).string()
        tctx.lineWidth = 8

        tctx.fillRect(0, 0, tc.width, tc.height)

        tctx.beginPath()
        tctx.moveTo(tc.width, 0)
        tctx.lineTo(0, tc.height)

        tctx.moveTo(tc.width, -tc.height)
        tctx.lineTo(-tc.width, tc.height)

        tctx.moveTo(tc.width * 2, 0)
        tctx.lineTo(0, tc.height * 2)
        tctx.stroke()

        ctx.fillStyle = ctx.createPattern(tc, "repeat")
    }
}

exports.bubbles = {
    name: "Bubbles",
    getTexture(ctx, color, cbt) {
        const tc = document.createElement("canvas")
        tc.width = 30
        tc.height = 30

        const tctx = tc.getContext("2d")
        tctx.fillStyle = Color(color).desaturate(0.6).string()
        tctx.fillRect(0, 0, tc.width, tc.height)

        tctx.beginPath()
        tctx.arc(10, 10, 7, 0, 2 * Math.PI, false);
        tctx.arc(25, 20, 4, 0, 2 * Math.PI, false);

        tctx.fillStyle = Color(color).lighten(0.4).string()
        tctx.fill()

        ctx.fillStyle = ctx.createPattern(tc, "repeat")
    }
}

exports.vgrad = {
    name: "Vertical Gradient",
    getTexture(ctx, color, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        const grad = ctx.createLinearGradient(0, 0, 0, h)
        grad.addColorStop(0, Color(color).lighten(0.4).string())
        grad.addColorStop(1, Color(color).desaturate(0.6).string())
        ctx.fillStyle = grad
    }
}

exports.hgrad = {
    name: "Horitzontal Gradient",
    getTexture(ctx, color, cbt) {
        const w = ctx.canvas.width
        const h = ctx.canvas.height
        const perc = parseInt(cbt["damage%"])

        const grad = ctx.createLinearGradient(0, 0, w / 100 * perc, 0)
        grad.addColorStop(0, Color(color).lighten(0.4).string())
        grad.addColorStop(1, Color(color).desaturate(0.6).string())
        ctx.fillStyle = grad
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/meter/partial/color-input.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    marko_attrs0 = {
        "class": "pure-control-group"
      };

function render(input, out) {
  var data = input;

  out.e("DIV", marko_attrs0, 2)
    .e("LABEL", {
        "for": (input.prefix + " ") + input.key
      }, 1)
      .t(input.name)
    .t(" TODO: The Color ColorPicker");
}

marko_template._ = render;

});
$_mod.def("/marko$4.4.16/src/taglibs/core/include-tag", function(require, exports, module, __filename, __dirname) { 
function doInclude(input, out, throwError) {
    var target = input._target;
    var arg = input._arg || input;

    if (target) {
        if (typeof target === 'function') {
            return target(out, arg), true;
        } else if (typeof target === 'string') {
            return (target && out.text(target)), true;
        } else if (typeof target === 'object') {
            if (target.renderBody) {
                return target.renderBody(out, arg), true;
            } else if (target.renderer) {
                return target.renderer(arg, out), true;
            } else if (target.render) {
                return target.render(arg, out), true;
            } else if (target.safeHTML) {
                return out.write(target.safeHTML), true;
            } else {
                if (throwError) {
                    out.error('Invalid include target');
                }
            }
        }
    }
}

function includeTag(input, out) {
    doInclude(input, out, true);
}

includeTag.___doInclude = doInclude;

module.exports = includeTag;

});
$_mod.def("/icoparse$1.0.0/src/ui/meter/partial/settings.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    color_input_template = require('/icoparse$1.0.0/src/ui/meter/partial/color-input.marko'/*"./color-input.marko"*/),
    marko_forEachProp = require('/marko$4.4.16/src/runtime/helper-forEachProperty'/*"marko/src/runtime/helper-forEachProperty"*/),
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_loadTag = marko_helpers.t,
    include_tag = marko_loadTag(require('/marko$4.4.16/src/taglibs/core/include-tag'/*"marko/src/taglibs\\core\\include-tag"*/));

function render(input, out) {
  var data = input;

  var prefix = input.prefix || "color"

  out.be("FIELDSET");

  out.e("LEGEND", null, 1)
    .t(input.title);

  marko_forEachProp(input.colors, function(k, v) {
    include_tag({
        _target: color_input_template,
        _arg: {
            key: k,
            name: v.name,
            prefix: prefix
          }
      }, out);
  });

  out.ee();
}

marko_template._ = render;

});
$_mod.def("/icoparse$1.0.0/src/ui/meter/color", function(require, exports, module, __filename, __dirname) { "use strict"

const colorInputPartial = require('/icoparse$1.0.0/src/ui/meter/partial/color-input.marko'/*"./partial/color-input.marko"*/)
const settingsPartial = require('/icoparse$1.0.0/src/ui/meter/partial/settings.marko'/*"./partial/settings.marko"*/)
const util = require('/icoparse$1.0.0/src/util'/*"../../util"*/)

function colorRandom() {
    const rand = parseInt(Math.random() * 255)
    const hex = rand.toString(16)
    return hex.length == 2 ? hex : "0" + hex
}

const pets = {
    defaults: {
        lb: { name: "Limit break", default: "#BD10E0" },
        choco: { name: "Chocobos", default: "#444444" },
        egi: { name: "Egis and Carbuncles", default: "#2e7d32" },
        turret: { name: "Autoturrets", default: "#0097a7" },
        fairy: { name: "Fairies", default: "#7986cb" },
    },
    settings(out, args) {
        settingsPartial.render({
            title: "Pets and companions",
            colors: pets.defaults,
            prefix: "pet"
        }, out)
    },
    getColor(cbt, settings) {
        const type = util.getPetType(cbt.name)
        if (!type) return "rgba(0,0,0,0)"

        return settings.pet[type] || pets.defaults[type].default
    }
}

exports.checksum = {
    name: "By character name",

    getColor(settings, combatant) {
        var hash = 0;
        if (combatant.name.length == 0)
            return hash;
        for (var i = 0; i < str.length; i++) {
            hash = str.charCodeAt(i) + ((hash << 5) - hash);
            hash = hash & hash; // Convert to 32bit integer
        }

        return "hsl(" + (hash + 200) % 360 + ",100%,50%)"
    }
}

exports.random = {
    name: "Random (Epilepsy warning!)",
    getColor() {
        return "#" + colorRandom() + colorRandom() + colorRandom()
    }
}

exports.class = {
    name: "By job type",

    defaults: {
        tank: {
            name: "Tanks",
            default: "#364597",
        },
        heal: {
            name: "Heals",
            default: "#355b26",
        },
        dd: {
            name: "Damage Dealers",
            default: "#643434",
        },
    },

    getColor(cbt, settings) {
        const type = util.jobType[cbt.Job.toLowerCase()]
        if (!type) {
            return pets.getColor(cbt, settings)
        } else if (type !== "tank" && type !== "heal") {
            type = "dd"
        }

        if (settings.color && settings.color[type]) {
            return settings.color[type]
        }
        return exports.class.defaults[type].default
    }
}

exports.classex = {
    name: "By job type, DD split by type",

    defaults: {
        tank: {
            name: "Tanks",
            default: "#364597",
        },
        heal: {
            name: "Heals",
            default: "#355b26",
        },
        melee: {
            name: "Melees",
            default: "#864545",
        },
        range: {
            name: "Ranged",
            default: "#643434",
        },
        mage: {
            name: "Mages",
            default: "#64344c",
        }
    },

    settings(out, args) {
        settingsPartial.render({
            title: "Classes",
            colors: exports.classex.defaults,
        }, out)

        return pets.settings(out, args)
    },

    getColor(cbt, settings) {
        const type = util.jobType[cbt.Job.toLowerCase()]
        if (!type) {
            return pets.getColor(cbt, settings)
        }

        if (settings.color && settings.color[type]) {
            return settings.color[type]
        }
        return exports.classex.defaults[type].default
    }
}

exports.job = {
    name: "By job",
    defaults: {
        pld: {
            name: "Paladin",
            default: "#151c64",
        },

        war: {
            name: "Warrior",
            default: "#991717",
        },

        drk: {
            name: "Dark Knight",
            default: "#880e4f",
        },

        mnk: {
            name: "Monk",
            default: "#ff9800",
        },

        drg: {
            name: "Dragoon",
            default: "#3f51b5",
        },

        brd: {
            name: "Bard",
            default: "#9e9d24",
        },

        nin: {
            name: "Ninja",
            default: "#d32f2f",
        },

        smn: {
            name: "Summoner",
            default: "#2e7d32",
        },

        blm: {
            name: "Black Mage",
            default: "#7e57c2",
        },

        mch: {
            name: "Machinist",
            default: "#0097a7",
        },

        whm: {
            name: "White Mage",
            default: "#757575",
        },

        sch: {
            name: "Scholar",
            default: "#7986cb",
        },

        ast: {
            name: "Astrologian",
            default: "#795548",
        },

        rdm: {
            name: "Red Mage",
            default: "#D157C2",
        },

        sam: {
            name: "Samurai",
            default: "#FFC623",
        },
    },

    getColor(cbt, settings) {
        const type = util.jobType[cbt.Job.toLowerCase()]
        if (!type) {
            return pets.getColor(cbt, settings)
        }

        if (settings.color && settings.color[type]) {
            return settings.color[type]
        }
        return exports.job.defaults[type].default
    }
}

exports.custom = {
    name: "By custom definition, transparent otherwise",
    getColor() {
        return "rgba(0,0,0,0)"
    }
}
});
$_mod.def("/icoparse$1.0.0/src/ui/meter/index", function(require, exports, module, __filename, __dirname) { "use strict"

const util = require('/icoparse$1.0.0/src/util'/*"../../util"*/)

exports.styles = require('/icoparse$1.0.0/src/ui/meter/style'/*"./style"*/)
exports.textures = require('/icoparse$1.0.0/src/ui/meter/texture'/*"./texture"*/)
exports.colors = require('/icoparse$1.0.0/src/ui/meter/color'/*"./color"*/)

exports.render = function (ctx, cbt, settings) {
    ctx.canvas.width = ctx.canvas.clientWidth
    ctx.canvas.height = ctx.canvas.clientHeight

    const overwrite = Array.isArray(settings.overwrites) ? settings.overwrites.find(ow => {
        const re = new RegExp("^" + ow.search + "$", "i")
        return combatant.name.match(re)
    }) : false
    const color = overwrite? overwrite.color: exports.colors[settings.cgen].getColor(cbt, settings.color || {})

    exports.textures[settings.fill].getTexture(ctx, color, cbt)
    exports.styles[settings.style].draw(ctx, cbt)
}
});
$_mod.def("/icoparse$1.0.0/src/components/config/routes/config-route-colors/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    marko_component = {
        onCreate: function() {
          this.state = {
              meter: JSON.parse(localStorage.getItem("meter")),
              example: {
                  name: "Vanthia Orcus",
                  Job: "war"
                }
            };
        },
        onSubmit: function(ev, el) {
          ev.preventDefault();

          humane.info("Settings saved!");
        },
        onMount: function() {
          this.updatePreview();
        },
        updatePreview: function() {
          this.setState({
              meter: {
                  style: document.getElementById("style").value,
                  fill: document.getElementById("fill").value,
                  cgen: document.getElementById("cgen").value,
                  transparency: document.getElementById("transparency").value
                },
              example: {
                  name: document.getElementById("example-name").value,
                  Job: document.getElementById("example-job").value
                }
            });

          const canvas = this.getEl("preview");

          const context = canvas.getContext("2d");

          meter.render(context, Object.assign({
              "damage%": "80%"
            }, this.state.example), this.state.meter);
        }
      },
    components_helpers = require('/marko$4.4.16/src/components/helpers-browser'/*"marko/src/components/helpers"*/),
    marko_registerComponent = components_helpers.rc,
    marko_componentType = marko_registerComponent("/icoparse$1.0.0/src/components/config/routes/config-route-colors/index.marko", function() {
      return module.exports;
    }),
    marko_renderer = components_helpers.r,
    marko_defineComponent = components_helpers.c,
    util_module = require('/icoparse$1.0.0/src/util'/*"../../../../util"*/),
    jobs = util_module.jobs,
    meter = require('/icoparse$1.0.0/src/ui/meter/index'/*"../../../../ui/meter"*/),
    humane = require('/humane-js$3.2.2/humane'/*"humane-js"*/),
    marko_forEachProp = require('/marko$4.4.16/src/runtime/helper-forEachProperty'/*"marko/src/runtime/helper-forEachProperty"*/),
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_loadTag = marko_helpers.t,
    include_tag = marko_loadTag(require('/marko$4.4.16/src/taglibs/core/include-tag'/*"marko/src/taglibs\\core\\include-tag"*/)),
    marko_attrs0 = {
        "class": "form"
      },
    marko_createElement = marko_helpers.e,
    marko_const = marko_helpers.const,
    marko_const_nextId = marko_const("360f97"),
    marko_node0 = marko_createElement("DIV", {
        "class": "title"
      }, 2, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", {
          "class": "ion-paintbrush"
        }, 0)
      .t(" Colors"),
    marko_node1 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Bar Style"),
    marko_attrs1 = {
        "class": "pure-control-group"
      },
    marko_node2 = marko_createElement("LABEL", {
        "for": "style"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Choose Style"),
    marko_attrs2 = {
        id: "style",
        name: "style"
      },
    marko_attrs3 = {
        "class": "pure-control-group"
      },
    marko_node3 = marko_createElement("LABEL", {
        "for": "fill"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Choose fill method"),
    marko_attrs4 = {
        id: "fill",
        name: "fill"
      },
    marko_attrs5 = {
        "class": "pure-control-group"
      },
    marko_attrs6 = {
        "class": "pure-control-group"
      },
    marko_node4 = marko_createElement("LABEL", {
        "for": "cgen"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Choose color selection mode"),
    marko_attrs7 = {
        id: "cgen",
        name: "cgen"
      },
    marko_node5 = marko_createElement("LEGEND", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Preview"),
    marko_attrs8 = {
        "class": "pure-control-group"
      },
    marko_attrs9 = {
        "class": "pure-control-group"
      },
    marko_node6 = marko_createElement("LABEL", {
        "for": "example-job"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Example Job"),
    marko_attrs10 = {
        id: "example-job",
        name: "exampleJob"
      },
    marko_node7 = marko_createElement("DIV", {
        "class": "btnbar"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .e("BUTTON", {
          type: "submit"
        }, 1)
        .t("Save"),
    marko_node8 = marko_createElement("LABEL", {
        "for": "fill"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Choose transparency"),
    marko_node9 = marko_createElement("LABEL", {
        "for": "example-name"
      }, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Example Name");

function render(input, out, __component, component, state) {
  var data = input;

  out.be("FORM", {
      method: "post",
      "class": "content pure-form pure-form-aligned",
      id: __component.id
    }, null, 0, {
      onsubmit: __component.d("onSubmit")
    });

  out.be("DIV", marko_attrs0);

  out.n(marko_node0);

  out.be("FIELDSET");

  out.n(marko_node1);

  out.be("DIV", marko_attrs1);

  out.n(marko_node2);

  out.be("SELECT", marko_attrs2, null, 0, {
      onchange: __component.d("updatePreview")
    });

  marko_forEachProp(meter.styles, function(key, style) {
    out.e("OPTION", {
        value: key,
        selected: key == state.meter.style
      }, 1)
      .t(style.name);
  });

  out.ee();

  out.ee();

  out.be("DIV", marko_attrs3);

  out.n(marko_node3);

  out.be("SELECT", marko_attrs4, null, 0, {
      onchange: __component.d("updatePreview")
    });

  marko_forEachProp(meter.textures, function(key, style) {
    out.e("OPTION", {
        value: key,
        selected: key == state.meter.fill
      }, 1)
      .t(style.name);
  });

  out.ee();

  out.ee();

  out.e("DIV", marko_attrs5, 2)
    .n(marko_node8)
    .e("INPUT", {
        type: "range",
        min: "0",
        max: "100",
        id: "transparency",
        name: "transparency",
        value: state.meter.transparency
      }, 0);

  out.be("DIV", marko_attrs6);

  out.n(marko_node4);

  out.be("SELECT", marko_attrs7, null, 0, {
      onchange: __component.d("updatePreview")
    });

  marko_forEachProp(meter.colors, function(key, style) {
    out.e("OPTION", {
        value: key,
        selected: key == state.meter.cgen
      }, 1)
      .t(style.name);
  });

  out.ee();

  out.ee();

  out.ee();

  if (meter.colors[state.meter.cgen].settings) {
    include_tag({
        _target: meter.colors[state.meter.cgen].settings
      }, out);
  }

  out.be("FIELDSET");

  out.n(marko_node5);

  out.e("DIV", marko_attrs8, 2)
    .n(marko_node9)
    .e("INPUT", {
        id: "example-name",
        name: "exampleName",
        type: "text",
        value: state.example.name
      }, 0, 0, {
        oninput: __component.d("updatePreview")
      });

  out.be("DIV", marko_attrs9);

  out.n(marko_node6);

  out.be("SELECT", marko_attrs10, null, 0, {
      onchange: __component.d("updatePreview")
    });

  out.e("OPTION", {
      value: "",
      selected: state.example.Job == ""
    }, 0);

  marko_forEachProp(jobs, function(k, v) {
    out.e("OPTION", {
        value: k,
        selected: state.example.Job == k
      }, 1)
      .t(v);
  });

  out.ee();

  out.ee();

  out.e("CANVAS", {
      width: "100%",
      height: "2rem",
      "class": "preview",
      id: __component.elId("preview")
    }, 0);

  out.ee();

  out.ee();

  out.n(marko_node7);

  out.ee();
}

marko_template._ = marko_renderer(render, {
    type: marko_componentType
  }, marko_component);

marko_template.Component = marko_defineComponent(marko_component, marko_template._);

});
$_mod.def("/icoparse$1.0.0/src/changelog", function(require, exports, module, __filename, __dirname) { "use strict"

exports.current = "polo"
exports.list = [
    {
        name: "polo",
        date: "To Be Done",
        changes: [
            "direct hit and crit direct hit support",
            "completely changed and revamped rendering engine"
        ]
    },
    {
        name: "transfusion",
        date: "2017-06-27",
        changes: [
            "stormblood support",
            "long standing colorization issues"
        ]
    },
    {
        name: "ladybug",
        date: "2017-03-03",
        changes: [
            "colorpicker for custom colors",
            "missing pgl to mnk mapping",
            "live share your parses, if you have wsrelay installed somewhere" 
        ]
    },
    {
        name: "inkognito",
        date: "2017-02-23",
        changes: [
            "Gave ROG a color",
            "Limit break now in color",
            "Transparency for meter is now a thing"
        ]
    },
    {
        name: "bacon",
        date: "2017-02-19",
        changes: [
            "Fixed missing color for lancer in job color mode",
            "Added colors for pets, companions and the limitbreak",
            "Added a new column 'True HPS'",
            "Restyle top right button menu",
            "Option to highlight yourself",
        ]
    },
    {
        name: "1",
        date: "2017-02-17",
        changes: [
            "Added a working color picker",
            "Added pet icons for carbuncle, autoturrets, egis, fairies and chocobos",
            "Few styling tweaks",
            "Changed way of settingscreen detection, no more multiple settings windows!",
            "Name parsing was buggy, adjusted and tweaked parser",
        ]
    }
]
});
$_mod.def("/icoparse$1.0.0/src/components/config/routes/config-route-about/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    cl = require('/icoparse$1.0.0/src/changelog'/*"../../../../changelog"*/),
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_forEach = marko_helpers.f,
    marko_createElement = marko_helpers.e,
    marko_const = marko_helpers.const,
    marko_const_nextId = marko_const("3f04bd"),
    marko_node0 = marko_createElement("DIV", {
        "class": "title"
      }, 2, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", {
          "class": "ion-information-circled"
        }, 0)
      .t(" About"),
    marko_node1 = marko_createElement("DIV", {
        "class": "about"
      }, 4, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", null, 1)
        .t("Written by")
      .e("IMG", {
          src: "../../images/avatar.jpg",
          "class": "ava"
        }, 0)
      .e("A", {
          href: "http://eu.finalfantasyxiv.com/lodestone/character/9384803/",
          target: "_blank",
          "class": "name"
        }, 1)
        .t("Vanthia Orcus")
      .e("DIV", {
          "class": "world"
        }, 1)
        .t("Cerberus"),
    marko_node2 = marko_createElement("H2", null, 1, 0, {
        c: marko_const_nextId()
      })
      .t("Changelog");

function render(input, out) {
  var data = input;

  out.n(marko_node0);

  out.n(marko_node1);

  out.n(marko_node2);

  out.be("UL");

  marko_forEach(cl.list, function(version) {
    out.be("LI");

    out.e("STRONG", null, 1)
      .t(version.name);

    out.t(" ");

    out.e("EM", null, 3)
      .t("(")
      .t(version.date)
      .t(")");

    out.be("OL");

    marko_forEach(version.changes, function(entry) {
      out.e("LI", null, 1)
        .t(entry);
    });

    out.ee();

    out.ee();
  });

  out.ee();
}

marko_template._ = render;

});
$_mod.def("/icoparse$1.0.0/src/config", function(require, exports, module, __filename, __dirname) { "use strict"

const changelog = require('/icoparse$1.0.0/src/changelog'/*"./changelog"*/)
const column = require('/icoparse$1.0.0/src/ui/column/index'/*"./ui/column"*/)
const meter = require('/icoparse$1.0.0/src/ui/meter/index'/*"./ui/meter"*/)

function arrayToObject(arr, key, val) {
    const o = {}
    arr.forEach(item => {
        if (val === undefined) {
            const val = Object.assign({}, item)
            delete val[key]
            o[item[key]] = val
        } else {
            o[item[key]] = item[val]
        }
    })

    return o
}

function upgradeCellSettings(cells) {
    return cells.map(cell => {
        cell.opts = arrayToObject(cell.opts, "id", "value")
        cell.title = cell.opts.title
        delete cell.opts.title
        cell.enabled = !!cell.enabled

        return cell
    })
}

function defaultCellSettings(cells) {
    Object.keys(column).forEach(col => {
        if (typeof column[col] === "function") return

        if (cells.find(c => c.id === col) !== null) return
        const def = column[col]
        const opts = {}
        Object.keys(def.options).forEach(k => opts[k] = def.options[k].default)

        cells.push({
            id: col,
            enabled: def.enabled,
            title: def.name,
            opts
        })
    })
}

function defaultMeterSettings(meter) {
    meter.cgen = meter.cgen || Object.keys(meter.colors)[0]
    meter.fill = meter.fill || Object.keys(meter.textures)[0]
    meter.style = meter.style || Object.keys(meter.style)[0]

    return meter
}

exports.load = function() {
    if (localStorage.version == "1") {
        console.log("found legacy configuration format, converting to new style")
        const oldSettings = {
            cells: JSON.parse(localStorage.cells),
            header: JSON.parse(localStorage.header),
            meter: JSON.parse(localStorage.meter),
        }

        const newSettings = {
            general: {
                name: oldSettings.header.customName,
                wsrelay: oldSettings.header.wsrelay,
            },
            header: oldSettings.header,
            cells: upgradeCellSettings(oldSettings.cells),
            meter: oldSettings.meter,
        }

        delete newSettings.header.customName
        delete newSettings.header.wsrelay

        // TODO: convert meter settings

        // TODO: after meter impl: localStorage.clear()
        Object.keys(newSettings).forEach(k => localStorage.setItem(k, JSON.stringify(newSettings[k])))
        localStorage.setItem("version", changelog.current)

        return true
    }

    if (localStorage.version !== changelog.current) {
        console.log("detected old version, setting default values")

        Object.keys(defaults).forEach(cat => {
            const store = JSON.parse(localStorage.getItem(cat) || {})
            Object.keys(defaults[cat]).forEach(option => {
                if (!store.hasOwnProperty(option)) {
                    store[option] = defaults[cat][option]
                }
            })
            localStorage.setItem(cat, store)
        })

        const cells = localStorage.getItem("cells") || []
        cells = defaultCellSettings(cells)
        localStorage.setItem("cells", cells)

        const meter = localStorage("meter") || {}
        meter = defaultMeterSettings(meter)
        localStorage.setItem("meter", meter)

        localStorage.setItem("version", changelog.current)

        return true
    }

    return false
}

const defaults = exports.default = {
    general: {
        name: "YOU",
        wsrelay: null,
    },

    header: {
        time: true,
        highlight: true,
        target: true,
        stats: "dps-hps",
        strongest: "",
        deaths: false,
    },
}
});
$_mod.installed("icoparse$1.0.0", "marko-router", "1.0.0");
$_mod.main("/marko-router$1.0.0", "");
$_mod.remap("/marko-router$1.0.0/index", "/marko-router$1.0.0/index-browser");
$_mod.installed("marko-router$1.0.0", "page", "1.7.1");
$_mod.main("/page$1.7.1", "");
$_mod.builtin("process", "/process$0.6.0/browser");
$_mod.def("/process$0.6.0/browser", function(require, exports, module, __filename, __dirname) { // shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.once = noop;
process.off = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

});
$_mod.installed("page$1.7.1", "path-to-regexp", "1.2.1");
$_mod.main("/path-to-regexp$1.2.1", "");
$_mod.installed("path-to-regexp$1.2.1", "isarray", "0.0.1");
$_mod.main("/isarray$0.0.1", "");
$_mod.def("/isarray$0.0.1/index", function(require, exports, module, __filename, __dirname) { module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

});
$_mod.def("/path-to-regexp$1.2.1/index", function(require, exports, module, __filename, __dirname) { var isarray = require('/isarray$0.0.1/index'/*'isarray'*/)

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^()])+)\\))?|\\(((?:\\\\.|[^()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {String} str
 * @return {Array}
 */
function parse (str) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var suffix = res[6]
    var asterisk = res[7]

    var repeat = suffix === '+' || suffix === '*'
    var optional = suffix === '?' || suffix === '*'
    var delimiter = prefix || '/'
    var pattern = capture || group || (asterisk ? '.*' : '[^' + delimiter + ']+?')

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      pattern: escapeGroup(pattern)
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {String}   str
 * @return {Function}
 */
function compile (str) {
  return tokensToFunction(parse(str))
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^' + tokens[i].pattern + '$')
    }
  }

  return function (obj) {
    var path = ''
    var data = obj || {}

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received "' + value + '"')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encodeURIComponent(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = encodeURIComponent(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {String} str
 * @return {String}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {String} group
 * @return {String}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {RegExp} re
 * @param  {Array}  keys
 * @return {RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {String}
 */
function flags (options) {
  return options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {RegExp} path
 * @param  {Array}  keys
 * @return {RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {Array}  path
 * @param  {Array}  keys
 * @param  {Object} options
 * @return {RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {String} path
 * @param  {Array}  keys
 * @param  {Object} options
 * @return {RegExp}
 */
function stringToRegexp (path, keys, options) {
  var tokens = parse(path)
  var re = tokensToRegExp(tokens, options)

  // Attach keys back to the regexp.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] !== 'string') {
      keys.push(tokens[i])
    }
  }

  return attachKeys(re, keys)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {Array}  tokens
 * @param  {Array}  keys
 * @param  {Object} options
 * @return {RegExp}
 */
function tokensToRegExp (tokens, options) {
  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''
  var lastToken = tokens[tokens.length - 1]
  var endsWithSlash = typeof lastToken === 'string' && /\/$/.test(lastToken)

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = token.pattern

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (prefix) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithSlash ? route.slice(0, -2) : route) + '(?:\\/(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithSlash ? '' : '(?=\\/|$)'
  }

  return new RegExp('^' + route, flags(options))
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(String|RegExp|Array)} path
 * @param  {Array}                 [keys]
 * @param  {Object}                [options]
 * @return {RegExp}
 */
function pathToRegexp (path, keys, options) {
  keys = keys || []

  if (!isarray(keys)) {
    options = keys
    keys = []
  } else if (!options) {
    options = {}
  }

  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys, options)
  }

  if (isarray(path)) {
    return arrayToRegexp(path, keys, options)
  }

  return stringToRegexp(path, keys, options)
}

});
$_mod.def("/page$1.7.1/index", function(require, exports, module, __filename, __dirname) {   /* globals require, module */

  'use strict';var process=require("process"); 

  /**
   * Module dependencies.
   */

  var pathtoRegexp = require('/path-to-regexp$1.2.1/index'/*'path-to-regexp'*/);

  /**
   * Module exports.
   */

  module.exports = page;

  /**
   * Detect click event
   */
  var clickEvent = ('undefined' !== typeof document) && document.ontouchstart ? 'touchstart' : 'click';

  /**
   * To work properly with the URL
   * history.location generated polyfill in https://github.com/devote/HTML5-History-API
   */

  var location = ('undefined' !== typeof window) && (window.history.location || window.location);

  /**
   * Perform initial dispatch.
   */

  var dispatch = true;


  /**
   * Decode URL components (query string, pathname, hash).
   * Accommodates both regular percent encoding and x-www-form-urlencoded format.
   */
  var decodeURLComponents = true;

  /**
   * Base path.
   */

  var base = '';

  /**
   * Running flag.
   */

  var running;

  /**
   * HashBang option
   */

  var hashbang = false;

  /**
   * Previous context, for capturing
   * page exit events.
   */

  var prevContext;

  /**
   * Register `path` with callback `fn()`,
   * or route `path`, or redirection,
   * or `page.start()`.
   *
   *   page(fn);
   *   page('*', fn);
   *   page('/user/:id', load, user);
   *   page('/user/' + user.id, { some: 'thing' });
   *   page('/user/' + user.id);
   *   page('/from', '/to')
   *   page();
   *
   * @param {string|!Function|!Object} path
   * @param {Function=} fn
   * @api public
   */

  function page(path, fn) {
    // <callback>
    if ('function' === typeof path) {
      return page('*', path);
    }

    // route <path> to <callback ...>
    if ('function' === typeof fn) {
      var route = new Route(/** @type {string} */ (path));
      for (var i = 1; i < arguments.length; ++i) {
        page.callbacks.push(route.middleware(arguments[i]));
      }
      // show <path> with [state]
    } else if ('string' === typeof path) {
      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);
      // start [options]
    } else {
      page.start(path);
    }
  }

  /**
   * Callback functions.
   */

  page.callbacks = [];
  page.exits = [];

  /**
   * Current path being processed
   * @type {string}
   */
  page.current = '';

  /**
   * Number of pages navigated to.
   * @type {number}
   *
   *     page.len == 0;
   *     page('/login');
   *     page.len == 1;
   */

  page.len = 0;

  /**
   * Get or set basepath to `path`.
   *
   * @param {string} path
   * @api public
   */

  page.base = function(path) {
    if (0 === arguments.length) return base;
    base = path;
  };

  /**
   * Bind with the given `options`.
   *
   * Options:
   *
   *    - `click` bind to click events [true]
   *    - `popstate` bind to popstate [true]
   *    - `dispatch` perform initial dispatch [true]
   *
   * @param {Object} options
   * @api public
   */

  page.start = function(options) {
    options = options || {};
    if (running) return;
    running = true;
    if (false === options.dispatch) dispatch = false;
    if (false === options.decodeURLComponents) decodeURLComponents = false;
    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);
    if (false !== options.click) {
      document.addEventListener(clickEvent, onclick, false);
    }
    if (true === options.hashbang) hashbang = true;
    if (!dispatch) return;
    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;
    page.replace(url, null, true, dispatch);
  };

  /**
   * Unbind click and popstate event handlers.
   *
   * @api public
   */

  page.stop = function() {
    if (!running) return;
    page.current = '';
    page.len = 0;
    running = false;
    document.removeEventListener(clickEvent, onclick, false);
    window.removeEventListener('popstate', onpopstate, false);
  };

  /**
   * Show `path` with optional `state` object.
   *
   * @param {string} path
   * @param {Object=} state
   * @param {boolean=} dispatch
   * @param {boolean=} push
   * @return {!Context}
   * @api public
   */

  page.show = function(path, state, dispatch, push) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    if (false !== dispatch) page.dispatch(ctx);
    if (false !== ctx.handled && false !== push) ctx.pushState();
    return ctx;
  };

  /**
   * Goes back in the history
   * Back should always let the current route push state and then go back.
   *
   * @param {string} path - fallback path to go back if no more history exists, if undefined defaults to page.base
   * @param {Object=} state
   * @api public
   */

  page.back = function(path, state) {
    if (page.len > 0) {
      // this may need more testing to see if all browsers
      // wait for the next tick to go back in history
      history.back();
      page.len--;
    } else if (path) {
      setTimeout(function() {
        page.show(path, state);
      });
    }else{
      setTimeout(function() {
        page.show(base, state);
      });
    }
  };


  /**
   * Register route to redirect from one path to other
   * or just redirect to another route
   *
   * @param {string} from - if param 'to' is undefined redirects to 'from'
   * @param {string=} to
   * @api public
   */
  page.redirect = function(from, to) {
    // Define route from a path to another
    if ('string' === typeof from && 'string' === typeof to) {
      page(from, function(e) {
        setTimeout(function() {
          page.replace(/** @type {!string} */ (to));
        }, 0);
      });
    }

    // Wait for the push state and replace it with another
    if ('string' === typeof from && 'undefined' === typeof to) {
      setTimeout(function() {
        page.replace(from);
      }, 0);
    }
  };

  /**
   * Replace `path` with optional `state` object.
   *
   * @param {string} path
   * @param {Object=} state
   * @param {boolean=} init
   * @param {boolean=} dispatch
   * @return {!Context}
   * @api public
   */


  page.replace = function(path, state, init, dispatch) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    ctx.init = init;
    ctx.save(); // save before dispatching, which may redirect
    if (false !== dispatch) page.dispatch(ctx);
    return ctx;
  };

  /**
   * Dispatch the given `ctx`.
   *
   * @param {Context} ctx
   * @api private
   */
  page.dispatch = function(ctx) {
    var prev = prevContext,
      i = 0,
      j = 0;

    prevContext = ctx;

    function nextExit() {
      var fn = page.exits[j++];
      if (!fn) return nextEnter();
      fn(prev, nextExit);
    }

    function nextEnter() {
      var fn = page.callbacks[i++];

      if (ctx.path !== page.current) {
        ctx.handled = false;
        return;
      }
      if (!fn) return unhandled(ctx);
      fn(ctx, nextEnter);
    }

    if (prev) {
      nextExit();
    } else {
      nextEnter();
    }
  };

  /**
   * Unhandled `ctx`. When it's not the initial
   * popstate then redirect. If you wish to handle
   * 404s on your own use `page('*', callback)`.
   *
   * @param {Context} ctx
   * @api private
   */
  function unhandled(ctx) {
    if (ctx.handled) return;
    var current;

    if (hashbang) {
      current = base + location.hash.replace('#!', '');
    } else {
      current = location.pathname + location.search;
    }

    if (current === ctx.canonicalPath) return;
    page.stop();
    ctx.handled = false;
    location.href = ctx.canonicalPath;
  }

  /**
   * Register an exit route on `path` with
   * callback `fn()`, which will be called
   * on the previous context when a new
   * page is visited.
   */
  page.exit = function(path, fn) {
    if (typeof path === 'function') {
      return page.exit('*', path);
    }

    var route = new Route(path);
    for (var i = 1; i < arguments.length; ++i) {
      page.exits.push(route.middleware(arguments[i]));
    }
  };

  /**
   * Remove URL encoding from the given `str`.
   * Accommodates whitespace in both x-www-form-urlencoded
   * and regular percent-encoded form.
   *
   * @param {string} val - URL component to decode
   */
  function decodeURLEncodedURIComponent(val) {
    if (typeof val !== 'string') { return val; }
    return decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
  }

  /**
   * Initialize a new "request" `Context`
   * with the given `path` and optional initial `state`.
   *
   * @constructor
   * @param {string} path
   * @param {Object=} state
   * @api public
   */

  function Context(path, state) {
    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;
    var i = path.indexOf('?');

    this.canonicalPath = path;
    this.path = path.replace(base, '') || '/';
    if (hashbang) this.path = this.path.replace('#!', '') || '/';

    this.title = document.title;
    this.state = state || {};
    this.state.path = path;
    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
    this.params = {};

    // fragment
    this.hash = '';
    if (!hashbang) {
      if (!~this.path.indexOf('#')) return;
      var parts = this.path.split('#');
      this.path = parts[0];
      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';
      this.querystring = this.querystring.split('#')[0];
    }
  }

  /**
   * Expose `Context`.
   */

  page.Context = Context;

  /**
   * Push state.
   *
   * @api private
   */

  Context.prototype.pushState = function() {
    page.len++;
    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Save the context state.
   *
   * @api public
   */

  Context.prototype.save = function() {
    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Initialize `Route` with the given HTTP `path`,
   * and an array of `callbacks` and `options`.
   *
   * Options:
   *
   *   - `sensitive`    enable case-sensitive routes
   *   - `strict`       enable strict matching for trailing slashes
   *
   * @constructor
   * @param {string} path
   * @param {Object=} options
   * @api private
   */

  function Route(path, options) {
    options = options || {};
    this.path = (path === '*') ? '(.*)' : path;
    this.method = 'GET';
    this.regexp = pathtoRegexp(this.path,
      this.keys = [],
      options);
  }

  /**
   * Expose `Route`.
   */

  page.Route = Route;

  /**
   * Return route middleware with
   * the given callback `fn()`.
   *
   * @param {Function} fn
   * @return {Function}
   * @api public
   */

  Route.prototype.middleware = function(fn) {
    var self = this;
    return function(ctx, next) {
      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
      next();
    };
  };

  /**
   * Check if this route matches `path`, if so
   * populate `params`.
   *
   * @param {string} path
   * @param {Object} params
   * @return {boolean}
   * @api private
   */

  Route.prototype.match = function(path, params) {
    var keys = this.keys,
      qsIndex = path.indexOf('?'),
      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
      m = this.regexp.exec(decodeURIComponent(pathname));

    if (!m) return false;

    for (var i = 1, len = m.length; i < len; ++i) {
      var key = keys[i - 1];
      var val = decodeURLEncodedURIComponent(m[i]);
      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
        params[key.name] = val;
      }
    }

    return true;
  };


  /**
   * Handle "populate" events.
   */

  var onpopstate = (function () {
    var loaded = false;
    if ('undefined' === typeof window) {
      return;
    }
    if (document.readyState === 'complete') {
      loaded = true;
    } else {
      window.addEventListener('load', function() {
        setTimeout(function() {
          loaded = true;
        }, 0);
      });
    }
    return function onpopstate(e) {
      if (!loaded) return;
      if (e.state) {
        var path = e.state.path;
        page.replace(path, e.state);
      } else {
        page.show(location.pathname + location.hash, undefined, undefined, false);
      }
    };
  })();
  /**
   * Handle "click" events.
   */

  function onclick(e) {

    if (1 !== which(e)) return;

    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
    if (e.defaultPrevented) return;



    // ensure link
    // use shadow dom when available
    var el = e.path ? e.path[0] : e.target;
    while (el && 'A' !== el.nodeName) el = el.parentNode;
    if (!el || 'A' !== el.nodeName) return;



    // Ignore if tag has
    // 1. "download" attribute
    // 2. rel="external" attribute
    if (el.hasAttribute('download') || el.getAttribute('rel') === 'external') return;

    // ensure non-hash for the same path
    var link = el.getAttribute('href');
    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;



    // Check for mailto: in the href
    if (link && link.indexOf('mailto:') > -1) return;

    // check target
    if (el.target) return;

    // x-origin
    if (!sameOrigin(el.href)) return;



    // rebuild path
    var path = el.pathname + el.search + (el.hash || '');

    // strip leading "/[drive letter]:" on NW.js on Windows
    if (typeof process !== 'undefined' && path.match(/^\/[a-zA-Z]:\//)) {
      path = path.replace(/^\/[a-zA-Z]:\//, '/');
    }

    // same page
    var orig = path;

    if (path.indexOf(base) === 0) {
      path = path.substr(base.length);
    }

    if (hashbang) path = path.replace('#!', '');

    if (base && orig === path) return;

    e.preventDefault();
    page.show(orig);
  }

  /**
   * Event button.
   */

  function which(e) {
    e = e || window.event;
    return null === e.which ? e.button : e.which;
  }

  /**
   * Check if `href` is the same origin.
   */

  function sameOrigin(href) {
    var origin = location.protocol + '//' + location.hostname;
    if (location.port) origin += ':' + location.port;
    return (href && (0 === href.indexOf(origin)));
  }

  page.sameOrigin = sameOrigin;

});
$_mod.builtin("events", "/events$1.1.1/events");
$_mod.def("/events$1.1.1/events", function(require, exports, module, __filename, __dirname) { // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

});
$_mod.installed("marko-router$1.0.0", "object-path", "0.11.4");
$_mod.main("/object-path$0.11.4", "");
$_mod.def("/object-path$0.11.4/index", function(require, exports, module, __filename, __dirname) { (function (root, factory){
  'use strict';

  /*istanbul ignore next:cant test*/
  if (typeof module === 'object' && typeof module.exports === 'object') {
    module.exports = factory();
  } else if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else {
    // Browser globals
    root.objectPath = factory();
  }
})(this, function(){
  'use strict';

  var toStr = Object.prototype.toString;
  function hasOwnProperty(obj, prop) {
    if(obj == null) {
      return false
    }
    //to handle objects with null prototypes (too edge case?)
    return Object.prototype.hasOwnProperty.call(obj, prop)
  }

  function isEmpty(value){
    if (!value) {
      return true;
    }
    if (isArray(value) && value.length === 0) {
        return true;
    } else if (typeof value !== 'string') {
        for (var i in value) {
            if (hasOwnProperty(value, i)) {
                return false;
            }
        }
        return true;
    }
    return false;
  }

  function toString(type){
    return toStr.call(type);
  }

  function isObject(obj){
    return typeof obj === 'object' && toString(obj) === "[object Object]";
  }

  var isArray = Array.isArray || function(obj){
    /*istanbul ignore next:cant test*/
    return toStr.call(obj) === '[object Array]';
  }

  function isBoolean(obj){
    return typeof obj === 'boolean' || toString(obj) === '[object Boolean]';
  }

  function getKey(key){
    var intKey = parseInt(key);
    if (intKey.toString() === key) {
      return intKey;
    }
    return key;
  }

  function factory(options) {
    options = options || {}

    var objectPath = function(obj) {
      return Object.keys(objectPath).reduce(function(proxy, prop) {
        if(prop === 'create') {
          return proxy;
        }

        /*istanbul ignore else*/
        if (typeof objectPath[prop] === 'function') {
          proxy[prop] = objectPath[prop].bind(objectPath, obj);
        }

        return proxy;
      }, {});
    };

    function hasShallowProperty(obj, prop) {
      return (options.includeInheritedProps || (typeof prop === 'number' && Array.isArray(obj)) || hasOwnProperty(obj, prop))
    }

    function getShallowProperty(obj, prop) {
      if (hasShallowProperty(obj, prop)) {
        return obj[prop];
      }
    }

    function set(obj, path, value, doNotReplace){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (typeof path === 'string') {
        return set(obj, path.split('.').map(getKey), value, doNotReplace);
      }
      var currentPath = path[0];
      var currentValue = getShallowProperty(obj, currentPath);
      if (path.length === 1) {
        if (currentValue === void 0 || !doNotReplace) {
          obj[currentPath] = value;
        }
        return currentValue;
      }

      if (currentValue === void 0) {
        //check if we assume an array
        if(typeof path[1] === 'number') {
          obj[currentPath] = [];
        } else {
          obj[currentPath] = {};
        }
      }

      return set(obj[currentPath], path.slice(1), value, doNotReplace);
    }

    objectPath.has = function (obj, path) {
      if (typeof path === 'number') {
        path = [path];
      } else if (typeof path === 'string') {
        path = path.split('.');
      }

      if (!path || path.length === 0) {
        return !!obj;
      }

      for (var i = 0; i < path.length; i++) {
        var j = getKey(path[i]);

        if((typeof j === 'number' && isArray(obj) && j < obj.length) ||
          (options.includeInheritedProps ? (j in Object(obj)) : hasOwnProperty(obj, j))) {
          obj = obj[j];
        } else {
          return false;
        }
      }

      return true;
    };

    objectPath.ensureExists = function (obj, path, value){
      return set(obj, path, value, true);
    };

    objectPath.set = function (obj, path, value, doNotReplace){
      return set(obj, path, value, doNotReplace);
    };

    objectPath.insert = function (obj, path, value, at){
      var arr = objectPath.get(obj, path);
      at = ~~at;
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }
      arr.splice(at, 0, value);
    };

    objectPath.empty = function(obj, path) {
      if (isEmpty(path)) {
        return void 0;
      }
      if (obj == null) {
        return void 0;
      }

      var value, i;
      if (!(value = objectPath.get(obj, path))) {
        return void 0;
      }

      if (typeof value === 'string') {
        return objectPath.set(obj, path, '');
      } else if (isBoolean(value)) {
        return objectPath.set(obj, path, false);
      } else if (typeof value === 'number') {
        return objectPath.set(obj, path, 0);
      } else if (isArray(value)) {
        value.length = 0;
      } else if (isObject(value)) {
        for (i in value) {
          if (hasShallowProperty(value, i)) {
            delete value[i];
          }
        }
      } else {
        return objectPath.set(obj, path, null);
      }
    };

    objectPath.push = function (obj, path /*, values */){
      var arr = objectPath.get(obj, path);
      if (!isArray(arr)) {
        arr = [];
        objectPath.set(obj, path, arr);
      }

      arr.push.apply(arr, Array.prototype.slice.call(arguments, 2));
    };

    objectPath.coalesce = function (obj, paths, defaultValue) {
      var value;

      for (var i = 0, len = paths.length; i < len; i++) {
        if ((value = objectPath.get(obj, paths[i])) !== void 0) {
          return value;
        }
      }

      return defaultValue;
    };

    objectPath.get = function (obj, path, defaultValue){
      if (typeof path === 'number') {
        path = [path];
      }
      if (!path || path.length === 0) {
        return obj;
      }
      if (obj == null) {
        return defaultValue;
      }
      if (typeof path === 'string') {
        return objectPath.get(obj, path.split('.'), defaultValue);
      }

      var currentPath = getKey(path[0]);
      var nextObj = getShallowProperty(obj, currentPath)
      if (nextObj === void 0) {
        return defaultValue;
      }

      if (path.length === 1) {
        return nextObj;
      }

      return objectPath.get(obj[currentPath], path.slice(1), defaultValue);
    };

    objectPath.del = function del(obj, path) {
      if (typeof path === 'number') {
        path = [path];
      }

      if (obj == null) {
        return obj;
      }

      if (isEmpty(path)) {
        return obj;
      }
      if(typeof path === 'string') {
        return objectPath.del(obj, path.split('.'));
      }

      var currentPath = getKey(path[0]);
      if (!hasShallowProperty(obj, currentPath)) {
        return obj;
      }

      if(path.length === 1) {
        if (isArray(obj)) {
          obj.splice(currentPath, 1);
        } else {
          delete obj[currentPath];
        }
      } else {
        return objectPath.del(obj[currentPath], path.slice(1));
      }

      return obj;
    }

    return objectPath;
  }

  var mod = factory();
  mod.create = factory;
  mod.withInheritedProps = factory({includeInheritedProps: true})
  return mod;
});

});
$_mod.installed("marko-router$1.0.0", "url-assembler", "1.2.8");
$_mod.main("/url-assembler$1.2.8", "");
$_mod.remap("/url-assembler$1.2.8/index", "/url-assembler$1.2.8/browser");
$_mod.installed("url-assembler$1.2.8", "extend", "2.0.1");
$_mod.main("/extend$2.0.1", "");
$_mod.def("/extend$2.0.1/index", function(require, exports, module, __filename, __dirname) { var hasOwn = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var undefined;

var isArray = function isArray(arr) {
	if (typeof Array.isArray === 'function') {
		return Array.isArray(arr);
	}

	return toStr.call(arr) === '[object Array]';
};

var isPlainObject = function isPlainObject(obj) {
	'use strict';
	if (!obj || toStr.call(obj) !== '[object Object]') {
		return false;
	}

	var has_own_constructor = hasOwn.call(obj, 'constructor');
	var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	// Not own constructor property must be Object
	if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
		return false;
	}

	// Own properties are enumerated firstly, so to speed up,
	// if last one is own, then all properties are own.
	var key;
	for (key in obj) {}

	return key === undefined || hasOwn.call(obj, key);
};

module.exports = function extend() {
	'use strict';
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0],
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if (typeof target === 'boolean') {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {
		target = {};
	}

	for (; i < length; ++i) {
		options = arguments[i];
		// Only deal with non-null/undefined values
		if (options != null) {
			// Extend the base object
			for (name in options) {
				src = target[name];
				copy = options[name];

				// Prevent never-ending loop
				if (target === copy) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
					if (copyIsArray) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];
					} else {
						clone = src && isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[name] = extend(deep, clone, copy);

				// Don't bring in undefined values
				} else if (copy !== undefined) {
					target[name] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};


});
$_mod.builtin("url", "/url$0.11.0/url");
$_mod.installed("url$0.11.0", "punycode", "1.3.2");
$_mod.main("/punycode$1.3.2", "punycode");
$_mod.def("/punycode$1.3.2/punycode", function(require, exports, module, __filename, __dirname) { /*! https://mths.be/punycode v1.3.2 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * http://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.3.2',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		typeof define == 'function' &&
		typeof define.amd == 'object' &&
		define.amd
	) {
		define('punycode', function() {
			return punycode;
		});
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else { // in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else { // in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

});
$_mod.def("/url$0.11.0/util", function(require, exports, module, __filename, __dirname) { 'use strict';

module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};

});
$_mod.installed("url$0.11.0", "querystring", "0.2.0");
$_mod.main("/querystring$0.2.0", "");
$_mod.def("/querystring$0.2.0/decode", function(require, exports, module, __filename, __dirname) { // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (Array.isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

});
$_mod.def("/querystring$0.2.0/encode", function(require, exports, module, __filename, __dirname) { // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return Object.keys(obj).map(function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (Array.isArray(obj[k])) {
        return obj[k].map(function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

});
$_mod.def("/querystring$0.2.0/index", function(require, exports, module, __filename, __dirname) { 'use strict';

exports.decode = exports.parse = require('/querystring$0.2.0/decode'/*'./decode'*/);
exports.encode = exports.stringify = require('/querystring$0.2.0/encode'/*'./encode'*/);

});
$_mod.def("/url$0.11.0/url", function(require, exports, module, __filename, __dirname) { // Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var punycode = require('/punycode$1.3.2/punycode'/*'punycode'*/);
var util = require('/url$0.11.0/util'/*'./util'*/);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = require('/querystring$0.2.0/index'/*'querystring'*/);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};

});
$_mod.installed("url-assembler$1.2.8", "qs", "2.4.2");
$_mod.main("/qs$2.4.2", "");
$_mod.main("/qs$2.4.2/lib", "");
$_mod.def("/qs$2.4.2/lib/utils", function(require, exports, module, __filename, __dirname) { // Load modules


// Declare internals

var internals = {};


exports.arrayToObject = function (source) {

    var obj = {};
    for (var i = 0, il = source.length; i < il; ++i) {
        if (typeof source[i] !== 'undefined') {

            obj[i] = source[i];
        }
    }

    return obj;
};


exports.merge = function (target, source) {

    if (!source) {
        return target;
    }

    if (typeof source !== 'object') {
        if (Array.isArray(target)) {
            target.push(source);
        }
        else {
            target[source] = true;
        }

        return target;
    }

    if (typeof target !== 'object') {
        target = [target].concat(source);
        return target;
    }

    if (Array.isArray(target) &&
        !Array.isArray(source)) {

        target = exports.arrayToObject(target);
    }

    var keys = Object.keys(source);
    for (var k = 0, kl = keys.length; k < kl; ++k) {
        var key = keys[k];
        var value = source[key];

        if (!target[key]) {
            target[key] = value;
        }
        else {
            target[key] = exports.merge(target[key], value);
        }
    }

    return target;
};


exports.decode = function (str) {

    try {
        return decodeURIComponent(str.replace(/\+/g, ' '));
    } catch (e) {
        return str;
    }
};


exports.compact = function (obj, refs) {

    if (typeof obj !== 'object' ||
        obj === null) {

        return obj;
    }

    refs = refs || [];
    var lookup = refs.indexOf(obj);
    if (lookup !== -1) {
        return refs[lookup];
    }

    refs.push(obj);

    if (Array.isArray(obj)) {
        var compacted = [];

        for (var i = 0, il = obj.length; i < il; ++i) {
            if (typeof obj[i] !== 'undefined') {
                compacted.push(obj[i]);
            }
        }

        return compacted;
    }

    var keys = Object.keys(obj);
    for (i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        obj[key] = exports.compact(obj[key], refs);
    }

    return obj;
};


exports.isRegExp = function (obj) {
    return Object.prototype.toString.call(obj) === '[object RegExp]';
};


exports.isBuffer = function (obj) {

    if (obj === null ||
        typeof obj === 'undefined') {

        return false;
    }

    return !!(obj.constructor &&
        obj.constructor.isBuffer &&
        obj.constructor.isBuffer(obj));
};

});
$_mod.def("/qs$2.4.2/lib/stringify", function(require, exports, module, __filename, __dirname) { // Load modules

var Utils = require('/qs$2.4.2/lib/utils'/*'./utils'*/);


// Declare internals

var internals = {
    delimiter: '&',
    arrayPrefixGenerators: {
        brackets: function (prefix, key) {
            return prefix + '[]';
        },
        indices: function (prefix, key) {
            return prefix + '[' + key + ']';
        },
        repeat: function (prefix, key) {
            return prefix;
        }
    }
};


internals.stringify = function (obj, prefix, generateArrayPrefix) {

    if (Utils.isBuffer(obj)) {
        obj = obj.toString();
    }
    else if (obj instanceof Date) {
        obj = obj.toISOString();
    }
    else if (obj === null) {
        obj = '';
    }

    if (typeof obj === 'string' ||
        typeof obj === 'number' ||
        typeof obj === 'boolean') {

        return [encodeURIComponent(prefix) + '=' + encodeURIComponent(obj)];
    }

    var values = [];

    if (typeof obj === 'undefined') {
        return values;
    }

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        if (Array.isArray(obj)) {
            values = values.concat(internals.stringify(obj[key], generateArrayPrefix(prefix, key), generateArrayPrefix));
        }
        else {
            values = values.concat(internals.stringify(obj[key], prefix + '[' + key + ']', generateArrayPrefix));
        }
    }

    return values;
};


module.exports = function (obj, options) {

    options = options || {};
    var delimiter = typeof options.delimiter === 'undefined' ? internals.delimiter : options.delimiter;

    var keys = [];

    if (typeof obj !== 'object' ||
        obj === null) {

        return '';
    }

    var arrayFormat;
    if (options.arrayFormat in internals.arrayPrefixGenerators) {
        arrayFormat = options.arrayFormat;
    }
    else if ('indices' in options) {
        arrayFormat = options.indices ? 'indices' : 'repeat';
    }
    else {
        arrayFormat = 'indices';
    }

    var generateArrayPrefix = internals.arrayPrefixGenerators[arrayFormat];

    var objKeys = Object.keys(obj);
    for (var i = 0, il = objKeys.length; i < il; ++i) {
        var key = objKeys[i];
        keys = keys.concat(internals.stringify(obj[key], key, generateArrayPrefix));
    }

    return keys.join(delimiter);
};

});
$_mod.def("/qs$2.4.2/lib/parse", function(require, exports, module, __filename, __dirname) { // Load modules

var Utils = require('/qs$2.4.2/lib/utils'/*'./utils'*/);


// Declare internals

var internals = {
    delimiter: '&',
    depth: 5,
    arrayLimit: 20,
    parameterLimit: 1000
};


internals.parseValues = function (str, options) {

    var obj = {};
    var parts = str.split(options.delimiter, options.parameterLimit === Infinity ? undefined : options.parameterLimit);

    for (var i = 0, il = parts.length; i < il; ++i) {
        var part = parts[i];
        var pos = part.indexOf(']=') === -1 ? part.indexOf('=') : part.indexOf(']=') + 1;

        if (pos === -1) {
            obj[Utils.decode(part)] = '';
        }
        else {
            var key = Utils.decode(part.slice(0, pos));
            var val = Utils.decode(part.slice(pos + 1));

            if (!Object.prototype.hasOwnProperty.call(obj, key)) {
                obj[key] = val;
            }
            else {
                obj[key] = [].concat(obj[key]).concat(val);
            }
        }
    }

    return obj;
};


internals.parseObject = function (chain, val, options) {

    if (!chain.length) {
        return val;
    }

    var root = chain.shift();

    var obj = {};
    if (root === '[]') {
        obj = [];
        obj = obj.concat(internals.parseObject(chain, val, options));
    }
    else {
        var cleanRoot = root[0] === '[' && root[root.length - 1] === ']' ? root.slice(1, root.length - 1) : root;
        var index = parseInt(cleanRoot, 10);
        var indexString = '' + index;
        if (!isNaN(index) &&
            root !== cleanRoot &&
            indexString === cleanRoot &&
            index >= 0 &&
            index <= options.arrayLimit) {

            obj = [];
            obj[index] = internals.parseObject(chain, val, options);
        }
        else {
            obj[cleanRoot] = internals.parseObject(chain, val, options);
        }
    }

    return obj;
};


internals.parseKeys = function (key, val, options) {

    if (!key) {
        return;
    }

    // The regex chunks

    var parent = /^([^\[\]]*)/;
    var child = /(\[[^\[\]]*\])/g;

    // Get the parent

    var segment = parent.exec(key);

    // Don't allow them to overwrite object prototype properties

    if (Object.prototype.hasOwnProperty(segment[1])) {
        return;
    }

    // Stash the parent if it exists

    var keys = [];
    if (segment[1]) {
        keys.push(segment[1]);
    }

    // Loop through children appending to the array until we hit depth

    var i = 0;
    while ((segment = child.exec(key)) !== null && i < options.depth) {

        ++i;
        if (!Object.prototype.hasOwnProperty(segment[1].replace(/\[|\]/g, ''))) {
            keys.push(segment[1]);
        }
    }

    // If there's a remainder, just add whatever is left

    if (segment) {
        keys.push('[' + key.slice(segment.index) + ']');
    }

    return internals.parseObject(keys, val, options);
};


module.exports = function (str, options) {

    if (str === '' ||
        str === null ||
        typeof str === 'undefined') {

        return {};
    }

    options = options || {};
    options.delimiter = typeof options.delimiter === 'string' || Utils.isRegExp(options.delimiter) ? options.delimiter : internals.delimiter;
    options.depth = typeof options.depth === 'number' ? options.depth : internals.depth;
    options.arrayLimit = typeof options.arrayLimit === 'number' ? options.arrayLimit : internals.arrayLimit;
    options.parameterLimit = typeof options.parameterLimit === 'number' ? options.parameterLimit : internals.parameterLimit;

    var tempObj = typeof str === 'string' ? internals.parseValues(str, options) : str;
    var obj = {};

    // Iterate over the keys and setup the new object

    var keys = Object.keys(tempObj);
    for (var i = 0, il = keys.length; i < il; ++i) {
        var key = keys[i];
        var newObj = internals.parseKeys(key, tempObj[key], options);
        obj = Utils.merge(obj, newObj);
    }

    return Utils.compact(obj);
};

});
$_mod.def("/qs$2.4.2/lib/index", function(require, exports, module, __filename, __dirname) { // Load modules

var Stringify = require('/qs$2.4.2/lib/stringify'/*'./stringify'*/);
var Parse = require('/qs$2.4.2/lib/parse'/*'./parse'*/);


// Declare internals

var internals = {};


module.exports = {
    stringify: Stringify,
    parse: Parse
};

});
$_mod.def("/qs$2.4.2/index", function(require, exports, module, __filename, __dirname) { module.exports = require('/qs$2.4.2/lib/index'/*'./lib/'*/);

});
$_mod.def("/url-assembler$1.2.8/lib/fields-to-keep", function(require, exports, module, __filename, __dirname) { 
var urlFieldsToKeep = [
  'protocol',
  'slashes',
  'auth',
  'host',
  'port',
  'hostname',
  'hash',
  'search',
  //'query',
  'pathname',
  'path',
  'href'
];

module.exports = function selectUrlFields (assembler) {
  return urlFieldsToKeep.reduce(function(value, field) {
    value[field] = assembler[field]
    return value;
  }, {})
}

});
$_mod.def("/url-assembler$1.2.8/lib/url-assembler-factory", function(require, exports, module, __filename, __dirname) { var extend = require('/extend$2.0.1/index'/*'extend'*/);
var url = require('/url$0.11.0/url'/*'url'*/);
var qs = require('/qs$2.4.2/index'/*'qs'*/);
var selectUrlFields = require('/url-assembler$1.2.8/lib/fields-to-keep'/*'./fields-to-keep'*/);

module.exports = function (request) {

  function UrlAssembler (baseUrlOrUrlAssembler) {
    if(!(this instanceof UrlAssembler)) {
      return new UrlAssembler(baseUrlOrUrlAssembler);
    }

    var query = {};
    this._query = addQueryParamTo(query);
    this._prefix = '';
    this.pathname = '';
    this.getParsedQuery = clone.bind(null, query);

    Object.defineProperty(this, '_requestModule', { value: request, writable: true });

    if (baseUrlOrUrlAssembler instanceof UrlAssembler) {
      initWithInstance(this, baseUrlOrUrlAssembler);
    } else if (baseUrlOrUrlAssembler) {
      initWithBaseUrl(this, baseUrlOrUrlAssembler);
    }
  }

  function initWithBaseUrl (self, baseUrl) {
    extend(self, selectUrlFields(url.parse(baseUrl)));
    self._prefix = self.pathname;
    if(self._prefix === '/') {
      self._prefix = '';
      self.pathname = '';
    }
    if(self.search && self.search.length > 1) {
      var parsedQuery = qs.parse(self.search.substr(1))
      self._query(parsedQuery)
    }
  }

  function initWithInstance (self, instance) {
    extend(self, selectUrlFields(instance));
    self._prefix = instance._prefix;
    self._query(instance.getParsedQuery());
    self._requestModule = instance._requestModule;
  }

  var methods = UrlAssembler.prototype;

  methods._chain = function () {
    return new this.constructor(this);
  };

  methods.template = function (fragment) {
    var chainable = this._chain();
    chainable.pathname = this._prefix + fragment;
    return chainable;
  };

  methods.segment = function (segment) {
    var chainable = this._chain();
    chainable.pathname = this.pathname + segment;
    return chainable;
  };

  methods.toString = function toString () {
    return url.format(this);
  };
  methods.valueOf = methods.toString;
  methods.toJSON = methods.toString;

  methods.query = function (param, value) {
    var chainable = this._chain();
    chainable._query(param, value);
    return chainable;
  };

  methods.prefix = function prefix (prefix) {
    var chainable = this._chain();
    var pathToKeep = this.pathname.substr(this._prefix.length);
    chainable._prefix = this._prefix + prefix;
    chainable.pathname = chainable._prefix + pathToKeep;
    return chainable;
  };

  methods.param = function param (key, value, strict) {
    if (typeof key === 'object') {
      return _multiParam(this, key, (value === true));
    }
    var chainable = this._chain();
    var previous = this.pathname;
    var symbol = ':' + key;
    chainable.pathname = this.pathname.replace(symbol, value);
    if (!strict && chainable.pathname === previous) {
      return chainable.query(key, value);
    }
    return chainable;
  };

  function _multiParam (chainable, hash, strict) {
    for (key in hash) {
      chainable = chainable.param(key, hash[key], strict);
    }
    return chainable;
  }

  function addQueryParamTo (query) {
    return function addQueryParam(key, value) {
      if(!value && typeof key === 'object') {
        addManyParameters(key);
      } else {
        addOneParameter(key, value)
      }
      this.search = qs.stringify(query);
    }

    function addManyParameters (hash) {
      for (var key in hash) {
        if (nullOrUndef(hash[key])) delete hash[key];
      }
      extend(true, query, hash);
    }

    function addOneParameter (key, value) {
      if (!nullOrUndef(value)) {
        query[key] = value;
      }
    }
  }

  Object.defineProperty(UrlAssembler.prototype, 'request', {
    get: function () {
      var request = this._requestModule;
      if (request) {
        return request.defaults({ uri: this.toString() });
      } else {
        throw Error('the "request" module was not found. You must have it installed to use this property');
      }
    },
    set: function (newRequest) {
      return this._requestModule = newRequest;
    }
  });

  function nullOrUndef (value) {
    return value === null || typeof value === 'undefined';
  }

  function clone (obj) {
    return extend(true, {}, obj);
  }
  return UrlAssembler;
}

});
$_mod.def("/url-assembler$1.2.8/browser", function(require, exports, module, __filename, __dirname) { module.exports = require('/url-assembler$1.2.8/lib/url-assembler-factory'/*'./lib/url-assembler-factory'*/)();

});
$_mod.def("/marko-router$1.0.0/MarkoRouter", function(require, exports, module, __filename, __dirname) { /*
* @Author: Matteo Zambon
* @Date:   2017-03-18 17:26:56
* @Last Modified by:   Matteo Zambon
* @Last Modified time: 2017-03-30 07:47:43
*/

'use strict'

const EventEmitter = require('/events$1.1.1/events'/*'events'*/)
const page = require('/page$1.7.1/index'/*'page'*/)
const objectPath = require('/object-path$0.11.4/index'/*'object-path'*/)
const UrlAssembler = require('/url-assembler$1.2.8/browser'/*'url-assembler'*/)

class MarkoRouter extends EventEmitter {
  constructor(attr) {
    super()

    this._debug = typeof attr === 'object' && attr.debug ? attr.debug : false

    this._logLine('[MarkoRouter] constructor')

    if(this._debug) {
      this._logLine('[MarkoRouter] You can check the PageJS instance on _pageInstance')
      this._pageInstance = page
    }

    this._config = null

    this._stateRoot = null
    this._state = null
    this._route = null
    this._ctx = {}
  }
  /**
   * Set config
   * @created 2017-03-21T22:32:05-0300
   * @param   {object}                 newConfig Configuration object
   * @return  {null}                             no-return
   */
  set config(newConfig) {
    this._logLine('[MarkoRouter] set config.{newConfig}:')
    this._logLine(newConfig)

    this._config = newConfig
  }
  /**
   * Get config
   * @created 2017-03-21T22:32:50-0300
   * @return  {object}                 Configuration object
   */
  get config() {
    return this._config
  }
  /**
   * Get Config property
   * @private
   * @created 2017-03-21T18:21:24-0300
   * @param   {string}                 keyPath   Key Path for Page Config except State Root
   * @param   {string}                 stateRoot Override current State Root
   * @return  {any}                              Property related to State Root and Key Path
   */
  _getConfig(keyPath, stateRoot) {
    this._logLine('[MarkoRouter] _getConfig.{keyPath}: ' + keyPath)
    this._logLine('[MarkoRouter] _getConfig.{stateRoot}: ' + stateRoot)

    // Define whether use current State Root or override it
    stateRoot = stateRoot || this._stateRoot
    // Update Key Path including or isolating State Root
    keyPath = keyPath ? [stateRoot, keyPath].join('.') : stateRoot

    this._logLine('[MarkoRouter] _getConfig.{keyPath}:' + keyPath)

    // Return value in Key Path of Config
    const property = objectPath.get(this._config, keyPath)

    this._logLine('[MarkoRouter] _getConfig.{property}:' + JSON.stringify(property))

    return property
  }
  /**
   * Log a line just if _debug is enabled
   * @created 2017-03-28T16:30:45-0300
   * @param   {any}                 line Whatever needs to log
   * @return  {none}                     no-return
   */
  _logLine(line) {
    if(this._debug) {
      /* eslint-disable */
      console.log(line)
      /* eslint-enable */
    }
  }
  /**
   * Get state root base property for specified stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 stateRoot State root
   * @return  {string}                           State root base
   */
  _getStateRootBase(stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePath.{stateRoot}: ' + stateRoot)

    // Get State Root Base
    const stateRootBase = this._getConfig('_base', stateRoot)

    this._logLine('[MarkoRouter] _getStateRootBase.{stateRootBase}: ' + stateRootBase)

    if(!stateRootBase) {
      throw new Error('Cannot find State Root Base of State Root (' + stateRoot + ')')
    }

    return stateRootBase
  }
  /**
   * Get state root default state property for specified stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 stateRoot State root
   * @return  {string}                           State root Default state
   */
  _getStateRootDefaultState(stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePath.{stateRoot}: ' + stateRoot)

    // Get State Root DefaultState
    const stateRootDefaultState = this._getConfig('_default', stateRoot)

    this._logLine('[MarkoRouter] _getStateRootDefaultState.{stateRootDefaultState}: ' + stateRootDefaultState)

    if(!stateRootDefaultState) {
      throw new Error('Cannot find State Root Default State of State Root (' + stateRoot + ')')
    }

    return stateRootDefaultState
  }
  /**
   * Get state root routes for specified stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 stateRoot State root
   * @return  {object}                           State root routes
   */
  _getStateRootRoutes(stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePath.{stateRoot}: ' + stateRoot)

    const stateRootConfig = this._getConfig(undefined, stateRoot)

    const routes = {}
    for(const r in stateRootConfig) {
      const route = stateRootConfig[r]

      if(r.match(/^_/)) {
        this._logLine('[MarkoRouter] _getStateRootRoutes.{r}: ' + r + ' < SKIPPED >')

        continue
      }

      routes[r] = route

      this._logLine('[MarkoRouter] _getStateRootRoutes.{r}: ' + r)
    }

    return routes
  }
  /**
   * Get state property for specified stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 state     State
   * @param   {string}                 stateRoot State root
   * @return  {object}                           State
   */
  _getStateRoute(state, stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePath.{state}: ' + state)
    this._logLine('[MarkoRouter] _getStatePath.{stateRoot}: ' + stateRoot)

    // Get State Route
    const stateRoute = this._getConfig(state, stateRoot)

    this._logLine('[MarkoRouter] _getStateRoute.{stateRoute}: ' + stateRoute)

    if(!stateRoute) {
      throw new Error('Cannot find State (' + state + ') on State Root (' + stateRoot + ')')
    }

    return stateRoute
  }
  /**
   * Get state path property for specified stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 state     State
   * @param   {string}                 stateRoot State root
   * @return  {string}                           State path
   */
  _getStatePath(state, stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePath.{state}: ' + state)
    this._logLine('[MarkoRouter] _getStatePath.{stateRoot}: ' + stateRoot)

    // Get Path of State
    const statePath = this._getConfig(state + '.path', stateRoot)

    this._logLine('[MarkoRouter] _getStatePath.{statePath}: ' + statePath)

    if(!statePath) {
      throw new Error('Cannot find State (' + state + ') Path on State Root (' + stateRoot + ')')
    }

    return statePath
  }
  /**
   * Get path from state, params and stateRoot
   * @private
   * @created 2017-03-22T17:01:39-0300
   * @param   {string}                 state     State
   * @param   {object}                 params    Url parameters
   * @param   {string}                 stateRoot State root
   * @param   {object}                 queries   Query string parameters
   * @return  {string}                           Url path computed
   */
  _getStatePathUrl(state, params, stateRoot, queries) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] _getStatePathUrl.{state}: ' + state)
    this._logLine('[MarkoRouter] _getStatePathUrl.{params}: ' + JSON.stringify(params))
    this._logLine('[MarkoRouter] _getStatePathUrl.{stateRoot}: ' + stateRoot)
    this._logLine('[MarkoRouter] _getStatePathUrl.{queries}: ' + JSON.stringify(queries))

    // Get Path of State
    const url = this._getStatePath(state, stateRoot)

    // Initialize UrlAssembler instance
    let urlAssembler = UrlAssembler()

    // Check if prefix is needed
    if(stateRoot !== this._stateRoot) {
      const base = this._getStateRootBase(stateRoot)

      urlAssembler = urlAssembler.prefix(base)
    }

    // Add template
    urlAssembler = urlAssembler.template(url)

    // Compute params
    if(params) {
      urlAssembler = urlAssembler.param(params)
    }
    // Compute query strings
    if(queries) {
      urlAssembler = urlAssembler.query(queries)
    }

    // Get assembled url
    const urlAssembled = urlAssembler.toString()

    this._logLine('[MarkoRouter] _getStatePathUrl.{urlAssembled}: ' + urlAssembled)

    return urlAssembled
  }

  /**
   * Define Page Base based on '_base' key in State Root Config
   * @private
   * @created 2017-03-21T18:26:26-0300
   * @return  {none}                 no-return
   */
  _defPageBase() {
    // {this.stateRoot}._base
    const base = this._getStateRootBase()

    // Set Page Base
    page.base(base)
  }
  /**
   * Define Page Default (redirect / to correct state)
   * @private
   * @created 2017-03-21T18:27:58-0300
   * @return  {none}                 no-return
   */
  _defPageDefault() {
    // {this._stateRoot}._default
    const stateDefault = this._getStateRootDefaultState()

    // {this._stateRoot}.{stateDefault}.path
    const stateDefaultPath = this._getStatePath(stateDefault)

    // redirect / to {this._stateRoot}.{stateDefault}.path
    page('/', stateDefaultPath)
  }
  /**
   * Define Page Routes
   * @private
   * @created 2017-03-21T18:40:15-0300
   * @return  {none}                 no-return
   */
  _defPageRoutes() {
    const stateRootRoutes = this._getStateRootRoutes()

    // For each public property of State Root Config
    for(const routeState in stateRootRoutes) {
      // Get property as route
      const route = stateRootRoutes[routeState]

      this._logLine('[MarkoRouter] _defPageRoutes.{routeState}: ' + routeState)

      // If {route} is string means it's a redirect
      if(typeof route === 'string') {
        this._logLine('[MarkoRouter] _defPageRoutes.{route}: ' + route + ' < IS REDIRECT >')

        // Setup page redirect from {r} to {route} ({r} and {route} must be paths of the same State Root)
        page(routeState, route)

        continue
      }

      // Define Page with {r} as state and {route}
      this._defPageRoute(routeState, route)
    }
  }
  /**
   * Define Page Route
   * @private
   * @created 2017-03-21T18:43:05-0300
   * @param   {string}                 state State
   * @param   {object}                 route Route
   * @return  {none}                         no-return
   */
  _defPageRoute(state, route) {
    this._logLine('[MarkoRouter] _defPageRoute.{state}: ' + state)
    this._logLine('[MarkoRouter] _defPageRoute.{route.path}: ' + route.path)

    // Set a Page Route and use a function as handler
    page(route.path, (ctx) => {
      this._logLine('[MarkoRouter] onMatch.{state}: ' + state)
      this._logLine('[MarkoRouter] onMatch.{route.path}: ' + route.path)
      this._logLine('[MarkoRouter] onMatch.{ctx}: ')
      this._logLine(ctx)

      // Set current state root {this._stateRoot}
      const stateRoot = this._stateRoot
      // Set current state {this._state}
      const fromState = this._state
      // Set current route {this._route}
      const fromRoute = this._route
      // Set next state {state}
      const toState = state
      // Set next route {route}
      const toRoute = route

      // Set ctx as {ctx}
      this._ctx = ctx
      // Set state as {toState}
      this._state = toState
      // Set state as {toRoute}
      this._route = toRoute

      // Emit event state.change
      this._emitChangeState({
        'ctx': ctx,
        'stateRoot': stateRoot,
        'from': {
          'state': fromState,
          'route': fromRoute
        },
        'to': {
          'state': toState,
          'route': toRoute
        }
      })
    })
  }
  /**
   * Emit State has been changed
   * @private
   * @created 2017-03-21T18:50:31-0300
   * @param   {object}                 args Arguments to pass during event
   * @return  {none}                        no-return
   */
  _emitChangeState(args) {
    this._logLine('[MarkoRouter] _emitChangeState.{args}: ')
    this._logLine(args)

    this.emit('state.change', args)
  }
  /**
   * Emit Page has been Initialized
   * @private
   * @created 2017-03-21T18:50:31-0300
   * @param   {object}                 args Arguments to pass during event
   * @return  {none}                        no-return
   */
  _emitPageInit(args) {
    this._logLine('[MarkoRouter] _emitPageInit.{args}: ')
    this._logLine(args)

    this.emit('page.init', args)
  }

  /**
   * Set current state root
   * @created 2017-03-21T18:57:27-0300
   * @param   {string}                 newStateRoot State Root to be set
   * @return  {none}                                no-return
   */
  set stateRoot(newStateRoot) {
    this._logLine('[MarkoRouter] set stateRoot.{this._stateRoot}: ' + this._stateRoot)
    this._logLine('[MarkoRouter] set stateRoot.{newStateRoot}: ' + newStateRoot)

    this._stateRoot = newStateRoot
  }
  /**
   * Get current state root
   * @created 2017-03-21T18:58:32-0300
   * @return  {string}                 Current state root
   */
  get stateRoot() {
    return this._stateRoot
  }
  /**
   * Set current state
   * @created 2017-03-21T18:57:27-0300
   * @param   {string}                 newState State to be set
   * @return  {none}                            no-return
   */
  set state(newState) {
    this._logLine('[MarkoRouter] set state.{this._state}: ' + this._state)
    this._logLine('[MarkoRouter] set state.{newState}: ' + newState)

    this._state = newState
    this._route = this._getStateRoute(newState)
  }
  /**
   * Get current state
   * @created 2017-03-21T18:58:32-0300
   * @return  {string}                 Current state
   */
  get state() {
    return this._state
  }
  /**
   * Get current context
   * @created 2017-03-21T18:59:57-0300
   * @return  {object}                 Current context
   */
  get ctx() {
    return this._ctx
  }

  /**
   * Handle onMount from Marko Component
   * @created 2017-03-21T19:00:34-0300
   * @param   {string}                 stateRoot Current Root State
   * @param   {string}                 state     Current State
   * @return  {none}                             no-return
   */
  handleOnMount(stateRoot, state) {
    this._logLine('[MarkoRouter] handleOnMount.{stateRoot}: ' + stateRoot)
    this._logLine('[MarkoRouter] handleOnMount.{state}: ' + state)

    // Set current stateRoot
    this._stateRoot = stateRoot
    // Set current state
    if(state) {
      this.state = state
    }
    // Initialize Page
    this._pageInit()
  }
  /**
   * Go To State
   * @created 2017-03-21T19:07:27-0300
   * @param   {string}                 state     New state
   * @param   {object}                 params    State parameters
   * @param   {string}                 stateRoot New state root
   * @return  {none}                          no-return
   */
  goTo(state, params, stateRoot) {
    stateRoot = stateRoot || this._stateRoot

    this._logLine('[MarkoRouter] goTo.{state}: ' + state)
    this._logLine('[MarkoRouter] goTo.{params}: ' + JSON.stringify(params))
    this._logLine('[MarkoRouter] goTo.{stateRoot}: ' + stateRoot)

    const url = this._getStatePathUrl(state, params, stateRoot)

    if(stateRoot !== this._stateRoot) {
      // Set Page Base to new State Root

      this.goToExternalUrl(url)

      return
    }

    // Redirect to Path
    this.goToInternalUrl(url)
  }
  goToInternalUrl(url) {
    page(url)
  }
  goToExternalUrl(url) {
    location.href = url
  }
  /**
   * Initialize Page
   * @created 2017-03-21T19:11:02-0300
   * @return  {none}                 no-return
   */
  _pageInit() {
    this._logLine('[MarkoRouter] _pageInit.{this}: ')
    this._logLine(this)

    // Define Page Base
    this._defPageBase()
    // Define Page Default
    this._defPageDefault()
    // Define Page Routes
    this._defPageRoutes()

    // Start Page
    page()

    // Emit Page has been Initialized
    this._emitPageInit({
      'state': this._state,
      'stateRoot': this._stateRoot
    })
  }
}

module.exports = MarkoRouter

});
$_mod.def("/marko-router$1.0.0/index-browser", function(require, exports, module, __filename, __dirname) { /*
* @Author: Matteo Zambon
* @Date:   2017-03-16 18:44:00
* @Last Modified by:   Matteo Zambon
* @Last Modified time: 2017-03-30 22:21:00
*/

'use strict'

// Polyfill to support native ES6 promises
const MarkoRouter = require('/marko-router$1.0.0/MarkoRouter'/*'./MarkoRouter'*/)

module.exports = new MarkoRouter()

});
$_mod.def("/icoparse$1.0.0/src/components/config/component", function(require, exports, module, __filename, __dirname) { "use strict"

const markoRouter = require('/marko-router$1.0.0/index-browser'/*'marko-router'*/)

module.exports = class {
    onCreate() {
        this.state = {
            settings: {
                general: JSON.parse(localStorage.getItem("general")),
                header: JSON.parse(localStorage.getItem("header")),
                cells: JSON.parse(localStorage.getItem("cells")),
                meter: JSON.parse(localStorage.getItem("meter")),
            }
        }
    }

    onMount() {
    }

    goto(page) {
        console.log("page transition to", page)
        markoRouter.goTo(page)
    }
}
});
$_mod.def("/marko$4.4.16/src/components/taglib/helpers/renderComponent", function(require, exports, module, __filename, __dirname) { module.exports = function renderCompontent(tagRenderer, input, out, componentArgs) {
    out.___componentArgs = componentArgs;
    tagRenderer(input, out);
    out.___componentArgs = null;
};

});
$_mod.main("/icoparse$1.0.0/src/components/marko-router", "index.marko");
$_mod.def("/marko-router$1.0.0/browser", {
	"dependencies": [
		// pageJS
		"require: page"
	]
}
);
$_mod.def("/icoparse$1.0.0/src/components/marko-router/marko-router-config", {
	"config": {
		"_base": "/config.html",
		"_default": "colors",

		"general": {
			"path": "/general",
			"component": {
				"key": "config-route-general",
				"params": {}
			}
		},
		
		"table": {
			"path": "/table",
			"component": {
				"key": "config-route-table",
				"params": {}
			}
		},
		
		"colors": {
			"path": "/colors",
			"component": {
				"key": "config-route-colors",
				"params": {}
			}
		},

		"about": {
			"path": "/about",
			"component": {
				"key": "config-route-about",
				"params": {}
			}
		}
	}
	// "rootState": {
	// 	"_base": "/root",
	// 	"_default": "myState",
	// 	"myState": {
	// 		"path": "/state",
	// 		"component": {
	// 			"key": "rootState-route-myState",
	// 			"params": {}
	// 		}
	// 	},
	// 	"notfound": {
	// 		"path": "*",
	// 		"component": {
	// 			"key": "rootState-route-notfound",
	// 			"params": {}
	// 		}
	// 	}
	// }
}
);
$_mod.def("/icoparse$1.0.0/src/components/marko-router/component", function(require, exports, module, __filename, __dirname) { /*
* @Author: Matteo Zambon
* @Date:   2017-03-15 22:57:27
* @Last Modified by:   Matteo Zambon
* @Last Modified time: 2017-03-31 23:59:38
*/

'use strict'

const markoRouter = require('/marko-router$1.0.0/index-browser'/*'marko-router'*/)

module.exports = {
  onCreate(input) {
    if(!input.rootState) {
      throw new Error('input.rootState not found')
    }

    this.state = {
      'rootState': input.rootState,
      'configPath': input.configPath || './marko-router-config.json',
      'debug': input.debug || false,
      'componentPath': input.componentPath || '../',
      'routeDelimiter': input.routeDelimiter || '-route-',
      'loadingState': input.loadingState || 'loading'
    }

    this._logLine('[marko-router] onCreate')
  },
  onMount() {
    this._logLine('[marko-router] onMount')

    this.subscribeTo(markoRouter)
      .on('state.change', (args) => {
        this._logLine('[marko-router] markoRouter on(state.change).{args}: ')
        this._logLine(args)

        this.setState({
          'currentState': args.to.route.component.state || args.to.state,
          'componentKey': args.to.route.component.key,
          'componentParams': args.to.route.component.params,
          'router': args
        })

        this.emit('state.change', this.state)
      })

    markoRouter.config = require(this.state.configPath)
    markoRouter.handleOnMount(this.state.rootState, this.state.currentState)
  },
  onRender(out) {
    this._logLine('[marko-router] onRender')
  },
  onUpdate() {
    this._logLine('[marko-router] onUpdate')
    this._logLine(this)

    if(this.state.debug) {
      this._logLine('[marko-router] You can check the Marko Router instance on window.markoRouter')

      window.markoRouter = this
    }
  },
  onDestroy() {
    this._logLine('[marko-router] onDestroy')
  },
  _logLine(line) {
    if(this.state.debug) {
      /* eslint-disable */
      console.log(line)
      /* eslint-enable */
    }
  }
}

});
$_mod.def("/icoparse$1.0.0/src/components/marko-router/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    components_helpers = require('/marko$4.4.16/src/components/helpers-browser'/*"marko/src/components/helpers"*/),
    marko_registerComponent = components_helpers.rc,
    marko_componentType = marko_registerComponent("/icoparse$1.0.0/src/components/marko-router/index.marko", function() {
      return module.exports;
    }),
    marko_component = require('/icoparse$1.0.0/src/components/marko-router/component'/*"./component"*/),
    marko_renderer = components_helpers.r,
    marko_defineComponent = components_helpers.c,
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_loadTag = marko_helpers.t,
    include_tag = marko_loadTag(require('/marko$4.4.16/src/taglibs/core/include-tag'/*"marko/src/taglibs\\core\\include-tag"*/));

function render(input, out, __component, component, state) {
  var data = input;

  out.be("DIV", {
      id: __component.elId("marko-router")
    }, null, 4);

  if (!state.currentState) {
    const view = require(__dirname + "/" + state.componentPath + state.rootState + state.routeDelimiter + state.loadingState + '/index.marko')

    const componentParams = state.componentParams

    include_tag({
        _target: view,
        _arg: state.componentParams
      }, out);
  } else {
    const view = require(state.componentPath + state.rootState + state.routeDelimiter + state.currentState + '/index.marko')

    const componentParams = state.componentParams

    include_tag({
        _target: view,
        _arg: state.componentParams
      }, out);
  }

  out.ee();
}

marko_template._ = marko_renderer(render, {
    type: marko_componentType,
    roots: [
      "marko-router"
    ]
  }, marko_component);

marko_template.Component = marko_defineComponent(marko_component, marko_template._);

});
$_mod.def("/icoparse$1.0.0/src/components/config/index.marko", function(require, exports, module, __filename, __dirname) { // Compiled using marko@4.4.16 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require('/marko$4.4.16/src/vdom'/*"marko/src/vdom"*/).t(),
    components_helpers = require('/marko$4.4.16/src/components/helpers-browser'/*"marko/src/components/helpers"*/),
    marko_registerComponent = components_helpers.rc,
    marko_componentType = marko_registerComponent("/icoparse$1.0.0/src/components/config/index.marko", function() {
      return module.exports;
    }),
    marko_component = require('/icoparse$1.0.0/src/components/config/component'/*"./component"*/),
    marko_renderer = components_helpers.r,
    marko_defineComponent = components_helpers.c,
    marko_renderComponent = require('/marko$4.4.16/src/components/taglib/helpers/renderComponent'/*"marko/src/components/taglib/helpers/renderComponent"*/),
    marko_router_template = require('/icoparse$1.0.0/src/components/marko-router/index.marko'/*"../marko-router"*/),
    marko_helpers = require('/marko$4.4.16/src/runtime/vdom/helpers'/*"marko/src/runtime/vdom/helpers"*/),
    marko_loadTag = marko_helpers.t,
    marko_router_tag = marko_loadTag(marko_router_template),
    marko_attrs0 = {
        id: "navigation"
      },
    marko_createElement = marko_helpers.e,
    marko_const = marko_helpers.const,
    marko_const_nextId = marko_const("635a69"),
    marko_node0 = marko_createElement("DIV", {
        "class": "title"
      }, 2, 0, {
        c: marko_const_nextId()
      })
      .e("SPAN", {
          "class": "ion-settings"
        }, 0)
      .t(" Settings"),
    marko_attrs1 = {
        "class": "menu"
      },
    marko_node1 = marko_createElement("LI", {
        "class": "separator"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node2 = marko_createElement("LI", {
        "class": "separator"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node3 = marko_createElement("SPAN", {
        "class": "ion-gear-b"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node4 = marko_createElement("SPAN", {
        "class": "ion-stats-bars"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node5 = marko_createElement("SPAN", {
        "class": "ion-paintbrush"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node6 = marko_createElement("SPAN", {
        "class": "ion-flash"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node7 = marko_createElement("SPAN", {
        "class": "ion-levels"
      }, 0, 0, {
        c: marko_const_nextId()
      }),
    marko_node8 = marko_createElement("SPAN", {
        "class": "ion-information-circled"
      }, 0, 0, {
        c: marko_const_nextId()
      });

function render(input, out, __component, component, state) {
  var data = input;

  out.be("DIV", {
      id: __component.id
    }, null, 4);

  out.e("DIV", marko_attrs0, 2)
    .n(marko_node0)
    .e("NAV", null, 1)
      .e("UL", marko_attrs1, 8)
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "general"
              ])
          })
          .n(marko_node3)
          .t(" General")
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "table"
              ])
          })
          .n(marko_node4)
          .t(" Table")
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "colors"
              ])
          })
          .n(marko_node5)
          .t(" Colors")
        .n(marko_node1)
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "skills"
              ])
          })
          .n(marko_node6)
          .t(" Skills")
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "presets"
              ])
          })
          .n(marko_node7)
          .t(" Presets")
        .n(marko_node2)
        .e("LI", null, 2, 0, {
            onclick: __component.d("goto", [
                "about"
              ])
          })
          .n(marko_node8)
          .t(" About");

  out.be("DIV", {
      "class": "main",
      id: __component.elId("main")
    }, null, 4);

  marko_renderComponent(marko_router_tag, {
      debug: false,
      rootState: "config",
      componentPath: "../config/routes/"
    }, out, [
    __component,
    "router"
  ]);

  out.ee();

  out.ee();
}

marko_template._ = marko_renderer(render, {
    type: marko_componentType,
    id: "window"
  }, marko_component);

marko_template.Component = marko_defineComponent(marko_component, marko_template._);

});
$_mod.def("/icoparse$1.0.0/src/template/config/config", function(require, exports, module, __filename, __dirname) { "use strict"

const newVersion = require('/icoparse$1.0.0/src/config'/*"../../config"*/).load()

require('/icoparse$1.0.0/src/components/config/index.marko'/*"../../components/config/index.marko"*/)
    .render({newVersion})
    .then(dom => dom.appendTo(document.body))
});
$_mod.run("/icoparse$1.0.0/src/template/config/config");
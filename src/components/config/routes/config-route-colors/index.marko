import { jobs } from "../../../../lib/util"
import meter from "../../../../ui/meter"
import humane from "humane-js"
style {
    .preview {
        border: 1px solid silver;
        width: 80%;
        height: 2rem;
    }
}
form.content.pure-form.pure-form-aligned method="post" on-submit("onSubmit")
  div.form
    div.title
      ---
      <span.ion-paintbrush/>
      Colors
      ---
    fieldset
      legend -- Bar Style
      div.pure-control-group
        label for="style" -- Choose Style
        select id="style" name="style" on-change("updatePreview")
          option for(key, style in meter.styles) value=key selected=(key == state.meter.style) -- ${style.name}
      div.pure-control-group
        label for="fill" -- Choose fill method
        select id="fill" name="fill" on-change("updatePreview")
          option for(key, style in meter.textures) value=key selected=(key == state.meter.fill) -- ${style.name}
      div.pure-control-group
        label for="fill" -- Choose transparency
        input type="range" min="0" max="100" id="transparency" name="transparency" value=state.meter.transparency
      div.pure-control-group
        label for="cgen" -- Choose color selection mode
        select id="cgen" name="cgen" on-change("updatePreview")
          option for(key, style in meter.colors) value=key selected=(key == state.meter.cgen) -- ${style.name}
    if(meter.colors[state.meter.cgen].settings)
      include(meter.colors[state.meter.cgen].settings, {colors: meter.colors[state.meter.cgen]}) on-colorChange("onColorChange")
    <!--
    <fieldset>
        <legend>Custom colors</legend>
        <p>
            The search query runs on the character name, their job and job type in an case insensitive fashion.
            If the search matches, the specified color will be used instead of the generated one.
        </p>
        {this.state.color.custom.map((line, idx) => (
            <div class="pure-control-group">
                <input className="label" id={"custom-" + idx + "-search"} name={"custom-" + idx + "-search"} value={line.search || ""} type="text" placeholder="Search" onInput={this.changeValue.bind(this)} />
                <ColorPicker id={"custom-" + idx + "-color"} name={"custom-" + idx + "-color"} value={line.color || ""} type="color" placeholder="Custom color" onInput={this.changeValue.bind(this)} />
                <div className="pure-help-inline">
                    <button type="button" class="pure-button" data-id={idx} onClick={this.removeColorOverwrite.bind(this)}>Remove row</button>
                </div>
            </div>
        ))}
        <div class="pure-control-group">
            <button type="button" class="pure-button" onClick={this.addNewColorOverwrite.bind(this)}>Add new row</button>
        </div>
    </fieldset>
    -->
    fieldset
      legend -- Preview
      div.pure-control-group
        label for="example-name" -- Example Name
        input id="example-name" name="exampleName" type="text" on-input("updatePreview") value=state.example.name
      div.pure-control-group
        label for="example-job" -- Example Job
        select id="example-job" name="exampleJob" on-change("updatePreview")
          option value="" selected=(state.example.Job == "")
          option for(k, v in jobs) value=k selected=(state.example.Job == k) -- ${v}
      canvas.preview key="preview" width="100%" height="2rem"
  div.btnbar
    button type="submit" -- Save

$ const column = require("../../../../ui/column")
import humane from "humane-js"
style {
    .dragger {
        padding: 0;
    }

    .dragger li,
    li.gu-mirror {
        display: inline-block;
        margin: 0 0.5rem 0.5rem;
        background: rgba(34, 0, 51, 0.2);
        padding: 1rem;
        border-radius: 0.2rem;
        cursor: move;
    }

    .gu-mirror {
        position: fixed !important;
        margin: 0 !important;
        z-index: 9999 !important;
        opacity: 0.8;
    }

    .gu-hide {
        display: none !important;
    }

    .gu-unselectable {
        user-select: none !important;
    }

    .gu-transit {
        opacity: 0.2;
    }

    [title] {
        cursor: help;
        border-bottom: 1px dotted black;
    }

    .dragger button,
    li.gu-mirror button {
        margin-left: 0.5rem;
        cursor: pointer;
        background: transparent;
        border: 0px solid transparent;
        box-shadow: inherit;
        color: #000;
        padding: 0;
    }
}
form.content.pure-form.pure-form-aligned method="post" on-submit("onSubmit")
  div.form
    div.title
      ---
      <span.ion-stats-bars/>
      Table
      ---
    p -- Drag the available cells to the preferred location. The order of the cells represents the order in the overlay.
    fieldset
      legend -- Enabled
      ol.dragger key="enabled"
        for(cell in state.cells | status-var=loop)
          li.cell if(cell.enabled) data-key=cell.id data-idx=loop.getIndex()
            $ var col = column[cell.id]
            strong title=col.description -- ${col.name}
            button type="button" on-click("onDetails", cell.id)
              span.ion-gear-a
    fieldset
      legend -- Disabled
      ol.dragger key="disabled"
        for(cell in state.cells | status-var=loop)
          li.cell if(!cell.enabled) data-key=cell.id data-idx=loop.getIndex()
            $ var col = column[cell.id]
            strong title=col.description -- ${col.name}
            button type="button" on-click("onDetails", cell.id)
              span.ion-gear-a
    fieldset
      if(state.details != null)
        $ var cell = state.cells[state.details]
        $ var col = column[cell.id]
        legend -- Details for ${col.name}
        p -- ${col.description}
        div.pure-control-group
          label for="title" -- Table Header
          input id="title" type="text" name="title" value=cell.title
          span class="pure-form-message-inline" -- The title used in the overlay. Leave empty to hide the title
        div.pure-control-group for(c in Object.keys(col.options))
          $ var def = col.options[c], val = cell.opts[c]
          if(def.type=="option")
            span.label -- ${def.name}
            for(k,v in def.values)
              label.pure-radio
                input type="radio" id=((c + "-") + k) name=((c + "-") + k) value=k checked=(val == k)
                -- ${v}
            span class="pure-form-message-inline" if(def.description) -- ${def.description}
          else-if(def.type=="checkbox")
            span.label -- ${def.name}
            label.pure-checkbox
              input type="checkbox" id=c name=c checked=val
            span class="pure-form-message-inline" if(def.description) -- ${def.description}
          else-if(def.type=="select")
            label for=((cell.id + "-") + c) -- ${def.name}
            select id=((cell.id + "-") + c) name=((cell.id + "-") + c)
              option for(k,v in def.values) value=k selected=(val == k) -- ${v}
            span class="pure-form-message-inline" if(def.description) -- ${def.description}
          else -- ${c}: Unkown type ${def.type}
        div.pure-control-group
          button type="button" on-click("onSubmitDetails", state.details) -- Update
      else
        legend -- Cell Details
        -- Click on the
        span.ion-gear-a
        -- gear icon to view detailed settings.
  div.btnbar
    button type="submit" -- Save
